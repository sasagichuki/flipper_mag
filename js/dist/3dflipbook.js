/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 69);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;
var _$ =  true ? window.jQuery : require('jquery'),
    _html2canvas =  true ? window.html2canvas : require('html2canvas'),
    _THREE =  true ? window.THREE : require('three'),
    _PDFJS =  true ? window.PDFJS : require('pdfjs');

exports.$ = _$;
exports.html2canvas = _html2canvas;
exports.THREE = _THREE;
exports.PDFJS = _PDFJS;

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;
var _$ =  true ? window.jQuery : require('jquery'),
    _html2canvas =  true ? window.html2canvas : require('html2canvas'),
    _THREE =  true ? window.THREE : require('three'),
    _PDFJS =  true ? window.PDFJS : require('pdfjs');

exports.$ = _$;
exports.html2canvas = _html2canvas;
exports.THREE = _THREE;
exports.PDFJS = _PDFJS;

/***/ },
/* 2 */
/***/ function(module, exports) {

"use strict";
'use strict';

exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BaseMathUtils = function () {
  function BaseMathUtils() {
    _classCallCheck(this, BaseMathUtils);
  }

  BaseMathUtils.sum1 = function sum1(ka, a, kb, b) {
    return [ka * a[0] + kb * b[0]];
  };

  BaseMathUtils.sum2 = function sum2(ka, a, kb, b) {
    return [ka * a[0] + kb * b[0], ka * a[1] + kb * b[1]];
  };

  BaseMathUtils.sum3 = function sum3(ka, a, kb, b) {
    return [ka * a[0] + kb * b[0], ka * a[1] + kb * b[1], ka * a[2] + kb * b[2]];
  };

  BaseMathUtils.sum4 = function sum4(ka, a, kb, b) {
    return [ka * a[0] + kb * b[0], ka * a[1] + kb * b[1], ka * a[2] + kb * b[2], ka * a[3] + kb * b[3]];
  };

  BaseMathUtils.rk4 = function rk4(dy, t, dt, y) {
    var sum = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : BaseMathUtils.sum[y.length - 1];

    var k1 = dy(t, y),
        k2 = dy(t + dt / 2, sum(1, y, dt / 2, k1)),
        k3 = dy(t + dt / 2, sum(1, y, dt / 2, k2)),
        k4 = dy(t + dt, sum(1, y, dt, k3));
    return sum(1, y, dt / 6, sum(1, sum(1, k1, 2, k2), 1, sum(2, k3, 1, k4)));
  };

  BaseMathUtils.extrapolateLinear = function extrapolateLinear(x, y, xi) {
    return y[0] + (y[1] - y[0]) / (x[1] - x[0]) * (xi - x[0]);
  };

  BaseMathUtils.interpolateLinear = function interpolateLinear(x, y, xi) {
    var yi = void 0;
    if (x[0] > x[1]) {
      x = x.reverse();
      y = y.reverse();
    }
    if (xi < x[0]) {
      yi = y[0];
    } else if (xi > x[1]) {
      yi = y[1];
    } else {
      yi = BaseMathUtils.extrapolateLinear(x, y, xi);
    }
    return yi;
  };

  BaseMathUtils.calcScale = function calcScale(srcW, srcH, dstW, dstH) {
    return Math.min(dstW / srcW, dstH / srcH);
  };

  BaseMathUtils.mulM = function mulM(a, b) {
    var r = [];
    for (var i = 0; i < a.length; ++i) {
      r.push([]);
      for (var j = 0; j < b[0].length; ++j) {
        r[i][j] = 0;
        for (var k = 0; k < b.length; ++k) {
          r[i][j] += a[i][k] * b[k][j];
        }
      }
    }
    return r;
  };

  BaseMathUtils.transM = function transM(m) {
    var r = [];
    for (var i = 0; i < m.length; ++i) {
      for (var j = 0; j < m[0].length; ++j) {
        if (!r[j]) {
          r[j] = [];
        }
        r[j][i] = m[i][j];
      }
    }
    return r;
  };

  BaseMathUtils.mat = function mat(data) {
    var s = 0;
    for (var _iterator = data, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var x = _ref;

      s += x;
    }
    return s / data.length;
  };

  BaseMathUtils.disp = function disp(data) {
    var M = BaseMathUtils.mat(data);
    var s = 0;
    for (var _iterator2 = data, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var x = _ref2;

      s += (x - M) * (x - M);
    }
    return s / data.length;
  };

  BaseMathUtils.predict = function predict(data, num) {
    var r = [],
        l = data.length,
        D = BaseMathUtils.disp(data);
    if (D < l && l > 1) {
      var am = [],
          bm = [];
      for (var i = 0; i < l; ++i) {
        am.push([i, 1]);
        bm.push([data[i]]);
      }
      var ta = BaseMathUtils.transM(am),
          a = BaseMathUtils.mulM(ta, am),
          b = BaseMathUtils.mulM(ta, bm),
          d = a[0][0] * a[1][1] - a[1][0] * a[0][1],
          p = [-(a[0][1] * b[1][0] - b[0][0] * a[1][1]) / d, (a[0][0] * b[1][0] - a[1][0] * b[0][0]) / d];
      for (var _i3 = 0; _i3 < num; ++_i3) {
        var v = Math.round(p[0] * (_i3 + l) + p[1]);
        if (r.indexOf(v) === -1) {
          r.push(v);
        }
      }
    }
    return r;
  };

  BaseMathUtils.getUnique = function getUnique() {
    return Math.ceil(1e9 * Math.random());
  };

  BaseMathUtils.setSplinePoints = function setSplinePoints(spline, ps) {
    if (spline.points.length !== ps.x.length) {
      console.warn('setSplinePoints: bad points');
    }
    for (var i = 0; i < spline.points.length; ++i) {
      spline.points[i].set(ps.x[i], ps.y[i], ps.z ? ps.z[i] : 0);
    }
  };

  BaseMathUtils.mapl2L = function mapl2L(ls, len, n, f) {
    var dL = len / (n - 1);
    var L = 0;
    for (var i = 0, d = ls[0]; i < ls.length - 1 && L < len + 0.1 * dL; ++i, d += ls[i]) {
      if (Math.abs(L - d) < Math.abs(L - d - ls[i + 1])) {
        f(i, L);
        L += dL;
      }
    }
    if (L < len + 0.1 * dL) {
      console.warn('mapl2L: ls is not enought');
    }
  };

  BaseMathUtils.det2 = function det2(a, b, c, d) {
    return a * d - b * c;
  };

  BaseMathUtils.solve2Lin = function solve2Lin(a1, b1, a2, b2) {
    var res = void 0;
    var d = BaseMathUtils.det2(a1[0], a1[1], a2[0], a2[1]);
    if (Math.abs(d) > BaseMathUtils.eps) {
      var dx = BaseMathUtils.det2(b1, a1[1], b2, a2[1]),
          dy = BaseMathUtils.det2(a1[0], b1, a2[0], b2);
      res = {
        x: dx / d,
        y: dy / d
      };
    }
    return res;
  };

  BaseMathUtils.isInsidePoly = function isInsidePoly(ps, p) {
    var done = false,
        ct = void 0;
    for (var i = 0; i < ps.length; ++i) {
      if (BaseMathUtils.v2dist(p, ps[i]) < BaseMathUtils.eps) {
        ct = 1;
        done = true;
        break;
      }
    }
    while (!done) {
      done = true;
      ct = 0;
      var np = { x: p.x + Math.random() - 0.5, y: p.y + Math.random() - 0.5 },
          rn = { x: np.x - p.x, y: np.y - p.y },
          a1 = [rn.y, -rn.x],
          b1 = p.x * rn.y - p.y * rn.x;
      for (var _i4 = 0; _i4 < ps.length; ++_i4) {
        var p0 = ps[_i4],
            p1 = ps[(_i4 + 1) % ps.length],
            n = { x: p1.x - p0.x, y: p1.y - p0.y },
            a2 = [n.y, -n.x],
            b2 = p0.x * n.y - p0.y * n.x,
            ip = BaseMathUtils.solve2Lin(a1, b1, a2, b2);
        if (ip) {
          if (BaseMathUtils.v2dist(ip, p0) < BaseMathUtils.eps || BaseMathUtils.v2dist(ip, p1) < BaseMathUtils.eps) {
            done = false;
            break;
          } else if (ip.x > Math.min(p0.x, p1.x) - BaseMathUtils.eps && ip.x < Math.max(p0.x, p1.x) + BaseMathUtils.eps && ip.y > Math.min(p0.y, p1.y) - BaseMathUtils.eps && ip.y < Math.max(p0.y, p1.y) + BaseMathUtils.eps) {
            if (BaseMathUtils.v2dist(ip, p) < BaseMathUtils.eps) {
              ct = 1;
              break;
            } else {
              var tn = { x: ip.x - p.x, y: ip.y - p.y };
              ct += tn.x * rn.x + tn.y * rn.y > 0;
            }
          }
        }
      }
    }
    return ct % 2;
  };

  BaseMathUtils.isInsideConvPoly = function isInsideConvPoly(ps, p) {
    var sg = [0, 0];
    for (var i = 0; i < ps.length; ++i) {
      var p0 = ps[i],
          p1 = ps[(i + 1) % ps.length],
          a = { x: p0.x - p.x, y: p0.y - p.y },
          b = { x: p1.x - p.x, y: p1.y - p.y };
      ++sg[(a.x * b.y - a.y * b.x < 0) + 0];
    }
    return ~sg.indexOf(ps.length);
  };

  BaseMathUtils.v2len = function v2len(v2) {
    return Math.sqrt(v2.x * v2.x + v2.y * v2.y);
  };

  BaseMathUtils.v2dist = function v2dist(v21, v22) {
    return BaseMathUtils.v2len({
      x: v22.x - v21.x,
      y: v22.y - v21.y
    });
  };

  BaseMathUtils.computeSquare = function computeSquare(ps) {
    var a = [];
    var p = 0;
    for (var i = 0; i < ps.length; ++i) {
      a.push(BaseMathUtils.v2dist(ps[i], ps[(i + 1) % ps.length]));
      p += 0.5 * a[i];
    }
    return Math.sqrt(p * (p - a[0]) * (p - a[1]) * (p - a[2]));
  };

  BaseMathUtils.computeInterpCoefs = function computeInterpCoefs(tri, p) {
    var s = BaseMathUtils.computeSquare(tri),
        coefs = [],
        l = tri.length;
    for (var i = 0; i < l; ++i) {
      coefs[i] = BaseMathUtils.computeSquare([p, tri[(i + 1) % l], tri[(i + 2) % l]]) / s;
    }
    return coefs;
  };

  return BaseMathUtils;
}();

BaseMathUtils.sum = [BaseMathUtils.sum1, BaseMathUtils.sum2, BaseMathUtils.sum3, BaseMathUtils.sum4];
BaseMathUtils.eps = 1e-4;
exports.default = BaseMathUtils;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _libs = __webpack_require__(0);

var _BaseMathUtils2 = __webpack_require__(2);

var _BaseMathUtils3 = _interopRequireDefault(_BaseMathUtils2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MathUtils = function (_BaseMathUtils) {
  _inherits(MathUtils, _BaseMathUtils);

  function MathUtils() {
    _classCallCheck(this, MathUtils);

    return _possibleConstructorReturn(this, _BaseMathUtils.apply(this, arguments));
  }

  MathUtils.splitSpline = function splitSpline(spline, N) {
    var o = { len: 0, ls: [0] },
        dl = 1 / N;
    for (var i = 0; i <= N; ++i) {
      var p = spline.getPoint(i * dl);
      if (i) {
        var d = MathUtils.v1.distanceTo(p);
        o.len += d;
        o.ls.push(d);
      }
      MathUtils.v1.copy(p);
    }
    return o;
  };

  MathUtils.getLinearIndeces = function getLinearIndeces(spline, n) {
    var del = 5000,
        dDel = 1 / del;
    var ls = [0];
    var l = 0;
    for (var i = 0; i <= del; ++i) {
      var p = spline.getPoint(i * dDel);
      if (i) {
        var d = MathUtils.v1.distanceTo(p);
        l += d;
        ls.push(d);
      }
      MathUtils.v1.copy(p);
    }
    ls.push(1e7);

    var res = [],
        dl = l / (n - 1);
    for (var _i = 0, L = 0, _d = ls[0]; _i < ls.length - 1; ++_i, _d += ls[_i]) {
      if (Math.abs(L - _d) < Math.abs(L - _d - ls[_i + 1])) {
        res.push(_i * dDel);
        L += dl;
      }
    }

    return res;
  };

  MathUtils.refinePoly = function refinePoly(poly, maxDl) {
    var res = [];
    for (var i = 0; i < poly.length; ++i) {
      var p0 = poly[i],
          p1 = poly[(i + 1) % poly.length],
          l = _BaseMathUtils3.default.v2dist(p0, p1),
          n = Math.ceil(l / maxDl),
          dl = l / n;
      res.push(p0);
      for (var j = 1; j < n; ++j) {
        res.push(new _libs.THREE.Vector2(p0.x + j * dl * (p1.x - p0.x) / l, p0.y + j * dl * (p1.y - p0.y) / l));
      }
    }
    return res;
  };

  return MathUtils;
}(_BaseMathUtils3.default);

MathUtils.v1 = new _libs.THREE.Vector3();
exports.default = MathUtils;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _libs = __webpack_require__(0);

var _GraphUtils = __webpack_require__(5);

var _GraphUtils2 = _interopRequireDefault(_GraphUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ImageBase = function () {
  function ImageBase(context, width, height, color) {
    _classCallCheck(this, ImageBase);

    this.context = context;
    this.wnd = context.wnd;
    this.doc = context.doc;
    this.element = context.element || context.doc.body;
    this.c = context.renderCanvas || ImageBase.renderCanvas;
    this.ctx = context.renderCanvasCtx || ImageBase.renderCanvasCtx;
    this.resW = this.width = width;
    this.resH = this.height = height;
    this.color = color;
  }

  ImageBase.prototype.dispose = function dispose() {};

  ImageBase.prototype.renderBlankPage = function renderBlankPage() {
    this.ctx.beginPath();
    this.ctx.fillStyle = _GraphUtils2.default.color2Rgba(this.color, 1);
    this.ctx.rect(0, 0, this.c.width, this.c.height);
    this.ctx.fill();
  };

  ImageBase.prototype.renderImage = function renderImage(image) {
    this.pushCtx();
    this.ctx.drawImage(image, 0, 0);
    this.popCtx();
  };

  ImageBase.prototype.normToConv = function normToConv(p) {
    return {
      x: p.x * this.c.width,
      y: (1 - p.y) * this.c.height
    };
  };

  ImageBase.prototype.renderHit = function renderHit(poly) {
    var ctx = this.ctx;
    ctx.fillStyle = 'rgba(255,255,0,0.4)';
    ctx.beginPath();
    var p = this.normToConv(poly[0]);
    ctx.moveTo(p.x, p.y);
    for (var i = 1; i < poly.length; ++i) {
      p = this.normToConv(poly[i]);
      ctx.lineTo(p.x, p.y);
    }
    ctx.closePath();
    ctx.fill();
  };

  ImageBase.prototype.pushCtx = function pushCtx() {
    if (this.resW != this.c.width) {
      this.c.width = this.resW;
    }
    if (this.resH != this.c.height) {
      this.c.height = this.resH;
    }
    this.ctx.save();
    this.ctx.scale(this.c.width / this.width, this.c.height / this.height);
    return this.ctx;
  };

  ImageBase.prototype.popCtx = function popCtx() {
    this.ctx.restore();
  };

  ImageBase.prototype.renderNotFoundPage = function renderNotFoundPage() {
    this.renderBlankPage();
  };

  ImageBase.prototype.finishRender = function finishRender() {
    if (this.onChange) {
      this.onChange(this.c);
    }
  };

  ImageBase.prototype.finishLoad = function finishLoad() {
    if (this.onLoad) {
      this.onLoad();
    } else {
      this.startRender();
    }
  };

  ImageBase.prototype.getSimulatedDoc = function getSimulatedDoc() {
    return undefined;
  };

  return ImageBase;
}();

ImageBase.renderCanvas = (0, _libs.$)('<canvas>')[0];
ImageBase.renderCanvasCtx = ImageBase.renderCanvas.getContext('2d');
exports.default = ImageBase;

/***/ },
/* 5 */
/***/ function(module, exports) {

"use strict";
'use strict';

exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GraphUtils = function () {
  function GraphUtils() {
    _classCallCheck(this, GraphUtils);
  }

  GraphUtils.extrapolateLinear = function extrapolateLinear(x, y, xi) {
    return y[0] + (y[1] - y[0]) / (x[1] - x[0]) * (xi - x[0]);
  };

  GraphUtils.interpolate01 = function interpolate01(y1, y2, t) {
    return GraphUtils.extrapolateLinear([0, 1], [y1, y2], t);
  };

  GraphUtils.getColorBytes = function getColorBytes(color) {
    return [color >> 16 & 0xFF, color >> 8 & 0xFF, color & 0xFF];
  };

  GraphUtils.inverseColor = function inverseColor(color) {
    var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

    var bs = GraphUtils.getColorBytes(color),
        ibs = [0xFF - bs[0], 0xFF - bs[1], 0xFF - bs[2]],
        nbs = [Math.round(GraphUtils.interpolate01(bs[0], ibs[0], t)), Math.round(GraphUtils.interpolate01(bs[1], ibs[1], t)), Math.round(GraphUtils.interpolate01(bs[2], ibs[2], t))];
    return GraphUtils.bytes2Color(nbs);
  };

  GraphUtils.color2Rgba = function color2Rgba(color, a) {
    return GraphUtils.bytes2Rgba(GraphUtils.getColorBytes(color), a);
  };

  GraphUtils.bytes2Rgba = function bytes2Rgba(bs, a) {
    return 'rgba(' + bs.join(',') + ',' + a + ')';
  };

  GraphUtils.bytes2Color = function bytes2Color(bs) {
    return bs[2] | bs[1] << 8 | bs[0] << 16;
  };

  return GraphUtils;
}();

exports.default = GraphUtils;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _Cache = __webpack_require__(12);

var _Cache2 = _interopRequireDefault(_Cache);

var _BlankImage = __webpack_require__(42);

var _BlankImage2 = _interopRequireDefault(_BlankImage);

var _StaticImage = __webpack_require__(57);

var _StaticImage2 = _interopRequireDefault(_StaticImage);

var _PdfImage = __webpack_require__(55);

var _PdfImage2 = _interopRequireDefault(_PdfImage);

var _InteractiveImage = __webpack_require__(49);

var _InteractiveImage2 = _interopRequireDefault(_InteractiveImage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ImageFactory = function () {
  function ImageFactory(context, cache) {
    _classCallCheck(this, ImageFactory);

    this.context = context;
    this.cache = cache || new _Cache2.default();
  }

  ImageFactory.prototype.build = function build(info) {
    var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var widthTexels = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 210;
    var heightTexels = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 297;
    var color = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0xFFFFFF;
    var injector = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

    var image = void 0;
    switch (info.type) {
      case 'html':
        {
          image = new _InteractiveImage2.default(this.context, widthTexels, heightTexels, color, info.src, this.cache, injector);
          break;
        }
      case 'image':
        {
          image = new _StaticImage2.default(this.context, widthTexels, heightTexels, color, info.src);
          break;
        }
      case 'pdf':
        {
          image = new _PdfImage2.default(this.context, widthTexels, heightTexels, color, info.src, n);
          break;
        }
      case 'blank':
      default:
        {
          image = new _BlankImage2.default(this.context, widthTexels, heightTexels, color);
          break;
        }
    }
    return image;
  };

  return ImageFactory;
}();

exports.default = ImageFactory;

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _book = __webpack_require__(9);

var _BaseMathUtils = __webpack_require__(2);

var _BaseMathUtils2 = _interopRequireDefault(_BaseMathUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BookPropsBuilder = function () {
  function BookPropsBuilder(onReady) {
    _classCallCheck(this, BookPropsBuilder);

    this.onReady = onReady;
    this.defaults = (0, _book.props)();
  }

  BookPropsBuilder.prototype.dispose = function dispose() {};

  BookPropsBuilder.prototype.calcSize = function calcSize(width, height) {
    var scale = _BaseMathUtils2.default.calcScale(width, height, this.defaults.width, this.defaults.height);
    return {
      width: scale * width,
      height: scale * height
    };
  };

  BookPropsBuilder.prototype.calcTexels = function calcTexels(width, height) {
    var sheet = this.defaults.sheet,
        scale = _BaseMathUtils2.default.calcScale(width, height, sheet.widthTexels, sheet.heightTexels);
    return {
      widthTexels: scale * width,
      heightTexels: scale * height
    };
  };

  BookPropsBuilder.prototype.calcProps = function calcProps(width, height) {
    this.props = _extends({}, this.defaults, this.calcSize(width, height), {
      sheet: _extends({}, this.defaults.sheet, this.calcTexels(width, height)),
      cover: _extends({}, this.defaults.cover),
      page: _extends({}, this.defaults.page)
    });
  };

  BookPropsBuilder.prototype.calcSheets = function calcSheets(pages) {
    return this.sheets = Math.ceil(Math.max(0, pages - 4) / 2);
  };

  BookPropsBuilder.prototype.getSheets = function getSheets() {
    return this.sheets;
  };

  BookPropsBuilder.prototype.getProps = function getProps() {
    return this.props;
  };

  BookPropsBuilder.prototype.getPageCallback = function getPageCallback() {
    return this.binds.pageCallback;
  };

  BookPropsBuilder.prototype.ready = function ready() {
    if (this.onReady) {
      this.onReady(this.getProps(), this.getSheets(), this.getPageCallback());
    }
  };

  return BookPropsBuilder;
}();

exports.default = BookPropsBuilder;

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(1);

var _sheetBlock = __webpack_require__(40);

var _sheetBlock2 = _interopRequireDefault(_sheetBlock);

var _MathUtils = __webpack_require__(3);

var _MathUtils2 = _interopRequireDefault(_MathUtils);

var _ThreeUtils = __webpack_require__(18);

var _ThreeUtils2 = _interopRequireDefault(_ThreeUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// import ThreeMarkup from './ThreeMarkup';

var SheetBlock = function () {
  function SheetBlock(visual, p, first, last) {
    var angle = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

    var _this = this;

    var state = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'closed';
    var height = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;

    _classCallCheck(this, SheetBlock);

    this.visual = visual;
    this.p = _extends({}, p, {
      first: first,
      last: last
    });
    var props = this.getProps();

    var loadedPoints = this.loadPoints();
    Object.keys(loadedPoints).map(function (k) {
      _this[k] = loadedPoints[k][props.shape] || loadedPoints[k][0];
    });

    this.pSpline = new _libs.THREE.Spline([]);
    for (var i = 0; i < this.interpolationPoints.x[0].length; ++i) {
      this.pSpline.points.push(new _libs.THREE.Vector3());
    }

    this.iSpline = new _libs.THREE.Spline([]);
    for (var _i = 0; _i < _sheetBlock2.default.resX; ++_i) {
      this.iSpline.points.push(new _libs.THREE.Vector3());
    }

    this.aSplines = [];

    //this.three = new THREE.Object3D();

    this.geometry = _sheetBlock2.default.geometry.clone();

    this.p.sideFaces = [{
      first: 0,
      last: _sheetBlock2.default.faces[0]
    }, {
      first: _sheetBlock2.default.faces[0],
      last: _sheetBlock2.default.faces[1]
    }];

    this.sideTexture = new _libs.THREE.Texture();
    this.sideTexture.wrapT = _libs.THREE.RepeatWrapping;
    this.sideTexture.repeat.set(0, last - first);
    this.sideTexture.image = props.sideTexture;
    this.sideTexture.needsUpdate = true;

    this.materials = [new _libs.THREE.MeshPhongMaterial(), new _libs.THREE.MeshPhongMaterial(), new _libs.THREE.MeshPhongMaterial({ map: this.sideTexture }), new _libs.THREE.MeshPhongMaterial({ map: this.sideTexture }), new _libs.THREE.MeshPhongMaterial({ map: this.sideTexture }), new _libs.THREE.MeshPhongMaterial({ map: this.sideTexture })];

    this.p.setTexture(this.materials[0], 2 * first);
    this.p.setTexture(this.materials[1], 2 * last - 1);

    this.mesh = new _libs.THREE.Mesh(this.geometry, new _libs.THREE.MeshFaceMaterial(this.materials));
    this.mesh.castShadow = false;
    this.mesh.receiveShadow = false;
    // this.mesh.frustumCulled = true;

    //this.three.add(this.mesh);
    this.three = this.mesh;
    this.three.userData.self = this;

    this.markers = [];
    if (this.p.marker.use) {
      var l = this.geometry.vertices.length;
      var is = void 0;
      // is = [0, sheetBlock.resX-1, (sheetBlock.resZ-1)*sheetBlock.resX, sheetBlock.resZ*sheetBlock.resX-1];
      is = Array.apply(0, Array(l)).map(function (_, i) {
        return i;
      });

      for (var _iterator = is, _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
          if (_i2 >= _iterator.length) break;
          _ref = _iterator[_i2++];
        } else {
          _i2 = _iterator.next();
          if (_i2.done) break;
          _ref = _i2.value;
        }

        var _i3 = _ref;

        var marker = _ThreeUtils2.default.createMarker(this.geometry.vertices[_i3], _i3 < l / 2 ? 0xFF0000 : 0x00FF00, this.p.marker.size);
        this.markers.push({
          marker: marker,
          vertex: _i3
        });
        this.three.add(marker);
      }
    }

    this.corner = {
      use: true,
      height: 0,
      maxDistance: 0,
      points: [],
      OZ: new _libs.THREE.Vector3(0, 0, 1),
      axis: new _libs.THREE.Vector3()
    };
    this.set(0, 'closed', height, first, last); // calculate corner points

    this.set(angle, state, height, first, last); // init position

    // if(!SheetBlock.markup) {
    //   SheetBlock.markup=true;
    //   this.markup = new ThreeMarkup(this, 0, [{
    //     x: 0,
    //     y: 0,
    //   }, {
    //     x: 0.5,
    //     y: 1
    //   }, {
    //     x: 1,
    //     y: 0
    //   }].map((p)=>new THREE.Vector2(p.x, p.y)), {});
    // }
  }

  SheetBlock.prototype.dispose = function dispose() {
    for (var _iterator2 = this.materials, _isArray2 = Array.isArray(_iterator2), _i4 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray2) {
        if (_i4 >= _iterator2.length) break;
        _ref2 = _iterator2[_i4++];
      } else {
        _i4 = _iterator2.next();
        if (_i4.done) break;
        _ref2 = _i4.value;
      }

      var m = _ref2;

      if (m.map) {
        m.map = null;
        m.needsUpdate = true;
      }
      m.dispose();
    }
    delete this.materials;
    this.geometry.dispose();
  };

  SheetBlock.prototype.getSize = function getSize() {
    return this.p.last - this.p.first;
  };

  SheetBlock.prototype.getProps = function getProps() {
    return _extends({}, this.p.page, {
      sheets: this.p.sheets
    });
  };

  SheetBlock.prototype.getTopCerners = function getTopCerners() {
    var off = this.angle > Math.PI / 2 ? this.geometry.vertices.length / 2 : 0;
    return [this.geometry.vertices[off], this.geometry.vertices[_sheetBlock2.default.resX - 1 + off], this.geometry.vertices[(_sheetBlock2.default.resZ - 1) * _sheetBlock2.default.resX + off], this.geometry.vertices[_sheetBlock2.default.resZ * _sheetBlock2.default.resX - 1 + off]];
  };

  SheetBlock.prototype.getTopSize = function getTopSize() {
    // const l=this.geometry.vertices.length, off = this.angle>Math.PI/2? l/2: 0,
    //   v0 = this.geometry.vertices[off], v1 = this.geometry.vertices[sheetBlock.resZ*sheetBlock.resX-1+off];
    // // is = [0, sheetBlock.resX-1, (sheetBlock.resZ-1)*sheetBlock.resX, sheetBlock.resZ*sheetBlock.resX-1];
    // return {
    //   width: Math.abs(v1.x-v0.x),
    //   height: Math.abs(v1.z-v0.z)
    // };
    var vs = this.getTopCerners();
    return {
      width: vs[0].distanceTo(vs[1]),
      height: vs[0].distanceTo(vs[2])
    };
  };

  SheetBlock.prototype.getTopWorldRotation = function getTopWorldRotation(q) {
    q.x = -Math.PI / 2;
    return q;
  };

  SheetBlock.prototype.getTopWorldPosition = function getTopWorldPosition(v) {
    var l = this.geometry.vertices.length,
        off = this.angle > Math.PI / 2 ? l / 2 : 0,
        vs = [this.geometry.vertices[off], this.geometry.vertices[_sheetBlock2.default.resX - 1 + off], this.geometry.vertices[(_sheetBlock2.default.resZ - 1) * _sheetBlock2.default.resX + off], this.geometry.vertices[_sheetBlock2.default.resZ * _sheetBlock2.default.resX - 1 + off]];
    v.set(0, 0, 0);
    for (var _iterator3 = vs, _isArray3 = Array.isArray(_iterator3), _i5 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
      var _ref3;

      if (_isArray3) {
        if (_i5 >= _iterator3.length) break;
        _ref3 = _iterator3[_i5++];
      } else {
        _i5 = _iterator3.next();
        if (_i5.done) break;
        _ref3 = _i5.value;
      }

      var vi = _ref3;

      v.x += 0.25 * vi.x;
      v.y += 0.25 * vi.y;
      v.z += 0.25 * vi.z;
    }
    this.three.localToWorld(v);
    return v;
  };

  SheetBlock.prototype.getInterpolationPoints = function getInterpolationPoints(inds, mod) {
    var ps = { x: [], y: [] },
        K = this.getProps().wave;
    for (var _iterator4 = inds, _isArray4 = Array.isArray(_iterator4), _i6 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
      var _ref4;

      if (_isArray4) {
        if (_i6 >= _iterator4.length) break;
        _ref4 = _iterator4[_i6++];
      } else {
        _i6 = _iterator4.next();
        if (_i6.done) break;
        _ref4 = _i6.value;
      }

      var i = _ref4;

      ps.x.push([].concat(this.interpolationPoints.x[i]));
      ps.y.push(~mod.indexOf(i) ? this.interpolationPoints.y[i].map(function (n) {
        return K * n;
      }) : [].concat(this.interpolationPoints.y[i]));
    }
    return ps;
  };

  SheetBlock.prototype.set = function set(angle) {
    var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;
    var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.corner.height;
    var first = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.p.first;
    var last = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.p.last;

    var PI = Math.PI;
    this.state = state;
    var closedAngle = void 0,
        binderTurn = void 0;
    if ((typeof angle === 'undefined' ? 'undefined' : _typeof(angle)) === 'object') {
      this.angle = angle.openedAngle;
      closedAngle = angle.closedAngle;
      binderTurn = angle.binderTurn > PI / 2 ? PI - angle.binderTurn : angle.binderTurn;
    } else {
      this.angle = angle;
    }
    this.corner.height = height;
    if (this.p.first !== first || this.p.last !== last) {
      this.sideTexture.repeat.set(0, last - first);
      this.sideTexture.needsUpdate = true;
      if (this.p.first !== first) {
        this.p.setTexture(this.materials[0], 2 * first);
      }
      if (this.p.last !== last) {
        this.p.setTexture(this.materials[1], 2 * last - 1);
      }
    }
    this.p.first = first;
    this.p.last = last;
    var points = void 0;
    var props = this.getProps();
    if (this.state === 'closed') {
      points = this.getInterpolationPoints(this.closedInterpolationIndeces, this.closedInterpolationIndeces);
    } else if (this.state === 'opened') {
      if (closedAngle !== undefined && Math.abs(closedAngle - PI / 2) > 1e-2) {
        points = this.getInterpolationPoints(this.flatInterpolationIndeces, []);
        var ps = this.getPointsAtAngle(this.getInterpolationPoints(this.closedInterpolationIndeces, this.closedInterpolationIndeces), closedAngle > PI / 2 ? PI - closedAngle : closedAngle);
        points.x = [ps.x].concat(points.x);
        points.y = [ps.y].concat(points.y);
        // console.log(ps);
      } else {
        points = this.getInterpolationPoints(this.openedInterpolationIndeces, this.closedInterpolationIndeces);
      }
    }
    var hl = void 0,
        hr = void 0,
        offset = 0.5 * props.sheets * props.depth;
    if (this.state === 'closed') {
      offset -= 7e-6 * this.p.scale;
    }
    if (this.angle <= PI / 2) {
      hl = (props.sheets - first) * props.depth;
      hr = (props.sheets - last) * props.depth;
    } else {
      hl = first * props.depth;
      hr = last * props.depth;
    }

    var inAngle = this.angle > PI / 2 ? PI - this.angle : this.angle,
        hAngle = this.state === 'closed' ? inAngle : binderTurn === undefined ? PI / 2 : binderTurn;

    var _getPointsAtAngleAndH = this.getPointsAtAngleAndHs(points, inAngle, hAngle, [hl / props.width, hr / props.width]),
        left = _getPointsAtAngleAndH[0],
        right = _getPointsAtAngleAndH[1];

    if (this.angle > PI / 2) {
      this.inverse(left);
      this.inverse(right);
      offset = -offset;
    }
    this.setPoints(left, right, offset);
  };

  SheetBlock.prototype.setPoints = function setPoints(left, right, offset) {
    var _this2 = this;

    var p = this.getProps();
    var i = 0;

    var ys = [right, left];
    for (var y = 0; y < _sheetBlock2.default.resY; ++y) {
      for (var z = 0; z < _sheetBlock2.default.resZ; ++z) {
        for (var x = 0; x < _sheetBlock2.default.resX; ++x) {
          this.geometry.vertices[i++].set(ys[y].x[x] * p.width + offset, ys[y].y[x] * p.width, z * p.height / (_sheetBlock2.default.resZ - 1) - 0.5 * p.height);
        }
      }
    }
    if (i !== this.geometry.vertices.length) {
      console.warn('setPoints: bad mapping!');
    }

    if (this.corner.use && !this.corner.points.length) {
      var plane = new _libs.THREE.Plane(),
          normal = plane.normal,
          planeOffset = (1 - this.getProps().flexibleCorner) * Math.min(p.width, p.height),
          proj = new _libs.THREE.Vector3();
      plane.setFromNormalAndCoplanarPoint(new _libs.THREE.Vector3(-1, 0, -1).normalize(), new _libs.THREE.Vector3(planeOffset + offset, 0, 0.5 * p.height));
      for (var _i7 = 0, l = this.geometry.vertices.length; _i7 < l; ++_i7) {
        plane.projectPoint(this.geometry.vertices[_i7], proj);
        proj.sub(this.geometry.vertices[_i7]);
        if (proj.x * normal.x + proj.y * normal.y + proj.z * normal.z > 0) {
          var d = proj.length() / planeOffset;
          this.corner.maxDistance = Math.max(this.corner.maxDistance, d);
          this.corner.points.push({ vertex: _i7, distance: d });
        }
      }
    }

    if (this.corner.use && Math.abs(this.corner.height) > 1e-3) {
      var d2Angle = function d2Angle(d) {
        return p.cornerDeviation * _this2.corner.height / (1 + Math.exp(-p.bending * (d - 0.5 * _this2.corner.maxDistance)));
      };
      this.corner.axis.set(-1, 0, 1).normalize();
      this.corner.axis.applyAxisAngle(this.corner.OZ, this.angle);
      for (var _iterator5 = this.corner.points, _isArray5 = Array.isArray(_iterator5), _i8 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
        var _ref5;

        if (_isArray5) {
          if (_i8 >= _iterator5.length) break;
          _ref5 = _iterator5[_i8++];
        } else {
          _i8 = _iterator5.next();
          if (_i8.done) break;
          _ref5 = _i8.value;
        }

        var point = _ref5;

        this.geometry.vertices[point.vertex].applyAxisAngle(this.corner.axis, d2Angle(point.distance));
      }
    }

    for (var _iterator6 = this.markers, _isArray6 = Array.isArray(_iterator6), _i9 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
      var _ref6;

      if (_isArray6) {
        if (_i9 >= _iterator6.length) break;
        _ref6 = _iterator6[_i9++];
      } else {
        _i9 = _iterator6.next();
        if (_i9.done) break;
        _ref6 = _i9.value;
      }

      var m = _ref6;

      m.marker.position.copy(this.geometry.vertices[m.vertex]);
    }

    this.geometry.computeVertexNormals();
    //this.geometry.computeFaceNormals();
    this.geometry.computeBoundingSphere();
    //this.geometry.computeBoundingBox();
    this.geometry.verticesNeedUpdate = true;

    if (this.markup) {
      this.markup.computeVertices();
    }
  };

  SheetBlock.prototype.inverse = function inverse(ps) {
    for (var i = 0; i < ps.x.length; ++i) {
      ps.x[i] = -ps.x[i];
    }
    return ps;
  };

  SheetBlock.prototype.getPointsAtHs = function getPointsAtHs(ps, angle, hs) {
    var _this3 = this;

    var N = 1000;
    _MathUtils2.default.setSplinePoints(this.pSpline, ps);
    var bl = _MathUtils2.default.splitSpline(this.pSpline, N),
        r = [];
    {
      var p1 = _extends({}, this.pSpline.getPoint((N - 1) / N)),
          p2 = _extends({}, this.pSpline.getPoint(1)),
          dp = { x: p2.x - p1.x, y: p2.y - p1.y },
          ln = Math.sqrt(dp.x * dp.x + dp.y * dp.y),
          sp = this.pSpline.points[this.pSpline.points.length - 1];
      sp.set(sp.x + 0.1 * dp.x / ln, sp.y + 0.1 * dp.y / ln, 0);
      bl = _MathUtils2.default.splitSpline(this.pSpline, N);
    }
    bl.ls.push(1e7);
    _MathUtils2.default.mapl2L(bl.ls, bl.len, _sheetBlock2.default.resX, function (i) {
      for (var j = 0; j < hs.length; ++j) {
        if (!i) {
          r[j] = { x: [-hs[j] * Math.sin(angle)], y: [hs[j] * Math.cos(angle)] };
        } else {
          var p0 = _extends({}, _this3.pSpline.getPoint((i - 1) / N)),
              _p = _this3.pSpline.getPoint(i / N),
              x = -(_p.y - p0.y),
              y = _p.x - p0.x,
              l = Math.sqrt(x * x + y * y);
          r[j].x.push(_p.x + x / l * hs[j]);
          r[j].y.push(_p.y + y / l * hs[j]);
        }
      }
    });

    var nps = [];

    var _loop = function _loop(j) {
      nps[j] = { x: [], y: [] };
      _MathUtils2.default.setSplinePoints(_this3.iSpline, r[j]);
      var l = _MathUtils2.default.splitSpline(_this3.iSpline, N);
      l.ls.push(1e7);
      _MathUtils2.default.mapl2L(l.ls, 1, _sheetBlock2.default.resX, function (i) {
        var p = _this3.iSpline.getPoint(i / N);
        nps[j].x.push(p.x);
        nps[j].y.push(p.y);
      });
    };

    for (var j = 0; j < hs.length; ++j) {
      _loop(j);
    }
    return nps;
  };

  SheetBlock.prototype.getPointsAtAngleAndHs = function getPointsAtAngleAndHs(points, angle, hAngle, hs) {
    var ps = this.getPointsAtAngle(points, angle);
    return this.getPointsAtHs(ps, hAngle, hs);
  };

  SheetBlock.prototype.getPointsAtAngle = function getPointsAtAngle(points, angle) {
    var ps = { x: [], y: [] },
        angles = [];
    angle /= Math.PI / 2;
    for (var j = 0; j < points.x.length; ++j) {
      angles.push(j / (points.x.length - 1));
    }
    for (var i = 0; i < points.x[0].length; ++i) {
      var xps = [],
          yps = [];
      for (var _j = 0; _j < points.x.length; ++_j) {
        xps.push(points.x[_j][i]);
        yps.push(points.y[_j][i]);
      }
      ps.x.push(this.interpolate(angles, xps, angle));
      ps.y.push(this.interpolate(angles, yps, angle));
    }
    return ps;
  };

  SheetBlock.prototype.interpolate = function interpolate(x, y, xi) {
    if (!this.aSplines[x.length]) {
      this.aSplines[x.length] = new _libs.THREE.Spline([]);
      var ps = this.aSplines[x.length].points;
      for (var i = 0; i < x.length; ++i) {
        ps.push(new _libs.THREE.Vector3());
      }
    }
    var spline = this.aSplines[x.length];
    for (var _i10 = 0; _i10 < x.length; ++_i10) {
      spline.points[_i10].set(x[_i10], y[_i10], 0);
    }
    return spline.getPoint(Math.min(1, Math.max(xi, 0))).y;
  };

  SheetBlock.prototype.loadPoints = function loadPoints() {
    var x = [],
        y = [];
    var _arr = [0, 0.2877, 0.6347, 0.8174, 1.0000];
    for (var _i11 = 0; _i11 < _arr.length; _i11++) {
      var r = _arr[_i11];
      x.push(r * Math.cos(0.9 * Math.PI / 4));
      y.push(r * Math.sin(0.9 * Math.PI / 4));
    }

    var openedInterpolationIndeces = [[2, 3, 4], [2, 3, 4, 5, 6]],
        closedInterpolationIndeces = [[0, 1, 2], [0, 1, 2]],
        flatInterpolationIndeces = [[5, 4], [7, 6]],
        interpolationPoints = [{
      x: [[0, 0.2877, 0.6347, 0.8174, 1.0000], [0.000, 0.286, 0.632, 0.815, 0.997], [0.000, 0.279, 0.623, 0.806, 0.988], [0.000, 0.126, 0.411, 0.593, 0.774], [0, 0, 0, 0, 0], x],
      y: [[0, 0, 0, 0, 0], [0.000, 0.030, 0.010, 0.002, 0.000], [0.000, 0.060, 0.017, 0.004, 0.000], [0.000, 0.259, 0.440, 0.446, 0.429], [0, 0.2877, 0.6347, 0.8174, 1.0000], y]
    }, {
      x: [[0, 0.2877, 0.6347, 0.8174, 1.0000], [0.000, 0.286, 0.632, 0.815, 0.997], [0.000, 0.279, 0.623, 0.806, 0.988], [0.000, 0.233, 0.563, 0.746, 0.927], [0.000, 0.144, 0.433, 0.613, 0.796], [0.000, 0.070, 0.288, 0.455, 0.626], [0, 0, 0, 0, 0], x],
      y: [[0, 0, 0, 0, 0], [0.000, 0.030, 0.010, 0.002, 0.000], [0.000, 0.060, 0.017, 0.004, 0.000], [0.000, 0.168, 0.269, 0.270, 0.255], [0.000, 0.245, 0.435, 0.458, 0.460], [0.000, 0.278, 0.544, 0.614, 0.673], [0, 0.2877, 0.6347, 0.8174, 1.0000], y]
    }];

    return {
      interpolationPoints: interpolationPoints,
      openedInterpolationIndeces: openedInterpolationIndeces,
      closedInterpolationIndeces: closedInterpolationIndeces,
      flatInterpolationIndeces: flatInterpolationIndeces
    };
  };

  return SheetBlock;
}();

exports.default = SheetBlock;

/***/ },
/* 9 */
/***/ function(module, exports) {

"use strict";
'use strict';

exports.__esModule = true;
exports.props = props;
function props() {
  // const props = {
  //   height,
  //   width,
  //   gravity,
  //   injector,
  //   cachedPages,
  //   renderInactivePages,
  //   renderWhileFlipping,
  //   pagesForPredicting,
  //   preloadPages,
  //   sheet: {
  //     startVelocity,
  //     cornerDeviation,
  //     flexibility,
  //     flexibleCorner,
  //     bending,
  //     wave,
  //     shape,
  //     widthTexels,
  //     heightTexels,
  //     color,
  //     sideTexture
  //   },
  //   cover: {
  //     ...sheet,
  //     padding,
  //     binderTexture,
  //     depth,
  //     mass
  //   },
  //   page: {
  //     ...sheet,
  //     depth,
  //     mass
  //   }
  // };

  return {
    height: 0.297,
    width: 0.21,
    gravity: 1,
    cachedPages: 50,
    renderInactivePages: true,
    renderWhileFlipping: false,
    pagesForPredicting: 5,
    preloadPages: 5,
    sheet: {
      startVelocity: 0.8,
      cornerDeviation: 0.25,
      flexibility: 10,
      flexibleCorner: 0.5,
      bending: 11,
      wave: 0.5,
      shape: 0,
      widthTexels: 5 * 210,
      heightTexels: 5 * 297,
      color: 0xFFFFFF
    },
    cover: {
      binderTexture: '',
      depth: 0.0003,
      padding: 0,
      mass: 0.003
    },
    page: {
      depth: 0.0001,
      mass: 0.001
    }
  };
};

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;
exports.CSS3DSprite = exports.CSS3DObject = undefined;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

_libs.THREE.CSS3DObject = function (_THREE$Object3D) {
  _inherits(CSS3DObject, _THREE$Object3D);

  function CSS3DObject() {
    var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

    _classCallCheck(this, CSS3DObject);

    var _this = _possibleConstructorReturn(this, _THREE$Object3D.call(this));

    if (element) {
      _this.set(element);
    }
    return _this;
  }

  CSS3DObject.prototype.set = function set(element) {
    this.element = element;
    this.element.style.position = 'absolute';

    this.addEventListener('removed', function () {
      if (this.element.parentNode !== null) {
        this.element.parentNode.removeChild(this.element);
      }
    });
  };

  return CSS3DObject;
}(_libs.THREE.Object3D);

_libs.THREE.CSS3DSprite = function (_THREE$CSS3DObject) {
  _inherits(CSS3DSprite, _THREE$CSS3DObject);

  function CSS3DSprite(element) {
    _classCallCheck(this, CSS3DSprite);

    return _possibleConstructorReturn(this, _THREE$CSS3DObject.call(this, element));
  }

  return CSS3DSprite;
}(_libs.THREE.CSS3DObject);

_libs.THREE.CSS3DRenderer = function CSS3DRenderer() {
  _classCallCheck(this, CSS3DRenderer);

  var _width, _height;
  var _widthHalf, _heightHalf;

  var matrix = new _libs.THREE.Matrix4();

  var cache = {
    camera: { fov: 0, style: '' },
    objects: {}
  };

  var domElement = document.createElement('div');
  domElement.style.overflow = 'hidden';

  this.domElement = domElement;

  var cameraElement = document.createElement('div');

  cameraElement.style.WebkitTransformStyle = 'preserve-3d';
  cameraElement.style.MozTransformStyle = 'preserve-3d';
  cameraElement.style.transformStyle = 'preserve-3d';

  domElement.appendChild(cameraElement);

  var isIE = /Trident/i.test(navigator.userAgent);

  this.setClearColor = function () {};

  this.getSize = function () {

    return {
      width: _width,
      height: _height
    };
  };

  this.setSize = function (width, height) {

    _width = width;
    _height = height;
    _widthHalf = _width / 2;
    _heightHalf = _height / 2;

    domElement.style.width = width + 'px';
    domElement.style.height = height + 'px';

    cameraElement.style.width = width + 'px';
    cameraElement.style.height = height + 'px';
  };

  function epsilon(value) {

    return Math.abs(value) < 1e-10 ? 0 : value;
  }

  function getCameraCSSMatrix(matrix) {

    var elements = matrix.elements;

    return 'matrix3d(' + epsilon(elements[0]) + ',' + epsilon(-elements[1]) + ',' + epsilon(elements[2]) + ',' + epsilon(elements[3]) + ',' + epsilon(elements[4]) + ',' + epsilon(-elements[5]) + ',' + epsilon(elements[6]) + ',' + epsilon(elements[7]) + ',' + epsilon(elements[8]) + ',' + epsilon(-elements[9]) + ',' + epsilon(elements[10]) + ',' + epsilon(elements[11]) + ',' + epsilon(elements[12]) + ',' + epsilon(-elements[13]) + ',' + epsilon(elements[14]) + ',' + epsilon(elements[15]) + ')';
  }

  function getObjectCSSMatrix(matrix, cameraCSSMatrix) {

    var elements = matrix.elements;
    var matrix3d = 'matrix3d(' + epsilon(elements[0]) + ',' + epsilon(elements[1]) + ',' + epsilon(elements[2]) + ',' + epsilon(elements[3]) + ',' + epsilon(-elements[4]) + ',' + epsilon(-elements[5]) + ',' + epsilon(-elements[6]) + ',' + epsilon(-elements[7]) + ',' + epsilon(elements[8]) + ',' + epsilon(elements[9]) + ',' + epsilon(elements[10]) + ',' + epsilon(elements[11]) + ',' + epsilon(elements[12]) + ',' + epsilon(elements[13]) + ',' + epsilon(elements[14]) + ',' + epsilon(elements[15]) + ')';

    if (isIE) {

      return 'translate(-50%,-50%)' + 'translate(' + _widthHalf + 'px,' + _heightHalf + 'px)' + cameraCSSMatrix + matrix3d;
    }

    return 'translate(-50%,-50%)' + matrix3d;
  }

  function renderObject(object, camera, cameraCSSMatrix) {

    if (object instanceof _libs.THREE.CSS3DObject) {

      var style;

      if (object instanceof _libs.THREE.CSS3DSprite) {
        matrix.copy(camera.matrixWorldInverse);
        matrix.transpose();
        matrix.copyPosition(object.matrixWorld);
        matrix.scale(object.scale);

        matrix.elements[3] = 0;
        matrix.elements[7] = 0;
        matrix.elements[11] = 0;
        matrix.elements[15] = 1;

        style = getObjectCSSMatrix(matrix, cameraCSSMatrix);
      } else {

        style = getObjectCSSMatrix(object.matrixWorld, cameraCSSMatrix);
      }

      var element = object.element;
      var cachedStyle = cache.objects[object.id] && cache.objects[object.id].style;

      if (cachedStyle === undefined || cachedStyle !== style) {
        element.style.WebkitTransform = style;
        element.style.MozTransform = style;
        element.style.transform = style;

        cache.objects[object.id] = { style: style };
        if (isIE) {
          cache.objects[object.id].distanceToCameraSquared = getDistanceToSquared(camera, object);
        }
      }

      if (element.parentNode !== cameraElement) {
        cameraElement.appendChild(element);
      }
    }

    for (var i = 0, l = object.children.length; i < l; i++) {

      renderObject(object.children[i], camera, cameraCSSMatrix);
    }
  }

  var getDistanceToSquared = function () {

    var a = new _libs.THREE.Vector3();
    var b = new _libs.THREE.Vector3();

    return function (object1, object2) {

      a.setFromMatrixPosition(object1.matrixWorld);
      b.setFromMatrixPosition(object2.matrixWorld);

      return a.distanceToSquared(b);
    };
  }();

  function zOrder(scene) {

    var order = Object.keys(cache.objects).sort(function (a, b) {

      return cache.objects[a].distanceToCameraSquared - cache.objects[b].distanceToCameraSquared;
    });
    var zMax = order.length;

    scene.traverse(function (object) {

      var index = order.indexOf(object.id + '');

      if (index !== -1) {

        object.element.style.zIndex = zMax - index;
      }
    });
  }

  this.render = function (scene, camera) {

    var fov = camera.projectionMatrix.elements[5] * _heightHalf;

    if (cache.camera.fov !== fov) {

      domElement.style.WebkitPerspective = fov + 'px';
      domElement.style.MozPerspective = fov + 'px';
      domElement.style.perspective = fov + 'px';

      cache.camera.fov = fov;
    }

    scene.updateMatrixWorld();

    if (camera.parent === null) camera.updateMatrixWorld();

    var cameraCSSMatrix = 'translateZ(' + fov + 'px)' + getCameraCSSMatrix(camera.matrixWorldInverse);

    var style = cameraCSSMatrix + 'translate(' + _widthHalf + 'px,' + _heightHalf + 'px)';

    if (cache.camera.style !== style && !isIE) {

      cameraElement.style.WebkitTransform = style;
      cameraElement.style.MozTransform = style;
      cameraElement.style.transform = style;

      cache.camera.style = style;
    }

    renderObject(scene, camera, cameraCSSMatrix);

    if (isIE) {

      // IE10 and 11 does not support 'preserve-3d'.
      // Thus, z-order in 3D will not work.
      // We have to calc z-order manually and set CSS z-index for IE.
      // FYI: z-index can't handle object intersection
      zOrder(scene);
    }
  };
};

exports.default = _libs.THREE.CSS3DRenderer;


var _CSS3DObject = _libs.THREE.CSS3DObject,
    _CSS3DSprite = _libs.THREE.CSS3DSprite;
exports.CSS3DObject = _CSS3DObject;
exports.CSS3DSprite = _CSS3DSprite;

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _libs = __webpack_require__(0);

var _CSS3DRenderer = __webpack_require__(10);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CSSLayer = function (_CSS3DObject) {
  _inherits(CSSLayer, _CSS3DObject);

  CSSLayer.init = function init(doc) {
    var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 150;

    CSSLayer.delay = delay;
    CSSLayer.style = (0, _libs.$)('<style type=text/css>\n      .css-layer {\n    \t\topacity: 1;\n    \t\ttransition: opacity ' + delay + 'ms ease-out;\n        visibility: visible;\n        overflow: hidden;\n    \t}\n    \t.css-layer.hidden {\n    \t\ttransition: opacity ' + delay + 'ms ease-in, visibility ' + delay + 'ms step-end;\n    \t\topacity: 0;\n        visibility: hidden;\n      }\n    </style>').appendTo(doc.head);
  };

  CSSLayer.dispose = function dispose() {
    CSSLayer.style.remove();
  };

  function CSSLayer(width, height) {
    var widthPxs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1024;

    _classCallCheck(this, CSSLayer);

    var _this = _possibleConstructorReturn(this, _CSS3DObject.call(this));

    _this.jContainer = (0, _libs.$)('<div class="hidden css-layer"></div>');
    var heightPxs = height / width * widthPxs;
    _this.jContainer.width(widthPxs).height(heightPxs);
    _this.scale.x /= widthPxs / width;
    _this.scale.y /= widthPxs / width;

    _this.setData();
    _this.set(_this.jContainer[0]);
    return _this;
  }

  CSSLayer.prototype.callInternal = function callInternal(name) {
    if (this.object && this.object[name]) {
      try {
        this.object[name]();
      } catch (e) {
        console.error(e);
      }
    }
  };

  CSSLayer.prototype.dispose = function dispose() {
    this.clearInternals();
  };

  CSSLayer.prototype.clearInternals = function clearInternals() {
    this.callInternal('dispose');
    !this.css || this.css.remove();
    !this.html || this.html.remove();
  };

  CSSLayer.prototype.setData = function setData() {
    var css = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var html = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var js = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

    this.clearInternals();

    this.css = (0, _libs.$)('<style type="text/css">' + css + '</style>').appendTo(this.jContainer);
    this.html = (0, _libs.$)(html).appendTo(this.jContainer);
    var init = eval(js);
    if (init) {
      this.object = init(this.jContainer) || {};
    }
  };

  CSSLayer.prototype.pendedCall = function pendedCall(clb) {
    var _this2 = this;

    var timestamp = this.timestamp = Date.now();
    setTimeout(function () {
      if (timestamp === _this2.timestamp) {
        clb();
      }
    }, CSSLayer.delay);
  };

  CSSLayer.prototype.isHidden = function isHidden() {
    return this.jContainer.hasClass('hidden');
  };

  CSSLayer.prototype.hide = function hide() {
    var _this3 = this;

    var res = void 0;
    if (!this.isHidden()) {
      this.jContainer.addClass('hidden');
      this.callInternal('hide');
      res = new Promise(function (resolve) {
        _this3.pendedCall(function () {
          _this3.callInternal('hidden');
          resolve();
        });
      });
    } else {
      res = Promise.resolve();
    }
    return res;
  };

  CSSLayer.prototype.show = function show() {
    var _this4 = this;

    var res = void 0;
    if (this.isHidden()) {
      this.jContainer.removeClass('hidden');
      this.callInternal('show');
      res = new Promise(function (resolve) {
        _this4.pendedCall(function () {
          _this4.callInternal('shown');
          resolve();
        });
      });
    } else {
      res = Promise.resolve();
    }
    return res;
  };

  return CSSLayer;
}(_CSS3DRenderer.CSS3DObject);

exports.default = CSSLayer;

/***/ },
/* 12 */
/***/ function(module, exports) {

"use strict";
"use strict";

exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Cache = function () {
  function Cache() {
    var maxSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;
    var sizeof = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Cache.countSizeof;

    _classCallCheck(this, Cache);

    this.os = new Map();
    this.sizeof = sizeof;
    this.maxSize = maxSize;
    this.size = 0;
  }

  Cache.prototype.forEach = function forEach(clb) {
    this.os.forEach(function (v, k) {
      return clb([k, v]);
    });
  };

  Cache.countSizeof = function countSizeof(value) {
    return 1;
  };

  Cache.prototype.remove = function remove(k) {
    var res = false;
    var v = this.os.get(k);
    if (!v.locked || !v.locked(k)) {
      this.size -= this.sizeof(v);
      if (v.dispose) {
        v.dispose();
      }
      this.os.delete(k);
      res = true;
    }
    return res;
  };

  Cache.prototype.freeSpace = function freeSpace() {
    var arr = [];
    for (var _iterator = this.os, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var p = _ref;

      arr.push({ timestamp: p[1].timestamp, key: p[0] });
    }
    arr.sort(function (a, b) {
      return a.timestamp - b.timestamp;
    });
    for (var i = 0; i < arr.length && this.size > 3 * this.maxSize / 4; ++i) {
      this.remove(arr[i].key);
    }
  };

  Cache.prototype.dispose = function dispose() {
    var arr = [];
    for (var _iterator2 = this.os, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var p = _ref2;

      arr.push({ v: p[1], k: p[0] });
    }
    for (var _iterator3 = arr, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
      var _ref3;

      if (_isArray3) {
        if (_i3 >= _iterator3.length) break;
        _ref3 = _iterator3[_i3++];
      } else {
        _i3 = _iterator3.next();
        if (_i3.done) break;
        _ref3 = _i3.value;
      }

      var o = _ref3;

      if (o.v.dispose) {
        o.v.dispose();
      }
      this.os.delete(o.k);
    }
  };

  Cache.recursionSizeof = function recursionSizeof(value) {
    var size = 0;
    if (value) {
      ++size;
      var len = value.length;
      if (len === undefined) {
        for (var p in value) {
          if (value.hasOwnProperty(p)) {
            size += Cache.recursionSizeof(value[p]);
          }
        }
      } else {
        size += len;
      }
    }
    return size;
  };

  Cache.prototype.getTimestamp = function getTimestamp() {
    return Date.now();
  };

  Cache.prototype.get = function get(key) {
    var value = this.os.get(key);
    if (value) {
      value.timestamp = this.getTimestamp();
    }
    return value;
  };

  Cache.prototype.put = function put(key, value) {
    value.timestamp = this.getTimestamp();
    this.os.set(key, value);
    this.size += this.sizeof(value);
    if (this.size > this.maxSize) {
      this.freeSpace();
    }
    return value;
  };

  return Cache;
}();

exports.default = Cache;

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Controller = function (_THREE$EventDispatche) {
  _inherits(Controller, _THREE$EventDispatche);

  function Controller() {
    _classCallCheck(this, Controller);

    return _possibleConstructorReturn(this, _THREE$EventDispatche.apply(this, arguments));
  }

  Controller.prototype.handleDefault = function handleDefault(id, e, data) {
    //console.log(id+'-'+e.type+'-'+data);
  };

  Controller.prototype.dispatchAsync = function dispatchAsync(e) {
    var _this2 = this;

    Promise.resolve().then(function () {
      return _this2.dispatchEvent(e);
    });
  };

  Controller.prototype.dispose = function dispose() {};

  return Controller;
}(_libs.THREE.EventDispatcher);

exports.default = Controller;

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _EventConverter2 = __webpack_require__(15);

var _EventConverter3 = _interopRequireDefault(_EventConverter2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CustomEventConverter = function (_EventConverter) {
  _inherits(CustomEventConverter, _EventConverter);

  // custom
  // testIntersection(e, data);
  // custom.object
  // test(object);

  function CustomEventConverter(wnd, doc) {
    var customTest = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {
      return false;
    };
    var eDoc = arguments[3];

    _classCallCheck(this, CustomEventConverter);

    var _this = _possibleConstructorReturn(this, _EventConverter.call(this, wnd, doc));

    _this.eDoc = eDoc;
    _this.customTest = customTest;
    _this.customs = [];
    return _this;
  }

  CustomEventConverter.prototype.test = function test(object1, object2) {
    return object1 && object2 ? this.customTest(object1, object2) : false;
  };

  CustomEventConverter.prototype.getCallback = function getCallback(object) {
    return object.target.callback;
  };

  CustomEventConverter.prototype.addCustom = function addCustom(custom) {
    this.customs.push(custom);
  };

  CustomEventConverter.prototype.getObject = function getObject(e, data) {
    var object = void 0;
    if (data.doc === this.eDoc) {
      for (var _iterator = this.customs, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var custom = _ref;

        object = custom.testIntersection(e, data);
        if (object) {
          break;
        }
      }
    }
    return object;
  };

  return CustomEventConverter;
}(_EventConverter3.default);

exports.default = CustomEventConverter;

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EventConverter = function () {

  // virtuals
  // getObject(e, data);
  // getCallback(object);
  // test(object1, object1);

  function EventConverter(wnd, doc) {
    _classCallCheck(this, EventConverter);

    this.wnd = wnd;
    this.doc = doc;
    this.enabled = true;
  }

  EventConverter.prototype.setEnable = function setEnable(vl) {
    if (!vl) {
      if (this.capObject) {
        this.notify(this.capObject, _libs.$.Event('mouseup'), 'mouseup');
        this.capObject = undefined;
      }
      if (this.hovObject) {
        this.notify(this.hovObject, _libs.$.Event('mouseout'), 'mouseout');
        this.hovObject = undefined;
      }
    }
    this.enabled = vl;
  };

  EventConverter.prototype.getCallback = function getCallback(object) {
    return undefined;
  };

  EventConverter.prototype.notify = function notify(object, e, type) {
    var callback = this.getCallback(object);
    if (callback) {
      var props = _extends({}, e, {
        type: type,
        view: this.wnd
      });
      var jE = _libs.$.Event(type, props);
      jE.timeStamp = e.timeStamp;
      callback(jE, object);
    }
  };

  EventConverter.prototype.convert = function convert(e, data) {
    if (!this.enabled) return;

    var object = this.getObject(e, data);
    var notify = true;
    switch (e.type) {
      case 'mousedown':
        {
          if (this.capObject) {
            this.notify(this.capObject, e, 'mouseup');
          }
          this.capObject = object;
          break;
        }
      case 'mouseup':
        {
          if (this.capObject && this.capObject !== object) {
            this.notify(this.capObject, e, 'mouseup');
            notify = false;
          }
          this.timeStamp = e.timeStamp;
          break;
        }
      case 'click':
        {
          notify = this.test(this.capObject, object) && e.timeStamp === this.timeStamp;
          this.capObject = undefined;
          break;
        }
      case 'mouseenter':
      case 'mouseover':
      case 'mousemove':
        {
          if (!this.test(this.hovObject, object) && this.hovObject) {
            this.notify(this.hovObject, e, 'mouseout');
            this.hovObject = undefined;
          }
          if (!this.hovObject && object) {
            this.notify(object, e, 'mouseover');
            this.hovObject = object;
          }
          notify = e.type === 'mousemove';
          break;
        }
      case 'mouseleave':
      case 'mouseout':
        {
          if (this.hovObject) {
            this.notify(this.hovObject, e, 'mouseout');
            this.hovObject = undefined;
          }
          notify = false;
          break;
        }
    }
    if (notify && object) {
      this.notify(object, e, e.type);
    }
  };

  return EventConverter;
}();

exports.default = EventConverter;

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _Utils = __webpack_require__(61);

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Finder = function () {
  Finder.isDelimetr = function isDelimetr(s) {
    return s === Finder.DELIMITER;
  };

  Finder.prototype.merge = function merge() {
    var as = [],
        map = [],
        strs = this.strs;
    var p = 0;
    for (var i = 0; i < strs.length; ++i) {
      if (strs[i].length) {
        map.push({
          base: i,
          offset: p
        });
        as.push(strs[i]);
        p += strs[i].length;
        if (i < strs.length - 1 && !Finder.isDelimetr(strs[i].charAt(strs[i].length - 1)) && !Finder.isDelimetr(strs[i + 1].charAt(0))) {
          as.push(Finder.DELIMITER);
          ++p;
        }
      }
    }
    this.map = map;
    this.str = as.join('');
  };

  Finder.prototype.addHits = function addHits(p) {
    var info = this.map[_Utils2.default.lowerBound(this.map, { offset: p }, function (a, b) {
      return a.offset - b.offset;
    })];
    var chars = this.pattern.length,
        i = info.base;
    p -= info.offset;
    while (chars) {
      if (this.strs[i].length) {
        var delimeter = i < this.strs.length - 1 && !Finder.isDelimetr(this.strs[i].charAt(this.strs[i].length - 1)) && !Finder.isDelimetr(this.strs[i + 1].charAt(0)),
            length = Math.min(this.strs[i].length + (delimeter ? 1 : 0) - p, chars);
        if (p < this.strs[i].length) {
          this.hits.push({
            index: i,
            offset: p,
            length: Math.min(length, this.strs[i].length - p)
          });
        }
        chars -= length;
        ++i;
        p = 0;
      }
    }
  };

  Finder.prototype.addContext = function addContext(p) {
    var f = p,
        l = p + this.pattern.length - 1,
        dels = this.props.contextLength,
        prevDels = dels + 1;
    while (dels && prevDels - dels) {
      prevDels = dels;
      if (dels % 2) {
        for (var i = f - 2; i >= 0; --i) {
          if (Finder.isDelimetr(this.str[i]) || i === 0) {
            f = i === 0 ? 0 : i + 1;
            --dels;
            break;
          }
        }
      } else {
        for (var _i = l + 2; _i < this.str.length; ++_i) {
          if (Finder.isDelimetr(this.str[_i]) || _i === this.str.length - 1) {
            l = _i === this.str.length - 1 ? _i === this.str.length - 1 : _i - 1;
            --dels;
            break;
          }
        }
      }
    }
    this.contexts.push(this.str.substr(f, l - f + 1));
  };

  Finder.prototype.getHits = function getHits() {
    return this.hits;
  };

  Finder.prototype.getContexts = function getContexts() {
    return this.contexts;
  };

  function Finder(strs, pattern, props) {
    _classCallCheck(this, Finder);

    this.props = _extends({}, Finder.defaults, props);
    this.strs = strs;
    var data = this.merge(strs);
    this.hits = [];
    this.contexts = [];
    this.pattern = pattern.toLowerCase();
    this.lstr = this.str.toLowerCase();
    var p = 0;
    while (true) {
      p = this.lstr.indexOf(this.pattern, p);
      if (p === -1) {
        break;
      } else {
        this.addHits(p);
        this.addContext(p);
        p += this.pattern.length;
      }
    }
  }

  return Finder;
}();

Finder.DELIMITER = ' ';
Finder.defaults = {
  contextLength: 7,
  hits: true,
  contexts: true
};
exports.default = Finder;

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

_libs.PDFJS.workerSrc = (window.PDFJS_LOCALE ? PDFJS_LOCALE : {"pdfJsWorker":"js/pdf.worker.js"}).pdfJsWorker;

var Pdf = function () {
  Pdf.normalizeUrl = function normalizeUrl(url) {
    function split(s) {
      return s.replace(/\\/g, '/').split('/');
    }
    var base = split(window.location.href);
    url = split(url);
    if (base[2] === url[2]) {
      url[0] = base[0];
    }
    return url.join('/');
  };

  function Pdf(src, loadingProgress) {
    var _this = this;

    _classCallCheck(this, Pdf);

    this.src = Pdf.normalizeUrl(src);
    this.handlerQueue = [];
    this.progresData = { loaded: -1, total: 1 };
    this.loadingProgress = loadingProgress;

    _libs.PDFJS.getDocument(this.src, null, null, function (data) {
      if (_this.loadingProgress) {
        var cur = Math.floor(100 * data.loaded / data.total),
            old = Math.floor(100 * _this.progresData.loaded / _this.progresData.total);
        if (cur !== old) {
          cur = isNaN(cur) ? 0 : cur;
          cur = cur > 100 ? 100 : cur;
          _this.loadingProgress(cur);
        }
      }
      _this.progresData = data;
    }).then(function (handler) {
      _this.handler = handler;
      var done = Promise.resolve(handler);

      var _loop = function _loop() {
        if (_isArray) {
          if (_i >= _iterator.length) return 'break';
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) return 'break';
          _ref = _i.value;
        }

        var clb = _ref;

        done = done.then(function (handler) {
          clb(handler);
          return handler;
        });
      };

      for (var _iterator = _this.handlerQueue.reverse(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        var _ret = _loop();

        if (_ret === 'break') break;
      }
    });
  }

  Pdf.prototype.dispose = function dispose() {
    this.handlerQueue.splice(0, this.handlerQueue.length);
    delete this.handler;
  };

  Pdf.prototype.setLoadingProgressClb = function setLoadingProgressClb(clb) {
    this.loadingProgress = clb;
  };

  Pdf.prototype.getPagesNum = function getPagesNum() {
    return this.handler ? this.handler.numPages : undefined;
  };

  Pdf.getPageSize = function getPageSize(page) {
    return {
      width: page.view[2] - page.view[0],
      height: page.view[3] - page.view[1]
    };
  };

  Pdf.prototype.getHandler = function getHandler(clb) {
    if (this.handler) {
      clb(this.handler);
    } else {
      this.handlerQueue.push(clb);
    }
  };

  return Pdf;
}();

exports.default = Pdf;

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _BaseMathUtils = __webpack_require__(2);

var _BaseMathUtils2 = _interopRequireDefault(_BaseMathUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ThreeUtils = function () {
  function ThreeUtils() {
    _classCallCheck(this, ThreeUtils);
  }

  ThreeUtils.vertices2UVs = function vertices2UVs(vertices, indeces, first, last, converClb) {
    var r = [];
    for (var i = first; i < last; ++i) {
      var vis = [indeces[i].a, indeces[i].b, indeces[i].c];
      for (var j = 0; j < vis.length; ++j) {
        if (!r[vis[j]]) {
          r[vis[j]] = converClb(vertices[vis[j]]);
        }
      }
    }
    return r;
  };

  ThreeUtils.computeFaceVertexUvs = function computeFaceVertexUvs(geometry, faces) {
    var uvs = [ThreeUtils.vertices2UVs(geometry.vertices, geometry.faces, 0, faces[0], function (p) {
      return new THREE.Vector2(p.x, 1 - p.z);
    }), ThreeUtils.vertices2UVs(geometry.vertices, geometry.faces, faces[0], faces[1], function (p) {
      return new THREE.Vector2(1 - p.x, 1 - p.z);
    }), ThreeUtils.vertices2UVs(geometry.vertices, geometry.faces, faces[1], faces[2], function (p) {
      return new THREE.Vector2(p.x, p.y);
    }), ThreeUtils.vertices2UVs(geometry.vertices, geometry.faces, faces[2], faces[3], function (p) {
      return new THREE.Vector2(1 - p.x, p.y);
    }), ThreeUtils.vertices2UVs(geometry.vertices, geometry.faces, faces[3], faces[4], function (p) {
      return new THREE.Vector2(p.z, p.y);
    }), ThreeUtils.vertices2UVs(geometry.vertices, geometry.faces, faces[4], geometry.faces.length, function (p) {
      return new THREE.Vector2(1 - p.z, p.y);
    })];

    var uvsi = 0;
    for (var i = 0; i < geometry.faces.length; ++i) {
      uvsi += faces[uvsi] === i;
      var f = geometry.faces[i];
      f.materialIndex = uvsi;
      geometry.faceVertexUvs[0][i] = [uvs[uvsi][f.a], uvs[uvsi][f.b], uvs[uvsi][f.c]];
    }
  };

  ThreeUtils.createMarker = function createMarker(p, c, size) {
    var marker = new THREE.Mesh(new THREE.SphereGeometry(size), new THREE.MeshPhongMaterial({ color: c }));
    marker.position.set(p.x, p.y, p.z);
    return marker;
  };

  ThreeUtils.findUvTris = function findUvTris(geometry, ps, first, last) {
    var res = [];
    for (var _iterator = ps, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var p = _ref;

      var found = false;
      for (var i = first; i < last && !found; ++i) {
        var tri = geometry.faceVertexUvs[0][i];
        if (_BaseMathUtils2.default.isInsideConvPoly(tri, p)) {
          res.push({
            coefs: _BaseMathUtils2.default.computeInterpCoefs(tri, p),
            i: i
          });
          found = true;
        }
      }
      if (!found) {
        console.error('Bad point');
        res.push(undefined);
      }
    }
    return res;
  };

  ThreeUtils.findInternalVertices = function findInternalVertices(geometry, ps, first, last) {
    var res = {};
    for (var i = first; i < last; ++i) {
      var tri = geometry.faceVertexUvs[0][i],
          f = geometry.faces[i],
          vs = [f.a, f.b, f.c];
      for (var j = 0; j < tri.length; ++j) {
        if (res[vs[j]] === undefined && _BaseMathUtils2.default.isInsidePoly(ps, tri[j])) {
          res[vs[j]] = {
            p: tri[j],
            i: vs[j],
            n: f.vertexNormals[j]
          };
        }
      }
    }
    return Object.values(res);
  };

  return ThreeUtils;
}();

exports.default = ThreeUtils;

/***/ },
/* 19 */
/***/ function(module, exports) {

"use strict";
"use strict";

exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Target = function () {
  function Target() {
    _classCallCheck(this, Target);
  }

  Target.test = function test(object1, object2) {
    return object1.target === object2.target;
  };

  return Target;
}();

exports.default = Target;

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(1);

var _Detector = __webpack_require__(44);

var _Detector2 = _interopRequireDefault(_Detector);

var _VisualWorld = __webpack_require__(63);

var _VisualWorld2 = _interopRequireDefault(_VisualWorld);

var _PdfLinksHandler = __webpack_require__(34);

var _PdfLinksHandler2 = _interopRequireDefault(_PdfLinksHandler);

var _Book = __webpack_require__(25);

var _Book2 = _interopRequireDefault(_Book);

var _BookView = __webpack_require__(28);

var _BookView2 = _interopRequireDefault(_BookView);

var _BookController = __webpack_require__(26);

var _BookController2 = _interopRequireDefault(_BookController);

var _PdfBookPropsBuilder = __webpack_require__(33);

var _PdfBookPropsBuilder2 = _interopRequireDefault(_PdfBookPropsBuilder);

var _ClbBookPropsBuilder = __webpack_require__(29);

var _ClbBookPropsBuilder2 = _interopRequireDefault(_ClbBookPropsBuilder);

var _LoadingController = __webpack_require__(51);

var _LoadingController2 = _interopRequireDefault(_LoadingController);

var _Search = __webpack_require__(56);

var _Search2 = _interopRequireDefault(_Search);

var _Bookmarks = __webpack_require__(43);

var _Bookmarks2 = _interopRequireDefault(_Bookmarks);

var _Thumbnails = __webpack_require__(60);

var _Thumbnails2 = _interopRequireDefault(_Thumbnails);

var _TocController = __webpack_require__(39);

var _TocController2 = _interopRequireDefault(_TocController);

var _BookPrinter = __webpack_require__(27);

var _BookPrinter2 = _interopRequireDefault(_BookPrinter);

var _AutoNavigator = __webpack_require__(23);

var _AutoNavigator2 = _interopRequireDefault(_AutoNavigator);

var _SoundsEnviroment = __webpack_require__(38);

var _SoundsEnviroment2 = _interopRequireDefault(_SoundsEnviroment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_libs.$.fn.FlipBook = function (options) {
  var scene = {
    dispose: function dispose() {
      if (this.ready) {
        !scene.pdfLinksHandler || scene.pdfLinksHandler.dispose();
        delete scene.pdfLinksHandler;
        scene.sounds.dispose();
        delete scene.sounds;
        scene.tocCtrl.dispose();
        delete scene.tocCtrl;
        scene.thumbnails.dispose();
        delete scene.thumbnails;
        !scene.bookmarks || scene.bookmarks.dispose();
        delete scene.bookmarks;
        scene.ctrl.dispose();
        delete scene.ctrl;
        scene.bookPrinter.dispose();
        delete scene.bookPrinter;
        scene.book.dispose();
        delete scene.book;
        scene.propsBuilder.dispose();
        delete scene.propsBuilder;
        delete scene.bookBuilder;
        scene.visual.dispose();
        delete scene.visual;
        scene.view.dispose();
        delete scene.view;
        delete scene.dispose;
      } else {
        this.pendingDispose = true;
      }
    }
  };
  options = _extends({}, options);
  scene.view = new _BookView2.default(this.length ? this[0] : (0, _libs.$)('<div>').appendTo('body'), function () {
    if (!_Detector2.default.webgl) {
      _Detector2.default.addGetWebGLMessage({ parent: scene.view.getView() });
    } else {
      scene.loadingCtrl = new _LoadingController2.default(scene.view, true, function (progress) {
        return progress === 0 ? 'Please wait... the Application is Loading' : 'PDF is Loading: ' + progress + '%';
      });
      scene.visual = new _VisualWorld2.default(scene.view.getContainer().ownerDocument.defaultView, scene.view.getContainer().ownerDocument, scene.view.getView());
      scene.bookBuilder = function (props, sheets, pageCallback) {
        if (options.propertiesCallback) {
          props = options.propertiesCallback(props);
        }
        scene.book = new _Book2.default(scene.visual, sheets, pageCallback, props);
        scene.bookPrinter = new _BookPrinter2.default(scene.visual, scene.book, (options.template || {}).printStyle);
        scene.loadingCtrl.dispose();
        delete scene.loadingCtrl;
        scene.ctrl = new _BookController2.default(scene.book, scene.view, options.controlsProps);
        scene.book.setInjector(function (w) {
          w.jQuery = w.$ = _libs.$;
          w.book = scene.book;
          w.bookCtrl = scene.ctrl;
          if (props.injector) {
            props.injector(w);
          }
        });
        scene.view.addHandler(scene.ctrl);
        scene.ctrl.setPrinter(scene.bookPrinter);
        var test = pageCallback(0);

        scene.search = new _Search2.default(scene.view.getSearchView(), scene.book.getPages());
        scene.search.onQuery = scene.book.setQuery.bind(scene.book);
        scene.book.addEventListener('searchResults', function (e) {
          scene.search.setResults(e.results, e.lastPage);
        });

        scene.thumbnails = new _Thumbnails2.default(scene.visual, scene.view.getThumbnailsView(), pageCallback, 2 * (sheets + 2), { kWtoH: props.width / props.height });
        scene.tocCtrl = new _TocController2.default(scene.view, scene.ctrl);
        scene.tocCtrl.setThumbnails(scene.thumbnails);
        scene.tocCtrl.setSearch(scene.search);
        scene.ctrl.setTocCtrl(scene.tocCtrl);
        scene.view.addHandler(scene.tocCtrl);

        if (test.type === 'pdf') {
          scene.pdfLinksHandler = new _PdfLinksHandler2.default(test.src, scene.ctrl, scene.visual.element);
          scene.book.addEventListener('pdfAnnotation', scene.pdfLinksHandler.handleEvent.bind(scene.pdfLinksHandler));
          test.src.getHandler(function (handler) {
            handler.getOutline().then(function (outline) {
              scene.bookmarks = new _Bookmarks2.default(scene.view.getBookmarksView(), outline);
              scene.tocCtrl.setBookmarks(scene.bookmarks, test.src);
            });
          });
          if (options.pdfLinks && options.pdfLinks.handler) {
            scene.pdfLinksHandler.setHandler(options.pdfLinks.handler);
          }
        }

        scene.sounds = new _SoundsEnviroment2.default(options.template);
        scene.ctrl.setSounds(scene.sounds);
        scene.sounds.subscribeFlips(scene.ctrl);

        scene.ready = true;
        new _AutoNavigator2.default(scene.visual, scene.ctrl, options.autoNavigation).dispose();
        if (options.ready) {
          options.ready(scene);
        }
        if (scene.pendingDispose) {
          scene.dispose();
        }
      };
      if (options.pdf) {
        scene.propsBuilder = new _PdfBookPropsBuilder2.default(options.pdf, scene.bookBuilder);
        scene.propsBuilder.pdf.setLoadingProgressClb(scene.loadingCtrl.setProgress.bind(scene.loadingCtrl));
      } else if (options.pageCallback) {
        scene.propsBuilder = new _ClbBookPropsBuilder2.default(scene.visual, options.pageCallback, options.pages, scene.bookBuilder);
      } else {
        scene.propsBuilder = new _ClbBookPropsBuilder2.default(scene.visual, _Book2.default.pageCallback, 6, scene.bookBuilder);
      }
    }
  }, options.template);
  return scene;
};

(0, _libs.$)(function () {
  var containers = (0, _libs.$)('.flip-book-container');
  for (var i = 0; i < containers.length; ++i) {
    var jContainer = (0, _libs.$)(containers[i]),
        src = jContainer.attr('src');
    if (!!src) {
      jContainer.FlipBook({ pdf: src });
    }
  }
});

window.jQuery = window.$ = _libs.$;

/***/ },
/* 21 */
/***/ function(module, exports) {

"use strict";
'use strict';

if (!Array.prototype.fill) {
  Array.prototype.fill = function (value) {

    // Шаги 1-2.
    if (this == null) {
      throw new TypeError('this is null or not defined');
    }

    var O = Object(this);

    // Шаги 3-5.
    var len = O.length >>> 0;

    // Шаги 6-7.
    var start = arguments[1];
    var relativeStart = start >> 0;

    // Шаг 8.
    var k = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len);

    // Шаги 9-10.
    var end = arguments[2];
    var relativeEnd = end === undefined ? len : end >> 0;

    // Шаг 11.
    var final = relativeEnd < 0 ? Math.max(len + relativeEnd, 0) : Math.min(relativeEnd, len);

    // Шаг 12.
    while (k < final) {
      O[k] = value;
      k++;
    }

    // Шаг 13.
    return O;
  };
}

if (!Array.prototype.find) {
  Object.defineProperty(Array.prototype, 'find', {
    value: function value(predicate) {
      'use strict';

      if (this == null) {
        throw new TypeError('Array.prototype.find called on null or undefined');
      }
      if (typeof predicate !== 'function') {
        throw new TypeError('predicate must be a function');
      }
      var list = Object(this);
      var length = list.length >>> 0;
      var thisArg = arguments[1];
      var value;

      for (var i = 0; i < length; i++) {
        value = list[i];
        if (predicate.call(thisArg, value, i, list)) {
          return value;
        }
      }
      return undefined;
    }
  });
}

if (!Array.prototype.findIndex) {
  Array.prototype.findIndex = function (predicate) {
    if (this == null) {
      throw new TypeError('Array.prototype.findIndex called on null or undefined');
    }
    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }
    var list = Object(this);
    var length = list.length >>> 0;
    var thisArg = arguments[1];
    var value;

    for (var i = 0; i < length; i++) {
      value = list[i];
      if (predicate.call(thisArg, value, i, list)) {
        return i;
      }
    }
    return -1;
  };
}

if (!Object.values) {
  Object.values = function values(O) {
    return Object.keys(O).map(function (name) {
      return O[name];
    }) || [];
  };
}

/***/ },
/* 22 */
/***/ function(module, exports) {

"use strict";
'use strict';

exports.__esModule = true;
/** @namespace */
var THREEx = THREEx || {};
THREEx.FullScreen = THREEx.FullScreen || {};

exports.default = THREEx.FullScreen;

/**
 * test if it is possible to have fullscreen
 *
 * @returns {Boolean} true if fullscreen API is available, false otherwise
*/

THREEx.FullScreen.available = function () {
	return this._hasWebkitFullScreen || this._hasMozFullScreen;
};

/**
 * test if fullscreen is currently activated
 *
 * @returns {Boolean} true if fullscreen is currently activated, false otherwise
*/
THREEx.FullScreen.activated = function () {
	if (this._hasWebkitFullScreen) {
		return document.webkitIsFullScreen;
	} else if (this._hasMozFullScreen) {
		return document.mozFullScreen;
	} else {
		console.assert(false);
	}
};

THREEx.FullScreen.addEventListener = function (element, handler) {
	if (element.addEventListener) {
		element.addEventListener('webkitfullscreenchange', handler, false);
		element.addEventListener('mozfullscreenchange', handler, false);
		element.addEventListener('fullscreenchange', handler, false);
		element.addEventListener('MSFullscreenChange', handler, false);
	}
};

THREEx.FullScreen.removeEventListener = function (element, handler) {
	if (element.removeEventListener) {
		element.removeEventListener('webkitfullscreenchange', handler, false);
		element.removeEventListener('mozfullscreenchange', handler, false);
		element.removeEventListener('fullscreenchange', handler, false);
		element.removeEventListener('MSFullscreenChange', handler, false);
	}
};

function exitHandler() {
	if (document.webkitIsFullScreen || document.mozFullScreen || document.msFullscreenElement !== null) {
		/* Run code on exit */
	}
}

/**
 * Request fullscreen on a given element
 * @param {DomElement} element to make fullscreen. optional. default to document.body
*/
THREEx.FullScreen.request = function (element) {
	element = element || document.body;
	if (this._hasWebkitFullScreen) {
		element.webkitRequestFullScreen();
	} else if (this._hasMozFullScreen) {
		element.mozRequestFullScreen();
	} else {
		console.assert(false);
	}
};

/**
 * Cancel fullscreen
*/
THREEx.FullScreen.cancel = function () {
	if (this._hasWebkitFullScreen) {
		document.webkitCancelFullScreen();
	} else if (this._hasMozFullScreen) {
		document.mozCancelFullScreen();
	} else {
		console.assert(false);
	}
};

THREEx.FullScreen._hasWebkitFullScreen = 'webkitCancelFullScreen' in document ? true : false;
THREEx.FullScreen._hasMozFullScreen = 'mozCancelFullScreen' in document ? true : false;

/***/ },
/* 23 */
/***/ function(module, exports) {

"use strict";
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AutoNavigator = function () {
  function AutoNavigator(context, bookCtrl) {
    var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, AutoNavigator);

    props = _extends({}, props, {
      urlParam: props.urlParam || 'fb3d-page',
      navigates: props.navigates === undefined ? 1 : props.navigates
    });
    this.props = props;
    this.context = context;
    this.bookCtrl = bookCtrl;
    this.urlParam = props.urlParam;
    this.wnd = context.wnd;

    this.wnd.fb3d = _extends({}, this.wnd.fb3d);
    this.wnd.fb3d.navigator = _extends({}, this.wnd.fb3d.navigator);
    this.navigator = this.wnd.fb3d.navigator[this.urlParam] = _extends({}, this.wnd.fb3d.navigator[this.urlParam]);
    this.navigator.instances = (this.navigator.instances || 0) + 1;

    if (this.navigator.instances <= this.props.navigates) {
      this.bookCtrl.goToPage(this.getPageNumber());
    }
  }

  AutoNavigator.prototype.dispose = function dispose() {};

  AutoNavigator.prototype.getParameterByName = function getParameterByName(name, url) {
    if (!url) {
      url = this.wnd.location.href;
    }
    name = name.replace(/[\[\]]/g, '\\$&');
    var regex = new RegExp('[?&]' + name + '(=([^]*)|&|#|$)'),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, ' '));
  };

  AutoNavigator.prototype.getPageNumber = function getPageNumber() {
    var number = this.getParameterByName(this.urlParam);
    number = parseInt(number);
    if (isNaN(number)) {
      number = 1;
    }
    return number - 1;
  };

  return AutoNavigator;
}();

exports.default = AutoNavigator;

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(1);

var _MathUtils = __webpack_require__(3);

var _MathUtils2 = _interopRequireDefault(_MathUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Binder = function () {
  function Binder(visual, p) {
    var _this = this;

    _classCallCheck(this, Binder);

    this.visual = visual;
    this.p = _extends({}, p, {
      backSize: 2 * p.cover.depth + p.sheets * p.page.depth
    });
    this.OZ = new _libs.THREE.Vector3(0, 0, 1);

    this.backG = new _libs.THREE.BoxGeometry(p.cover.depth, this.p.backSize, p.cover.height);

    this.materials = [new _libs.THREE.MeshPhongMaterial({ color: p.cover.color }), new _libs.THREE.MeshPhongMaterial({ color: p.cover.color }), new _libs.THREE.MeshPhongMaterial({ color: p.cover.color }), new _libs.THREE.MeshPhongMaterial({ color: p.cover.color }), new _libs.THREE.MeshPhongMaterial({ color: p.cover.color }), new _libs.THREE.MeshPhongMaterial({ color: p.cover.color })];

    var backM = new _libs.THREE.Mesh(this.backG, new _libs.THREE.MeshFaceMaterial(this.materials));

    if (p.cover.binderTexture !== '') {
      this.visual.textureLoader.load(p.cover.binderTexture, function (texture) {
        _this.materials[1].color.setHex(0xFFFFFF);
        _this.materials[1].map = texture;
        texture.minFilter = _libs.THREE.LinearFilter;
        texture.needsUpdate = true;
        _this.materials[1].needsUpdate = true;
      });
    }

    this.three = new _libs.THREE.Object3D();
    this.back = new _libs.THREE.Object3D();
    this.backRT = new _libs.THREE.Object3D();
    this.backRR = new _libs.THREE.Object3D();
    this.backLT = new _libs.THREE.Object3D();
    this.backLR = new _libs.THREE.Object3D();
    this.leftPivot = new _libs.THREE.Object3D();
    this.rightPivot = new _libs.THREE.Object3D();

    this.back.add(backM);
    this.back.add(this.leftPivot);
    this.back.add(this.rightPivot);
    this.backRT.add(this.back);
    this.backRR.add(this.backRT);
    this.backLT.add(this.backRR);
    this.backLR.add(this.backLT);
    this.three.add(this.backLR);
  }

  Binder.prototype.dispose = function dispose() {
    for (var _iterator = this.materials, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var m = _ref;

      if (m.map) {
        m.map = null;
        m.needsUpdate = true;
      }
      m.dispose();
    }
    delete this.materials;
    this.backG.dispose();
  };

  Binder.prototype.set = function set(angle) {
    var right = void 0,
        left = void 0;
    if (angle > Math.PI / 2) {
      right = Math.PI / 2;
      left = angle - Math.PI / 2;
    } else {
      right = angle;
      left = 0;
    }
    var p = this.p,
        tr1 = { x: -0.5 * p.cover.depth, y: 0.5 * p.backSize - p.cover.depth };
    this.backRT.position.set(tr1.x, tr1.y, 0);
    this.backRR.position.set(-tr1.x, -tr1.y, 0);
    this.backRR.quaternion.setFromAxisAngle(this.OZ, right);

    var tr2 = { x: p.backSize - 2 * p.cover.depth - 0.5 * p.cover.depth, y: 0.5 * p.backSize - p.cover.depth };
    this.backLT.position.set(tr2.x, tr2.y, 0);
    this.backLR.position.set(-tr2.x, -tr2.y, 0);
    this.backLR.quaternion.setFromAxisAngle(this.OZ, left);
  };

  Binder.prototype.setLeft = function setLeft(angle) {
    var PI = Math.PI;
    this.leftPivot.position.set(_MathUtils2.default.interpolateLinear([-PI, -PI / 2], [0, this.p.cover.depth], angle), 0.5 * this.p.backSize - 0.5 * this.p.cover.depth, 0);
    this.leftPivot.quaternion.setFromAxisAngle(this.OZ, angle);
  };

  Binder.prototype.setRight = function setRight(angle) {
    var PI = Math.PI;
    this.rightPivot.position.set(_MathUtils2.default.interpolateLinear([-PI / 2, 0], [this.p.cover.depth, 0], angle), -0.5 * this.p.backSize + 0.5 * this.p.cover.depth, 0);
    this.rightPivot.quaternion.setFromAxisAngle(this.OZ, angle);
  };

  Binder.prototype.joinLeftCover = function joinLeftCover(cover) {
    cover.three.position.set(0, -0.5 * this.p.cover.depth, 0);
    this.leftPivot.add(cover.three);
  };

  Binder.prototype.disconnectLeftCover = function disconnectLeftCover(cover) {
    this.leftPivot.remove(cover.three);
  };

  Binder.prototype.joinRightCover = function joinRightCover(cover) {
    cover.three.position.set(0, -0.5 * this.p.cover.depth, 0);
    this.rightPivot.add(cover.three);
  };

  Binder.prototype.disconnectRightCover = function disconnectRightCover(cover) {
    this.rightPivot.remove(cover.three);
  };

  return Binder;
}();

exports.default = Binder;

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(1);

var _book = __webpack_require__(9);

var _GraphUtils = __webpack_require__(5);

var _GraphUtils2 = _interopRequireDefault(_GraphUtils);

var _Binder = __webpack_require__(24);

var _Binder2 = _interopRequireDefault(_Binder);

var _Cover = __webpack_require__(30);

var _Cover2 = _interopRequireDefault(_Cover);

var _SheetBlock = __webpack_require__(8);

var _SheetBlock2 = _interopRequireDefault(_SheetBlock);

var _SheetPhysics = __webpack_require__(37);

var _SheetPhysics2 = _interopRequireDefault(_SheetPhysics);

var _PageManager = __webpack_require__(32);

var _PageManager2 = _interopRequireDefault(_PageManager);

var _CSSLayer = __webpack_require__(11);

var _CSSLayer2 = _interopRequireDefault(_CSSLayer);

var _CssLayersManager = __webpack_require__(31);

var _CssLayersManager2 = _interopRequireDefault(_CssLayersManager);

var _SearchEngine = __webpack_require__(35);

var _SearchEngine2 = _interopRequireDefault(_SearchEngine);

var _CustomEventConverter = __webpack_require__(14);

var _CustomEventConverter2 = _interopRequireDefault(_CustomEventConverter);

var _CircleTarget = __webpack_require__(65);

var _CircleTarget2 = _interopRequireDefault(_CircleTarget);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Book = function (_THREE$EventDispatche) {
  _inherits(Book, _THREE$EventDispatche);

  // pageCallback samples

  // (n)=> ({
  //   type: 'image',
  //   src: 'sample.png',
  //   interactive: false
  // });
  //
  // (n)=> ({
  //   type: 'html',
  //   src: 'sample.html',
  //   interactive: true
  // });
  //
  // const pdf = new Pdf('sample.pdf');
  // (n)=> ({
  //   type: 'pdf',
  //   src: pdf,
  //   interactive: false
  // });

  function Book(visual, sheets, pageCallback, props) {
    _classCallCheck(this, Book);

    var _this = _possibleConstructorReturn(this, _THREE$EventDispatche.call(this));

    _this.visual = visual;
    _this.p = _extends({}, Book.prepareProps(props), {
      sheets: sheets,
      pageCallback: pageCallback
    });
    _this.pageManager = new _PageManager2.default(visual, _this, _this.p);
    _CSSLayer2.default.init(visual.doc);
    _this.layerManager = new _CssLayersManager2.default(_this);
    _this.searchEngine = new _SearchEngine2.default(pageCallback, 2 * (sheets + 2));
    _this.searchEngine.onPageHitsChanged = function (page, query) {
      _this.pageManager.refreshPageQuery(page, query);
      _this.dispatchEvent({
        type: 'searchResults',
        results: _this.searchEngine.results,
        lastPage: page,
        query: query
      });
    };

    _this.three = new _libs.THREE.Object3D();

    _this.binder = new _Binder2.default(visual, _this.p);
    _this.three.add(_this.binder.three);

    _this.leftCover = new _Cover2.default(visual, _extends({}, _this.p, { setTexture: _this.setLeftCoverTexture.bind(_this) }), Math.PI / 2, 'opened');
    _this.binder.joinLeftCover(_this.leftCover);
    _this.subscribeSheetBlock(_this.leftCover, 0);
    _this.rightCover = new _Cover2.default(visual, _extends({}, _this.p, { setTexture: _this.setRightCoverTexture.bind(_this) }), 0, 'closed');
    _this.binder.joinRightCover(_this.rightCover);
    _this.subscribeSheetBlock(_this.rightCover, 2 * (_this.p.sheets + 1));

    _this.threeSheetBlocks = new _libs.THREE.Object3D();
    _this.three.add(_this.threeSheetBlocks);
    _this.threeSheetBlocks.position.set(0.5 * _this.p.cover.depth - 0.5 * sheets * _this.p.page.depth, -0.5 * sheets * _this.p.page.depth, 0);

    _this.sheetBlocks = [];
    if (sheets > 0) {
      _this.addSheetBlock(0, new _SheetBlock2.default(visual, _extends({}, _this.p, { setTexture: _this.setPageTexture.bind(_this) }), 0, sheets, 0, 'closed'));
    }

    _this.angle = 0;
    _this.closedAngle = 0;
    _this.set(_this.angle, 0);

    _this.three.position.set(-0.5 * _this.p.cover.depth + 0.5 * sheets * _this.p.page.depth, 0, 0);
    _this.sheetPhysics = new _SheetPhysics2.default(_this.p.page.width / _this.p.scale, _this.p.gravity, _this.p.page.cornerDeviation);

    _this.binds = {
      update: _this.update.bind(_this)
    };
    _this.visual.addRenderCallback(_this.binds.update);

    _this.binds.onPickCallback = _this.onPickCallback.bind(_this);
    _this.visual.drag.onPickCallback = _this.binds.onPickCallback;
    _this.binds.onDragCallback = _this.onDragCallback.bind(_this);
    _this.visual.drag.onDragCallback = _this.binds.onDragCallback;
    _this.binds.onReleaseCallback = _this.onReleaseCallback.bind(_this);
    _this.visual.drag.onReleaseCallback = _this.binds.onReleaseCallback;

    _this.dragAngle = 0.05;
    _this.tmp = {
      boxs: [new _libs.THREE.Box3(), new _libs.THREE.Box3()]
    };

    _this.visual.addObject(_this.three);

    setTimeout(function () {
      _this.notifyBeforeAnimation();
      _this.notifyAfterAnimation();
    }, 100);
    return _this;
  }

  Book.prototype.dispose = function dispose() {
    this.visual.removeObject(this.three);
    this.sheetPhysics.dispose();
    delete this.visual.drag.onPickCallback;
    delete this.visual.drag.onDragCallback;
    delete this.visual.drag.onReleaseCallback;
    this.visual.removeRenderCallback(this.binds.update);
    this.removeSheetBlocks(0, this.sheetBlocks.length);
    this.binder.disconnectLeftCover(this.leftCover);
    this.removeSheetBlock(this.leftCover);
    this.binder.disconnectRightCover(this.rightCover);
    this.removeSheetBlock(this.rightCover);
    this.binder.dispose();
    this.layerManager.dispose();
    _CSSLayer2.default.dispose();
    this.pageManager.dispose();
  };

  // publics {

  Book.prototype.getPageCallback = function getPageCallback() {
    return this.p.pageCallback;
  };

  Book.prototype.setQuery = function setQuery(query) {
    this.searchEngine.setQuery(query);
  };

  Book.prototype.isProcessing = function isProcessing() {
    return this.sheetPhysics.getSize() !== 0;
  };

  Book.prototype.getPages = function getPages() {
    return 4 + 2 * this.p.sheets;
  };

  Book.prototype.setFlipProgressClb = function setFlipProgressClb(clb) {
    this.p.flipProgressClb = clb;
  };

  Book.prototype.setInjector = function setInjector(injector) {
    this.p.injector = injector;
  };

  Book.prototype.isActivePage = function isActivePage(n) {
    var res = true;
    if (n > 1 && n < this.getPages() - 2) {
      for (var _iterator = this.sheetBlocks, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var b = _ref;

        if (n - 2 > 2 * b.p.first && n - 2 < 2 * b.p.last - 1) {
          res = false;
          break;
        }
      }
    }
    return res;
  };

  Book.prototype.getBlockByPage = function getBlockByPage(n) {
    var block = void 0;
    if (n < 2) {
      block = this.leftCover;
    } else if (n < 2 * (this.p.sheets + 1)) {
      for (var _iterator2 = this.sheetBlocks, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var b = _ref2;

        if (n - 2 >= 2 * b.p.first && n - 2 < 2 * b.p.last) {
          block = b;
          break;
        }
      }
    } else {
      block = this.rightCover;
    }
    return block;
  };

  Book.prototype.getBlockPages = function getBlockPages(block) {
    var range = void 0;
    switch (block) {
      case this.leftCover:
        {
          range = [0, 1];
          break;
        }
      case this.rightCover:
        {
          range = [2 * (this.p.sheets + 1), 2 * (this.p.sheets + 1) + 1];
          break;
        }
      default:
        {
          range = block ? [2 * (block.p.first + 1), 2 * (block.p.last + 1) - 1] : undefined;
        }
    }
    return range;
  };

  Book.prototype.getPage = function getPage() {
    var PI = Math.PI;
    var p = void 0;
    if (this.angle === PI / 2 || this.angle === 3 * PI / 2) {
      for (var _iterator3 = this.sheetBlocks, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
        var _ref3;

        if (_isArray3) {
          if (_i3 >= _iterator3.length) break;
          _ref3 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done) break;
          _ref3 = _i3.value;
        }

        var block = _ref3;

        if (block.angle <= PI / 2) {
          p = this.getBlockPages(block)[0] - 1;
          break;
        }
      }
      if (!p) {
        p = this.getPages() - 3;
      }
    } else if (this.angle < PI / 2) {
      p = 0;
    } else if (this.angle > 3 * PI / 2) {
      p = 1;
    } else if (this.angle < PI) {
      p = this.getPages() - 3;
    } else if (this.angle >= PI) {
      p = this.getPages() - 1;
    }
    return p;
  };

  Book.prototype.getLeftFlipping = function getLeftFlipping() {
    var block = void 0;
    var left = this.sheetBlocks[0],
        PI = Math.PI;
    if (this.angle === PI) {
      block = this.rightCover;
    } else {
      if (left && left.state === 'closed' && left.angle > PI / 2) {
        block = left;
      } else if (this.angle === PI / 2 || this.angle === 3 * PI / 2) {
        block = this.leftCover;
      }
    }
    return block;
  };

  Book.prototype.getRightFlipping = function getRightFlipping() {
    var block = void 0;
    var right = this.sheetBlocks[this.sheetBlocks.length - 1],
        PI = Math.PI;
    if (this.angle === 0) {
      block = this.leftCover;
    } else {
      if (right && right.state === 'closed' && right.angle <= PI / 2) {
        block = right;
      } else if (this.angle === PI / 2 || this.angle === 3 * PI / 2) {
        block = this.rightCover;
      }
    }
    return block;
  };

  Book.prototype.getClosedBlockAngle = function getClosedBlockAngle(angle) {
    var closedAngle = void 0,
        PI = Math.PI;

    if (this.leftCover.physicId) {
      var test = void 0;
      try {
        test = Math.abs(this.sheetPhysics.getParametr(this.leftCover.physicId, 'angle') - angle);
      } catch (e) {
        test = 0;
      }
      closedAngle = angle > PI / 2 || test > PI / 6 ? PI / 2 : this.closedAngle;
    } else if (this.rightCover.physicId) {
      var _test = void 0;
      try {
        _test = Math.abs(this.sheetPhysics.getParametr(this.rightCover.physicId, 'angle') - angle);
      } catch (e) {
        _test = 0;
      }
      closedAngle = angle < PI / 2 || _test > PI / 6 ? PI / 2 + 1e-7 : this.closedAngle;
    } else {
      closedAngle = PI / 2 + (angle !== 0) * 1e-7;
    }

    return {
      openedAngle: angle,
      closedAngle: closedAngle,
      binderTurn: this.closedAngle
    };
  };

  Book.prototype.flipLeft = function flipLeft() {
    var _this2 = this;

    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    var progressClb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.p.flipProgressClb;

    var block = void 0,
        res = void 0;
    if (this.sheetPhysics.getSize() < 25) {
      (function () {
        var left = _this2.sheetBlocks[0],
            PI = Math.PI;
        if (_this2.angle === PI) {
          res = _this2.connectPhysics(block = _this2.rightCover, _this2.p.cover.mass, PI, -_this2.p.cover.startVelocity, _this2.p.cover.flexibility, 0, function (angle, height) {
            return _this2.set(3 * PI / 2 - angle / 2, height);
          }, function (angle, height) {
            _this2.set(3 * PI / 2 - angle / 2, 0);
            _this2.setSheetBlocks(angle ? PI : PI / 2 + 1e-7, 'closed');
          }, progressClb);
        } else {
          if (left && left.state === 'closed' && left.angle > PI / 2) {
            block = size < left.getSize() ? _this2.splitSheetBlock(0, left.getSize() - size)[1] : left;
            res = _this2.connectPhysics(block, _this2.p.page.mass * block.getSize(), PI, -_this2.p.page.startVelocity, _this2.p.page.flexibility, 0, function (angle, height) {
              return block.set(_this2.getClosedBlockAngle(angle), 'opened', height);
            }, Book.finishAnimationClb.bind({ book: _this2, block: block }), progressClb);
          } else if (_this2.angle === PI / 2 || _this2.angle === 3 * PI / 2) {
            res = _this2.connectPhysics(block = _this2.leftCover, _this2.p.cover.mass, PI, -_this2.p.cover.startVelocity, _this2.p.cover.flexibility, 0, function (angle, height) {
              _this2.set(2 * PI - angle / 2, height);
              if (angle > PI / 2) {
                _this2.setSheetBlocks(angle ? PI / 2 : 0, 'closed');
              }
            }, function (angle, height) {
              return _this2.set(angle === 0 ? 0 : 2 * PI - angle / 2, 0);
            }, progressClb);
          }
        }
      })();
    }
    return res;
  };

  Book.prototype.flipRight = function flipRight() {
    var _this3 = this;

    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    var progressClb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.p.flipProgressClb;

    var block = void 0,
        res = void 0;
    if (this.sheetPhysics.getSize() < 25) {
      (function () {
        var right = _this3.sheetBlocks[_this3.sheetBlocks.length - 1],
            PI = Math.PI;
        if (_this3.angle === 0) {
          res = _this3.connectPhysics(block = _this3.leftCover, _this3.p.cover.mass, 0, _this3.p.cover.startVelocity, _this3.p.cover.flexibility, 0, function (angle, height) {
            return _this3.set(angle / 2, height);
          }, function (angle, height) {
            _this3.set(angle / 2, 0);
            _this3.setSheetBlocks(angle ? PI / 2 : 0, 'closed');
          }, progressClb);
        } else {
          if (right && right.state === 'closed' && right.angle <= PI / 2) {
            block = size < right.getSize() ? _this3.splitSheetBlock(_this3.sheetBlocks.length - 1, size)[0] : right;
            res = _this3.connectPhysics(block, _this3.p.page.mass * block.getSize(), 0, _this3.p.page.startVelocity, _this3.p.page.flexibility, 0, function (angle, height) {
              return block.set(_this3.getClosedBlockAngle(angle), 'opened', height);
            }, Book.finishAnimationClb.bind({ book: _this3, block: block }), progressClb);
          } else if (_this3.angle === PI / 2 || _this3.angle === 3 * PI / 2) {
            res = _this3.connectPhysics(block = _this3.rightCover, _this3.p.cover.mass, 0, _this3.p.cover.startVelocity, _this3.p.cover.flexibility, 0, function (angle, height) {
              _this3.set(PI / 2 + angle / 2, height);
              if (angle < PI / 2) {
                _this3.setSheetBlocks(PI / 2 + 1e-7, 'closed');
              }
            }, function (angle, height) {
              return _this3.set(PI / 2 + angle / 2, 0);
            }, progressClb);
          }
        }
      })();
    }
    return res;
  };

  // }

  Book.prototype.clearHoverInfo = function clearHoverInfo() {
    this.pageManager.turnOnEvents();
    delete this.hoverInfo.block.force;
    delete this.hoverInfo.block.cornerForce;
    delete this.hoverInfo;
  };

  Book.prototype.xSegment = function xSegment() {
    var boxs = this.tmp.boxs,
        res = {};
    if (this.leftCover.physicId) {
      boxs[0].setFromObject(this.rightCover.three);
      res.min = -(res.max = boxs[0].max.x);
    } else if (this.rightCover.physicId) {
      boxs[0].setFromObject(this.leftCover.three);
      res.max = -(res.min = boxs[0].min.x);
    } else {
      boxs[0].setFromObject(this.leftCover.three);
      boxs[1].setFromObject(this.rightCover.three);
      boxs[0].union(boxs[1]);
      res.min = boxs[0].min.x;
      res.max = boxs[0].max.x;
    }
    return res;
  };

  Book.prototype.computeTarget = function computeTarget(point) {
    var x = point.x,
        y = point.y,
        seg = this.xSegment(),
        angle = void 0;

    angle = (seg.max - x) / (seg.max - seg.min) * Math.PI;
    // angle = Math.acos(x/Math.sqrt(x*x+y*y));
    return Math.max(this.dragAngle, Math.min(Math.PI - this.dragAngle, angle));
  };

  Book.prototype.onPickCallback = function onPickCallback(object) {
    var res = false;
    var block = object.object.userData.self,
        p = _extends({}, object.uv),
        i = object.face.materialIndex;
    if (i < 2) {
      p.x = i === 0 ? p.x : 1 - p.x;
      if (block.cornerTarget.testIntersection(null, p) && block.physicId) {
        if (this.hoverInfo) {
          this.clearHoverInfo();
        }
        block.force = _SheetPhysics2.default.dragForceClb;
        block.cornerForce = _SheetPhysics2.default.getDragCornerForceClb(this.computeTarget(object.point));
        this.dragInfo = {
          object: object,
          block: block
        };
        res = true;
        this.pageManager.turnOffEvents();
      }
    }
    return res;
  };

  Book.prototype.onDragCallback = function onDragCallback(point) {
    var block = this.dragInfo.block,
        p = block.getProps();
    block.force = _SheetPhysics2.default.dragForceClb;
    block.cornerForce = _SheetPhysics2.default.getDragCornerForceClb(this.computeTarget(point));
    return true;
  };

  Book.prototype.onReleaseCallback = function onReleaseCallback() {
    delete this.dragInfo.block.force;
    delete this.dragInfo.block.cornerForce;
    delete this.dragInfo;
    this.pageManager.turnOnEvents();
  };

  Book.prototype.getFlipping = function getFlipping(i) {
    return i ? this.getLeftFlipping() : this.getRightFlipping();
  };

  Book.prototype.flip = function flip(i) {
    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

    return i ? this.flipLeft(size) : this.flipRight(size);
  };

  Book.prototype.cornerCallback = function cornerCallback(e, data) {
    var _this4 = this;

    var _data$data = data.data,
        i = _data$data.i,
        n = _data$data.n;

    if (e.type === 'mouseover') {
      if (this.hoverInfo && this.hoverInfo.pendings !== undefined) {
        ++this.hoverInfo.pendings;
      } else {
        if (this.hoverInfo) {
          console.warn('Wrong state: element is already hover');
          if (this.hoverInfo.n !== n) {
            this.clearHoverInfo();
          }
        }
        if (!this.hoverInfo && !this.dragInfo) {
          (function () {
            var res = Promise.resolve(undefined);
            var hoverAngle = 0.02,
                hover = _this4.getBlockByPage(n),
                possible = _this4.getFlipping(i);
            if (n > 1 && n < 2 * (_this4.p.sheets + 1) && hover.physicId && (hover.angle < hoverAngle || hover.angle > Math.PI - hoverAngle)) {
              res = Promise.resolve(hover);
            } else if (hover === possible) {
              var sheetBlocks = [_this4.leftCover].concat(_this4.sheetBlocks, [_this4.rightCover]);
              var j = sheetBlocks.indexOf(hover),
                  nextBlock = ~j ? sheetBlocks[j + 2 * i - 1] : undefined;
              if (!nextBlock || !nextBlock.physicId || nextBlock.angle > hoverAngle && nextBlock.angle < Math.PI - hoverAngle) {
                res = _this4.flip(i, 1).then(function (block) {
                  _this4.sheetPhysics.setParametr(block.physicId, 'velocity', 0);
                  return block;
                });
                _this4.hoverInfo = {
                  pendings: 1
                };
              }
            }
            res.then(function (block) {
              if (_this4.hoverInfo && _this4.hoverInfo.pendings < 1) {
                block = undefined;
                delete _this4.hoverInfo;
              }
              if (block) {
                _this4.pageManager.turnOffEvents();
                var p = block.getProps();
                block.force = _this4.sheetPhysics.getTargetForceClb(p.mass * block.getSize(), i ? Math.PI - hoverAngle : hoverAngle);
                block.cornerForce = function () {
                  return (i ? -1 : 1) * _SheetPhysics2.default.hoverCornerForceClb();
                };
                _this4.sheetPhysics.setParametr(block.physicId, 'angle', i ? Math.PI - 0.5 * hoverAngle : 0.5 * hoverAngle);
                _this4.hoverInfo = {
                  n: n,
                  block: block
                };
                _this4.update(1 / 30);
              }
            });
          })();
        }
      }
    } else if (this.hoverInfo && e.type === 'mouseout') {
      if (this.hoverInfo.pendings !== undefined) {
        --this.hoverInfo.pendings;
      } else if (n === this.hoverInfo.n) {
        this.clearHoverInfo();
      }
    } else if (e.type === 'click') {
      var hover = this.getBlockByPage(n);
      if (hover.physicId) {
        var angle = this.sheetPhysics.getParametr(hover.physicId, 'angle');
        if ((i ? Math.PI - angle : angle) < 3 * this.dragAngle) {
          var id = hover.physicId,
              props = hover.getProps();
          this.sheetPhysics.setParametr(id, 'velocity', (i ? -1 : 1) * props.startVelocity);
        }
      }
    }
  };

  Book.prototype.addSheetBlock = function addSheetBlock(p, block) {
    this.sheetBlocks.splice(p, 0, block);
    this.subscribeSheetBlock(block, 2);
    this.threeSheetBlocks.add(block.three);
  };

  Book.prototype.subscribeSheetBlock = function subscribeSheetBlock(block, offset) {
    var _this5 = this;

    var eventConverter = new _CustomEventConverter2.default(this.visual.wnd, this.visual.doc, _CircleTarget2.default.test),
        r = 0.15,
        target = new _CircleTarget2.default(1 - 0.5 * r, 0.5 * r, r);
    target.block = block;
    target.callback = this.cornerCallback.bind(this);
    eventConverter.addCustom(target);
    block.cornerTarget = target;
    block.three.userData.mouseCallback = function (e, data) {
      var i = data.face.materialIndex;
      if (i < 2) {
        var n = i === 0 ? offset + 2 * block.p.first : offset + 2 * block.p.last - 1;
        eventConverter.convert(e, { x: i === 0 ? data.uv.x : 1 - data.uv.x, y: data.uv.y, i: i, n: n });
        _this5.pageManager.transferEventToTexture(n, e, data);
      }
    };
    this.visual.drag.addThree(block.three);
    this.visual.mouseEvents.addThree(block.three);
  };

  Book.prototype.removeSheetBlock = function removeSheetBlock(block) {
    this.visual.mouseEvents.removeThree(block.three);
    this.visual.drag.removeThree(block.three);
    this.threeSheetBlocks.remove(block.three);
    block.dispose();
  };

  Book.prototype.removeSheetBlocks = function removeSheetBlocks(first, size) {
    var blocks = this.sheetBlocks.splice(first, size);
    for (var _iterator4 = blocks, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
      var _ref4;

      if (_isArray4) {
        if (_i4 >= _iterator4.length) break;
        _ref4 = _iterator4[_i4++];
      } else {
        _i4 = _iterator4.next();
        if (_i4.done) break;
        _ref4 = _i4.value;
      }

      var block = _ref4;

      this.removeSheetBlock(block);
    }
  };

  Book.prototype.setPageTexture = function setPageTexture(material, n) {
    this.pageManager.setTexture(material, n + 2);
  };

  Book.prototype.setLeftCoverTexture = function setLeftCoverTexture(material, n) {
    this.pageManager.setTexture(material, n);
  };

  Book.prototype.setRightCoverTexture = function setRightCoverTexture(material, n) {
    this.pageManager.setTexture(material, n + 2 * (this.p.sheets + 1));
  };

  Book.finishAnimationClb = function finishAnimationClb(angle) {
    this.block.set(this.book.getClosedBlockAngle(angle).closedAngle, 'closed', 0);
    var i = this.book.sheetBlocks.indexOf(this.block);
    if (~i) {
      if (angle === 0) {
        this.book.mergeSheetBlocks(i, this.book.sheetBlocks.length - i);
      } else {
        this.book.mergeSheetBlocks(0, i + 1);
      }
    }
  };

  Book.prototype.calcBlockForce = function calcBlockForce(block, object, angle, velocity, cornerHeight) {
    return block.force ? block.force(object, angle, velocity, cornerHeight) : 0;
  };

  Book.prototype.calcBlockCornerForce = function calcBlockCornerForce(block, object, angle, velocity, cornerHeight) {
    return block.cornerForce ? block.cornerForce(object, angle, velocity, cornerHeight) : 0;
  };

  Book.prototype.notifyBeforeAnimation = function notifyBeforeAnimation() {
    var res = void 0;
    if (this.animationNotification) {
      res = Promise.reject();
    } else {
      this.animationNotification = true;
      res = this.layerManager.hide();
    }
    return res;
  };

  Book.prototype.notifyAfterAnimation = function notifyAfterAnimation() {
    if (this.animationNotification) {
      delete this.animationNotification;
      this.layerManager.show();
    }
  };

  Book.prototype.connectPhysics = function connectPhysics(block, mass, angle, velocity, flexibility, coverHeight, simulateClb, removeClb, progressClb) {
    var _this6 = this;

    var type = function type() {
      return _this6.hoverInfo ? 'hover' : _this6.dragInfo ? 'drag' : 'free';
    },
        res = this.sheetPhysics.getSize() ? Promise.resolve() : this.notifyBeforeAnimation();
    return res.then(function () {
      block.physicId = _this6.sheetPhysics.addObject(mass, angle, velocity, flexibility, coverHeight, function (angl, ch) {
        simulateClb(angl, ch);
        progressClb(block, Math.abs(angle - angl) / Math.PI, 'process', type());
      }, function (angl, ch) {
        removeClb(angl, ch);
        delete block.physicId;
        progressClb(block, Math.abs(angle - angl) / Math.PI, 'finish', type());
        Promise.resolve().then(function () {
          if (!_this6.sheetPhysics.getSize()) {
            _this6.notifyAfterAnimation();
          }
        });
      }, function (object, angle, velocity, cornerHeight) {
        return _this6.calcBlockForce(block, object, angle, velocity, cornerHeight);
      }, function (object, angle, velocity, cornerHeight) {
        return _this6.calcBlockCornerForce(block, object, angle, velocity, cornerHeight);
      });
      progressClb(block, 0, 'init', type());
      return block;
    }).catch(function () {
      return undefined;
    });
  };

  Book.prototype.update = function update(dt) {
    this.sheetPhysics.simulate(dt);
  };

  Book.prototype.splitSheetBlock = function splitSheetBlock(i, leftSize) {
    var block = this.sheetBlocks[i];
    if (block && leftSize < block.getSize()) {
      var newBlock = new _SheetBlock2.default(this.visual, _extends({}, this.p, { setTexture: this.setPageTexture.bind(this) }), block.p.first, block.p.first + leftSize, block.angle, block.state);
      block.set(block.angle, block.state, block.corner.height, block.p.first + leftSize, block.p.last);
      this.addSheetBlock(i, newBlock);
      return [newBlock, block];
    }
  };

  Book.prototype.mergeSheetBlocks = function mergeSheetBlocks(first, size) {
    if (first < this.sheetBlocks.length) {
      size = Math.min(this.sheetBlocks.length - first, size);
      var firstBlock = this.sheetBlocks[first],
          lastBlock = this.sheetBlocks[first + size - 1];
      firstBlock.set(firstBlock.angle, firstBlock.state, firstBlock.corner.height, firstBlock.p.first, lastBlock.p.last);
      this.removeSheetBlocks(first + 1, size - 1);
    }
  };

  Book.prototype.setSheetBlocks = function setSheetBlocks(angle, state) {
    if (state === 'closed') {
      this.closedAngle = angle;
    }
    this.sheetBlocks.forEach(function (s) {
      if (!s.physicId) {
        s.set(angle, state);
      }
    });
  };

  Book.prototype.set = function set(angle) {
    var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    this.angle = angle;
    var PI = Math.PI;
    if (angle < PI / 4) {
      this.binder.set(0);

      this.binder.setLeft(-PI / 2 + 2 * angle);
      this.leftCover.set(PI / 2, 'opened', height);

      this.setSheetBlocks(0, 'closed');

      this.binder.setRight(0);
      this.rightCover.set(0, 'closed', 0);
    } else if (angle < 2 * PI / 4) {
      var a = 2 * (angle - PI / 4);
      this.binder.set(a);

      this.binder.setLeft(-a);
      this.leftCover.set(PI / 2 + a, 'opened', height);

      this.setSheetBlocks(a, 'closed');

      this.binder.setRight(-a);
      this.rightCover.set(a, 'closed', 0);
    } else if (angle < 3 * PI / 4) {
      var _a = 2 * (angle - PI / 2);
      this.binder.set(PI / 2);

      this.binder.setLeft(-PI / 2);
      this.leftCover.set(PI, 'opened', 0);

      this.binder.setRight(-PI / 2);
      this.rightCover.set(_a, 'opened', height);
    } else if (angle < 4 * PI / 4) {
      var _a2 = 2 * (angle - 3 * PI / 4) + PI / 2;
      this.binder.set(_a2);

      this.binder.setLeft(-_a2);
      this.leftCover.set(_a2, 'closed', 0);

      this.setSheetBlocks(_a2, 'closed');

      this.binder.setRight(-PI / 2);
      this.rightCover.set(PI / 2, 'opened', height);
    } else if (angle < 5 * PI / 4) {
      this.binder.set(PI);

      this.binder.setLeft(-PI);
      this.leftCover.set(PI, 'closed', 0);

      this.setSheetBlocks(PI, 'closed');

      this.binder.setRight(-PI / 2 - 2 * (angle - PI));
      this.rightCover.set(PI / 2, 'opened', height);
    } else if (angle < 6 * PI / 4) {
      var _a3 = 2 * (angle - 5 * PI / 4);
      this.binder.set(PI - _a3);

      this.binder.setLeft(-PI + _a3);
      this.leftCover.set(PI - _a3, 'closed', 0);

      this.setSheetBlocks(PI - _a3, 'closed');

      this.binder.setRight(-PI + _a3);
      this.rightCover.set(PI / 2 - _a3, 'opened', height);
    } else if (angle < 7 * PI / 4) {
      var _a4 = 2 * (angle - 6 * PI / 4);
      this.binder.set(PI / 2);

      this.binder.setLeft(-PI / 2);
      this.leftCover.set(PI - _a4, 'opened', height);

      this.binder.setRight(-PI / 2);
      this.rightCover.set(0, 'opened', 0);
    } else if (angle < 8 * PI / 4) {
      var _a5 = 2 * (angle - 7 * PI / 4);
      this.binder.set(PI / 2 - _a5);

      this.binder.setLeft(-PI / 2);
      this.leftCover.set(PI / 2, 'opened', height);

      this.setSheetBlocks(PI / 2 - _a5, 'closed');

      this.binder.setRight(-PI / 2 + _a5);
      this.rightCover.set(PI / 2 - _a5, 'closed', 0);
    }
  };

  Book.createSideTexture = function createSideTexture(color) {
    var jC = (0, _libs.$)('<canvas width="8" height="8"></canvas>');
    var ctx = jC[0].getContext('2d');
    ctx.beginPath();
    ctx.fillStyle = _GraphUtils2.default.color2Rgba(color, 1);
    ctx.rect(0, 0, 8, 7);
    ctx.fill();
    ctx.beginPath();
    ctx.fillStyle = _GraphUtils2.default.color2Rgba(_GraphUtils2.default.inverseColor(color, 0.5), 1);
    ctx.rect(0, 7, 8, 1);
    ctx.fill();
    return jC[0];
  };

  Book.prepareProps = function prepareProps(props) {
    return Book.calcProps(Book.mergeProps((0, _book.props)(), props));
  };

  Book.mergeProps = function mergeProps(first, second) {
    second = second || {};
    return _extends({}, first, second, {
      sheet: _extends({}, first.sheet, second.sheet),
      cover: _extends({}, first.cover, second.cover),
      page: _extends({}, first.page, second.page)
    });
  };

  Book.calcProps = function calcProps(props) {
    var p = _extends({}, props, {
      sheet: _extends({}, props.sheet),
      cover: _extends({}, props.sheet, props.cover),
      page: _extends({}, props.sheet, props.page)
    }),
        scale = 10,
        height = scale * p.height,
        width = scale * p.width,
        flipProgressClb = function flipProgressClb() {
      return undefined;
    },
        sheet = {
      sideTexture: p.sheet.sideTexture || Book.createSideTexture(p.sheet.color)
    },
        cover = _extends({}, sheet, p.cover, {
      depth: scale * p.cover.depth,
      width: width,
      height: height,
      padding: scale * p.cover.padding
    }),
        page = _extends({}, sheet, p.page, {
      depth: scale * p.page.depth,
      width: cover.width - cover.padding,
      height: cover.height - 2 * cover.padding
    }),
        marker = {
      use: false,
      color: 0XFF0000,
      size: scale * 0.001
    };
    return _extends({}, p, { scale: scale, height: height, width: width, flipProgressClb: flipProgressClb, cover: cover, page: page, marker: marker });
  };

  return Book;
}(_libs.THREE.EventDispatcher);

exports.default = Book;

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(1);

var _Controller2 = __webpack_require__(13);

var _Controller3 = _interopRequireDefault(_Controller2);

var _bookController = __webpack_require__(41);

var _EventsToActions = __webpack_require__(48);

var _EventsToActions2 = _interopRequireDefault(_EventsToActions);

var _stats = __webpack_require__(67);

var _stats2 = _interopRequireDefault(_stats);

var _Object3DWatcher = __webpack_require__(53);

var _Object3DWatcher2 = _interopRequireDefault(_Object3DWatcher);

var _FullScreen = __webpack_require__(22);

var _FullScreen2 = _interopRequireDefault(_FullScreen);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BookController = function (_Controller) {
  _inherits(BookController, _Controller);

  function BookController(book, view, props) {
    _classCallCheck(this, BookController);

    var _this = _possibleConstructorReturn(this, _Controller.call(this));

    _this.book = book;
    _this.visual = book.visual;
    _this.p = BookController.prepareProps(props);
    _this.devicePixelRatio = _this.visual.wnd.devicePixelRatio || 1;

    _this.orbit = book.visual.getOrbit();
    book.setFlipProgressClb(_this.updateViewIfState.bind(_this));
    _this.view = view;
    _this.bindActions();

    _this.state = {
      smartPan: !_this.actions['cmdSmartPan'].active,
      singlePage: _this.actions['cmdSinglePage'].active || _this.actions['cmdSinglePage'].activeForMobile && _this.devicePixelRatio > 1,
      stats: _this.actions['cmdStats'].active,
      lighting: _this.p.lighting.default,
      activeSide: 1
    };

    _this.boxs = [new _libs.THREE.Box3(), new _libs.THREE.Box3()];
    _this.bookWatcher = new _Object3DWatcher2.default(_this.visual, function () {
      if (_this.state.singlePage) {
        if (_this.state.activeSide) {
          _this.boxs[0].setFromObject(book.rightCover.three);
        } else {
          _this.boxs[0].setFromObject(book.leftCover.three);
        }
      } else {
        _this.boxs[0].setFromObject(book.leftCover.three);
        _this.boxs[1].setFromObject(book.rightCover.three);
        _this.boxs[0].union(_this.boxs[1]);
      }
      return _this.boxs[0];
    });
    _this.bookWatcher.scale = _this.p.scale.default;

    _this.Stats = new _stats2.default();
    _this.Stats.domElement.style.position = 'absolute';
    _this.Stats.domElement.style.top = '0px';

    _this.visual.setExtraLighting(_this.state.lighting);
    _this.binds = {
      onScreenModeChanged: _this.onScreenModeChanged.bind(_this),
      stats: _this.Stats.update.bind(_this.Stats),
      onUpdateView: _this.updateView.bind(_this)
    };
    _FullScreen2.default.addEventListener(_this.view.getParentContainer().ownerDocument, _this.binds.onScreenModeChanged);

    _this.cmdSmartPan();
    return _this;
  }

  BookController.prototype.dispose = function dispose() {
    _FullScreen2.default.removeEventListener(this.view.getParentContainer().ownerDocument, this.binds.onScreenModeChanged);
    delete this.book;
    delete this.view;
    delete this.visual;
  };

  BookController.prototype.setTocCtrl = function setTocCtrl(tocCtrl) {
    this.tocCtrl = tocCtrl;
    this.tocCtrl.onChange = this.updateView.bind(this);
    this.updateView();
  };

  BookController.prototype.setPrinter = function setPrinter(printer) {
    this.printer = printer;
    this.updateView();
  };

  BookController.prototype.setSounds = function setSounds(sounds) {
    this.sounds = sounds;
    sounds.setEnabled(this.actions['cmdSounds'].active);
    this.updateView();
  };

  BookController.prototype.onScreenModeChanged = function onScreenModeChanged(e) {
    this.updateView();
  };

  BookController.prototype.canZoomIn = function canZoomIn() {
    return !this.state.smartPan || Math.abs(this.bookWatcher.scale - this.p.scale.max) > this.p.eps;
  };

  BookController.prototype.canZoomOut = function canZoomOut() {
    return !this.state.smartPan || Math.abs(this.bookWatcher.scale - this.p.scale.min) > this.p.eps;
  };

  BookController.prototype.canDefaultZoom = function canDefaultZoom() {
    return this.state.smartPan;
  };

  BookController.prototype.cmdZoomIn = function cmdZoomIn() {
    if (this.state.smartPan) {
      this.bookWatcher.scale = Math.min(this.p.scale.max, this.bookWatcher.scale + this.p.scale.delta);
    } else {
      this.orbit.zoomIn(6.6 * this.p.scale.delta / 0.32);
    }
    this.updateView();
  };

  BookController.prototype.cmdZoomOut = function cmdZoomOut() {
    if (this.state.smartPan) {
      this.bookWatcher.scale = Math.max(this.p.scale.min, this.bookWatcher.scale - this.p.scale.delta);
    } else {
      this.orbit.zoomOut(6.6 * this.p.scale.delta / 0.32);
    }
    this.updateView();
  };

  BookController.prototype.cmdDefaultZoom = function cmdDefaultZoom() {
    if (this.state.smartPan) {
      this.bookWatcher.scale = this.p.scale.default;
      this.updateView();
    }
  };

  BookController.prototype.cmdToc = function cmdToc() {
    if (this.tocCtrl) {
      this.tocCtrl.togle();
    }
  };

  BookController.prototype.cmdFastBackward = function cmdFastBackward() {
    this.startFlip(this.book.flipLeft(5));
  };

  BookController.prototype.cmdBackward = function cmdBackward() {
    var _this2 = this;

    if (this.state.singlePage) {
      this.state.activeSide = (this.getPage() + 1) % 2;
      if (this.state.activeSide) {
        this.state.activeSide = 0;
        this.updateView();
      } else {
        this.startFlip(this.book.flipLeft(1)).then(function (block) {
          if (block) {
            _this2.state.activeSide = 1;
          }
        });
      }
    } else {
      this.startFlip(this.book.flipLeft(1));
    }
  };

  BookController.prototype.cmdForward = function cmdForward() {
    var _this3 = this;

    if (this.state.singlePage) {
      this.state.activeSide = (this.getPage() + 1) % 2;
      if (!this.state.activeSide) {
        this.state.activeSide = 1;
        this.updateView();
      } else {
        this.startFlip(this.book.flipRight(1)).then(function (block) {
          if (block) {
            _this3.state.activeSide = 0;
          }
        });
      }
    } else {
      this.startFlip(this.book.flipRight(1));
    }
  };

  BookController.prototype.cmdFastForward = function cmdFastForward() {
    this.startFlip(this.book.flipRight(5));
  };

  BookController.prototype.cmdSave = function cmdSave() {
    window.open(this.p.downloadURL, '_blank');
  };

  BookController.prototype.cmdPrint = function cmdPrint() {
    this.printer.print();
  };

  BookController.prototype.cmdFullScreen = function cmdFullScreen() {
    if (!_FullScreen2.default.activated()) {
      _FullScreen2.default.request(this.view.getParentContainer());
    } else {
      _FullScreen2.default.cancel();
    }
  };

  BookController.prototype.cmdSmartPan = function cmdSmartPan() {
    this.state.smartPan = !this.state.smartPan;
    if (this.state.smartPan) {
      this.orbit.minAzimuthAngle = 0;
      this.orbit.maxAzimuthAngle = 0;
      this.orbit.minPolarAngle = 0;
      this.orbit.maxPolarAngle = Math.PI / 4;
      this.bookWatcher.enabled = true;
    } else {
      this.orbit.minAzimuthAngle = -Infinity;
      this.orbit.maxAzimuthAngle = Infinity;
      this.orbit.minPolarAngle = 0;
      this.orbit.maxPolarAngle = Math.PI;
      this.bookWatcher.enabled = false;
    }
    this.updateView();
  };

  BookController.prototype.cmdSinglePage = function cmdSinglePage() {
    this.state.singlePage = !this.state.singlePage;
    this.updateView();
  };

  BookController.prototype.cmdSounds = function cmdSounds() {
    if (this.sounds) {
      this.sounds.togle();
    }
    this.updateView();
  };

  BookController.prototype.cmdStats = function cmdStats() {
    this.state.stats = !this.state.stats;
    if (this.state.stats) {
      (0, _libs.$)(this.view.getContainer()).append(this.Stats.domElement);
      this.visual.addRenderCallback(this.binds.stats);
    } else {
      (0, _libs.$)(this.view.getContainer()).find(this.Stats.domElement).remove();
      this.visual.removeRenderCallback(this.binds.stats);
    }
    this.updateView();
  };

  BookController.prototype.cmdLightingUp = function cmdLightingUp() {
    this.state.lighting = Math.min(this.state.lighting + this.p.lighting.delta, this.p.lighting.max);
    this.visual.setExtraLighting(this.state.lighting);
    this.updateView();
  };

  BookController.prototype.cmdLightingDown = function cmdLightingDown() {
    this.state.lighting = Math.max(this.state.lighting - this.p.lighting.delta, this.p.lighting.min);
    this.visual.setExtraLighting(this.state.lighting);
    this.updateView();
  };

  BookController.prototype.goToPage = function goToPage(page) {
    var _this4 = this;

    var pageNum = Math.max(Math.min(page, this.book.getPages() - 1), 0);
    this.state.activeSide = (pageNum + 1) % 2;
    var target = Math.max(Math.min(page - 1 + page % 2, this.book.getPages() - 1), 0),
        current = this.book.getPage(),
        flips = [],
        covs = 0;;
    if (target != current) {
      if (current === 0) {
        flips.push(1);
        current += 1;
        ++covs;
      } else if (current === this.book.getPages() - 1) {
        flips.push(-1);
        current -= 2;
        ++covs;
      }
      var cv = 0;
      if (target === 0) {
        cv = -1;
        target += 1;
        ++covs;
      } else if (target === this.book.getPages() - 1) {
        cv = 1;
        target -= 2;
        ++covs;
      }
      if (target - current) {
        flips.push(Math.ceil((target - current) / 2));
      }
      if (cv) {
        flips.push(cv);
      }
    }

    var setClb = function setClb(fl, time, clb) {
      setTimeout(function () {
        if (fl < 0) {
          _this4.startFlip(_this4.book.flipLeft(-fl, clb));
        } else {
          _this4.startFlip(_this4.book.flipRight(fl, clb));
        }
      }, time);
    };

    if (covs === 2) {
      setClb(flips[0], 0, function (block, progress, state) {
        if (state == 'finish' && progress == 1) {
          setClb(flips[flips.length - 1], 0);
        }
      });
      setClb(flips[1], 500);
    } else {
      var time = 0;
      for (var _iterator = flips, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var fl = _ref;

        setClb(fl, time);
        time += 250;
      }
    }
  };

  BookController.prototype.startFlip = function startFlip(flipRes) {
    var _this5 = this;

    return flipRes ? flipRes.then(function (block) {
      if (block) {
        _this5.dispatchAsync({
          type: 'startFlip'
        });
      }
      return block;
    }) : Promise.resolve(undefined);
  };

  BookController.prototype.endFlip = function endFlip(block) {
    this.dispatchAsync({
      type: 'endFlip'
    });
    return block;
  };

  BookController.prototype.getPage = function getPage() {
    var page = this.book.getPage();
    return page ? Math.min(this.book.getPage() + this.state.activeSide, this.book.getPages() - 1) : 0;
  };

  BookController.prototype.getPageForGUI = function getPageForGUI() {
    return (this.state.singlePage ? this.getPage() : this.book.getPage()) + 1;
  };

  BookController.prototype.inpPage = function inpPage(e, data) {
    this.goToPage(data - 1);
  };

  BookController.prototype.updateViewIfState = function updateViewIfState(block, progress, state, type) {
    if (state === 'init' || state === 'finish') {
      setTimeout(this.updateView.bind(this), 100);
    }
    if (state === 'finish') {
      this.endFlip(block);
    }
  };

  BookController.prototype.updateView = function updateView() {
    if (this.view) {
      this.view.setState('cmdZoomIn', {
        enable: this.canZoomIn(),
        visible: this.actions['cmdZoomIn'].enabled,
        active: false
      });

      this.view.setState('cmdZoomOut', {
        enable: this.canZoomOut(),
        visible: this.actions['cmdZoomOut'].enabled,
        active: false
      });

      this.view.setState('cmdDefaultZoom', {
        enable: this.canDefaultZoom(),
        visible: this.actions['cmdDefaultZoom'].enabled,
        active: this.canDefaultZoom() && Math.abs(this.bookWatcher.scale - this.p.scale.default) < this.p.eps
      });

      this.view.setState('cmdToc', {
        enable: !!this.tocCtrl,
        visible: this.actions['cmdToc'].enabled && this.tocCtrl,
        active: this.tocCtrl && this.tocCtrl.visible
      });

      var left = this.book.getLeftFlipping(),
          right = this.book.getRightFlipping();

      var flippersEnable = {
        cmdFastBackward: !!left,
        cmdBackward: !!left,
        cmdForward: !!right,
        cmdFastForward: !!right
      };

      for (var _iterator2 = Object.keys(flippersEnable), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var name = _ref2;

        this.view.setState(name, {
          enable: flippersEnable[name],
          visible: this.actions[name].enabled,
          active: false
        });
      }

      this.view.setState('inpPages', {
        visible: true,
        value: this.book.getPages()
      });

      this.view.setState('inpPage', {
        visible: true,
        enable: !this.book.isProcessing(),
        value: this.getPageForGUI()
      });

      this.view.setState('cmdSave', {
        enable: true,
        visible: this.actions['cmdSave'].enabled && !!this.p.downloadURL,
        active: false
      });

      this.view.setState('cmdPrint', {
        enable: true,
        visible: this.actions['cmdPrint'].enabled && !!this.printer,
        active: false
      });

      this.view.setState('cmdFullScreen', {
        enable: _FullScreen2.default.available(),
        visible: this.actions['cmdFullScreen'].enabled,
        active: _FullScreen2.default.available() && _FullScreen2.default.activated()
      });

      this.view.setState('widSettings', {
        enable: true,
        visible: this.actions['widSettings'].enabled,
        active: false
      });

      this.view.setState('cmdSmartPan', {
        enable: true,
        visible: this.actions['cmdSmartPan'].enabled,
        active: this.state.smartPan
      });

      this.view.setState('cmdSinglePage', {
        enable: true,
        visible: this.actions['cmdSinglePage'].enabled,
        active: this.state.singlePage
      });

      this.view.setState('cmdSounds', {
        enable: true,
        visible: this.actions['cmdSounds'].enabled && !!this.sounds,
        active: !!this.sounds && this.sounds.enabled
      });

      this.view.setState('cmdStats', {
        enable: true,
        visible: this.actions['cmdStats'].enabled,
        active: this.state.stats
      });

      this.view.setState('cmdLightingUp', {
        enable: Math.abs(this.state.lighting - this.p.lighting.max) > this.p.eps,
        visible: this.actions['cmdLightingUp'].enabled,
        active: false
      });

      this.view.setState('cmdLightingDown', {
        enable: Math.abs(this.state.lighting - this.p.lighting.min) > this.p.eps,
        visible: this.actions['cmdLightingDown'].enabled,
        active: false
      });
    }
  };

  BookController.prototype.getActions = function getActions() {
    var _this6 = this;

    return {
      cmdZoomIn: {
        activate: this.cmdZoomIn.bind(this)
      },
      cmdZoomOut: {
        activate: this.cmdZoomOut.bind(this)
      },
      cmdDefaultZoom: {
        activate: this.cmdDefaultZoom.bind(this)
      },
      cmdToc: {
        activate: this.cmdToc.bind(this)
      },
      cmdFastBackward: {
        activate: this.cmdFastBackward.bind(this)
      },
      cmdBackward: {
        activate: this.cmdBackward.bind(this)
      },
      cmdForward: {
        activate: this.cmdForward.bind(this)
      },
      cmdFastForward: {
        activate: this.cmdFastForward.bind(this)
      },
      cmdSave: {
        activate: this.cmdSave.bind(this)
      },
      cmdPrint: {
        activate: this.cmdPrint.bind(this)
      },
      cmdFullScreen: {
        activate: this.cmdFullScreen.bind(this)
      },
      cmdSmartPan: {
        activate: this.cmdSmartPan.bind(this)
      },
      cmdSinglePage: {
        activate: this.cmdSinglePage.bind(this)
      },
      cmdSounds: {
        activate: this.cmdSounds.bind(this)
      },
      cmdStats: {
        activate: this.cmdStats.bind(this)
      },
      cmdLightingUp: {
        activate: this.cmdLightingUp.bind(this)
      },
      cmdLightingDown: {
        activate: this.cmdLightingDown.bind(this)
      },
      cmdPanLeft: {
        activate: function activate(e) {
          return _this6.orbit.actions.pan(e, {
            state: 'move',
            dx: -_this6.p.pan.speed,
            dy: 0
          });
        }
      },
      cmdPanRight: {
        activate: function activate(e) {
          return _this6.orbit.actions.pan(e, {
            state: 'move',
            dx: _this6.p.pan.speed,
            dy: 0
          });
        }
      },
      cmdPanUp: {
        activate: function activate(e) {
          return _this6.orbit.actions.pan(e, {
            state: 'move',
            dx: 0,
            dy: -_this6.p.pan.speed
          });
        }
      },
      cmdPanDown: {
        activate: function activate(e) {
          return _this6.orbit.actions.pan(e, {
            state: 'move',
            dx: 0,
            dy: _this6.p.pan.speed
          });
        }
      },
      mouseCmdRotate: {
        activate: this.orbit.actions.rotate
      },
      mouseCmdDragZoom: {
        activate: function activate(e, data) {
          if (data.dy > 0) {
            _this6.cmdZoomOut();
          } else if (data.dy < 0) {
            _this6.cmdZoomIn();
          }
        }
      },
      mouseCmdPan: {
        activate: this.orbit.actions.pan
      },
      mouseCmdWheelZoom: {
        activate: function activate(e) {
          e.preventDefault();
          if (e.deltaY < 0) {
            _this6.cmdZoomOut();
          } else if (e.deltaY > 0) {
            _this6.cmdZoomIn();
          }
        }
      },
      touchCmdRotate: {
        activate: function activate(e, data) {
          e.preventDefault();
          _this6.orbit.actions.rotate(e, data);
        }
      },
      touchCmdZoom: {
        activate: function activate(e, data) {
          e.preventDefault();
          if (data.dy > 0) {
            _this6.cmdZoomOut();
          } else if (data.dy < 0) {
            _this6.cmdZoomIn();
          }
        }
      },
      touchCmdPan: {
        activate: function activate(e, data) {
          e.preventDefault();
          _this6.orbit.actions.pan(e, data);
        }
      },
      widSettings: {
        activate: function activate() {
          return undefined;
        }
      }
    };
  };

  BookController.prototype.bindActions = function bindActions() {
    this.eToA = new _EventsToActions2.default((0, _libs.$)(this.visual.element));
    this.eToA.addAction(function (e) {
      return e.preventDefault();
    }, 'contextmenu', _EventsToActions2.default.mouseButtons.Right, 0);

    this.actions = this.getActions();
    for (var _iterator3 = Object.keys(this.actions), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
      var _ref3;

      if (_isArray3) {
        if (_i3 >= _iterator3.length) break;
        _ref3 = _iterator3[_i3++];
      } else {
        _i3 = _iterator3.next();
        if (_i3.done) break;
        _ref3 = _i3.value;
      }

      var name = _ref3;

      var action = _extends({}, this.actions[name], this.p.actions[name]);
      this.actions[name] = action;
      if (action.enabled) {
        var flags = action.flags || 0;
        if (action.type) {
          this.eToA.addAction(action.activate, action.type, action.code, flags);
        } else if (action.code !== undefined) {
          this.eToA.addAction(action.activate, 'keydown', action.code, flags);
        }
      }
    }
  };

  BookController.prepareProps = function prepareProps(props) {
    return BookController.calcProps(BookController.mergeProps((0, _bookController.props)(), props));
  };

  BookController.setActions = function setActions(props, actions) {
    for (var _iterator4 = Object.keys(actions || {}), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
      var _ref4;

      if (_isArray4) {
        if (_i4 >= _iterator4.length) break;
        _ref4 = _iterator4[_i4++];
      } else {
        _i4 = _iterator4.next();
        if (_i4.done) break;
        _ref4 = _i4.value;
      }

      var name = _ref4;

      props.actions[name] = _extends({}, props.actions[name], actions[name]);
    }
  };

  BookController.mergeProps = function mergeProps(first, second) {
    second = second || {};
    var props = _extends({}, first, second, {
      scale: _extends({}, first.scale, second.scale),
      lighting: _extends({}, first.lighting, second.lighting),
      pan: _extends({}, first.pan, second.pan),
      actions: _extends({}, first.actions)
    });
    BookController.setActions(props, first.actions);
    BookController.setActions(props, second.actions);
    return props;
  };

  BookController.calcProps = function calcProps(props) {
    props.scale.delta = (props.scale.max - props.scale.min) / props.scale.levels;
    props.lighting.delta = (props.lighting.max - props.lighting.min) / props.lighting.levels;
    return props;
  };

  return BookController;
}(_Controller3.default);

exports.default = BookController;

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _libs = __webpack_require__(1);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BookPrinter = function () {
  function BookPrinter(context, book, styleSheet) {
    _classCallCheck(this, BookPrinter);

    this.book = book;
    this.styleSheet = styleSheet;
    this.wnd = context.wnd;
    this.doc = context.doc;
    this.pageCallback = book.getPageCallback();
    var test = this.pageCallback(0);
    this.type = test.type;
    if (this.type === 'pdf') {
      this.pdfSrc = test.src.src;
    }
  }

  BookPrinter.prototype.cancel = function cancel() {
    this.canceled = true;
  };

  BookPrinter.prototype.dispose = function dispose() {
    if (this.frame) {
      this.frame.remove();
      delete this.frame;
    }
  };

  BookPrinter.prototype.print = function print() {
    var _this = this;

    delete this.canceled;
    if (this.type === 'pdf') {
      (function () {
        var printWnd = void 0,
            callManually = false;
        if (_this.useIFrame()) {
          callManually = !!_this.frame;
          if (!_this.frame) {
            _this.frame = (0, _libs.$)('<iframe src="' + _this.pdfSrc + '" style="display: none;"></iframe>').appendTo(_this.doc.body);
          }
          printWnd = _this.frame[0].contentWindow;
        } else {
          printWnd = _this.wnd.open(_this.pdfSrc);
        }
        if (callManually) {
          printWnd.print();
        } else {
          (0, _libs.$)(printWnd).on('load', function () {
            try {
              printWnd.print();
            } catch (e) {
              console.error(e);
            }
          });
        }
      })();
    } else {
      this.renderContent().then(function (content) {
        var printWnd = _this.wnd.open(),
            printDoc = printWnd.document,
            html = '\n            <!DOCTYPE html>\n            <html>\n              <head>\n                <meta charset="utf-8">\n                <title>3D FlipBook - Printing</title>\n                ' + content.head + '\n                <script type="text/javascript">\n                  function printDocument() {\n                    window.print();\n                    window.close();\n                  }\n                  function init() {\n                    setTimeout(printDocument, 100);\n                  }\n                </script>\n              </head>\n              <body onload="init()">\n                ' + content.body + '\n              </body>\n            </html>\n          ';
        printDoc.open();
        printDoc.write(html);
        printDoc.close();
      }).catch(function (e) {
        return console.warn('3D FlipBook - Printing was canceled');
      });
    }
  };

  BookPrinter.prototype.progress = function progress(v) {
    if (this.canceled) {
      throw 'Cancel Printing';
    }
    if (this.onProgress) {
      this.onProgress(Math.floor(v * 100));
    }
  };

  BookPrinter.prototype.renderContent = function renderContent() {
    var _this2 = this;

    var pages = this.book.getPages(),
        head = new Set(),
        body = [];
    var done = Promise.resolve();

    var _loop = function _loop(page) {
      var info = _this2.pageCallback(page);
      if (info.type === 'image') {
        done = done.then(function () {
          _this2.progress(page / pages);
          return _this2.renderImage(head, body, info.src);
        });
      } else if (info.type === 'html') {
        done = done.then(function () {
          _this2.progress(page / pages);
          return _this2.renderHtml(head, body, info.src);
        });
      }
    };

    for (var page = 0; page < pages; ++page) {
      _loop(page);
    }
    return done.then(function () {
      _this2.progress(1);
      return { head: _this2.renderHead(head), body: body.join('\n') };
    });
  };

  BookPrinter.wrap = function wrap(content) {
    return '<div class="fb3d-printer-page">' + content + '</div>';
  };

  BookPrinter.prototype.renderImage = function renderImage(head, body, src) {
    body.push(BookPrinter.wrap('<img src="' + src + '" />'));
  };

  BookPrinter.prototype.renderHtml = function renderHtml(head, body, src) {
    return new Promise(function (resolve, reject) {
      _libs.$.get(src, function (html) {
        var links = html.match(/<link.*?>/ig) || [];
        for (var _iterator = links, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var link = _ref;

          if (link.match(/stylesheet/i)) {
            var href = link.match(/href\s*=\s*['"](.*)['"]/i);
            if (href) {
              head.add(href[1]);
            }
          }
        }
        var content = html.match(/<body.*?>([\S\s]*)<\/body>/i);
        if (content) {
          body.push(BookPrinter.wrap(content[1]));
        }
        resolve();
      }).fail(function (e) {
        console.error(e.responseText);
        reject();
      });
    });
  };

  BookPrinter.prototype.renderHead = function renderHead(head) {
    var content = [];
    head.forEach(function (k) {
      return content.push('<link rel="stylesheet" href="' + k + '">');
    });
    content.push(this.styleSheet ? '<link rel="stylesheet" href="' + this.styleSheet + '">' : BookPrinter.defaultStyleSheet());
    return content.join('\n');
  };

  BookPrinter.prototype.useIFrame = function useIFrame() {
    var isChromium = this.wnd.chrome,
        winNav = this.wnd.navigator,
        vendorName = winNav.vendor,
        isIEedge = winNav.userAgent.indexOf("Edge") > -1,
        isIOSChrome = winNav.userAgent.match("CriOS");
    var use = void 0;
    if (isIOSChrome) {
      use = true;
    } else if (isChromium && vendorName === 'Google Inc.' && !isIEedge) {
      use = true;
    } else {
      use = false;
    }
    return use;
  };

  BookPrinter.defaultStyleSheet = function defaultStyleSheet() {
    return '\n      <style type="text/css">\n        body {\n          margin: 0;\n          padding: 0;\n        }\n        .fb3d-printer-page {\n          page-break-after: always;\n        }\n      </style>\n    ';
  };

  return BookPrinter;
}();

exports.default = BookPrinter;

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _libs = __webpack_require__(1);

var _View2 = __webpack_require__(62);

var _View3 = _interopRequireDefault(_View2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BookView = function (_View) {
  _inherits(BookView, _View);

  function BookView(container, onLoad, template, handler) {
    _classCallCheck(this, BookView);

    return _possibleConstructorReturn(this, _View.call(this, container, onLoad, template, handler));
  }

  BookView.prototype.initView = function initView() {
    this.view = this.container.find('.view');
    this.bookmarksView = this.container.find('.widBookmarks');
    this.thumbnailsView = this.container.find('.widThumbnails');
    this.searchView = this.container.find('.widSearch');
  };

  BookView.prototype.getHandlers = function getHandlers(id) {
    var _this2 = this;

    var handlers = void 0;
    if (id === 'inpPage') {
      handlers = [{
        inpPage: function inpPage(e, data) {
          return _this2.callLater(_View.prototype.getHandlers.call(_this2, id), id, e, data, BookView.PAGE_HANDLER_DELAY);
        }
      }];
    } else {
      handlers = _View.prototype.getHandlers.call(this, id);
    }
    return handlers;
  };

  BookView.prototype.onItemStateChanged = function onItemStateChanged(id, state) {
    if (id === 'cmdFullScreen') {
      if (state.active) {
        this.parentContainer.addClass('fullscreen');
      } else {
        this.parentContainer.removeClass('fullscreen');
      }
    }
  };

  BookView.prototype.getView = function getView() {
    return this.view;
  };

  BookView.prototype.getBookmarksView = function getBookmarksView() {
    return this.bookmarksView;
  };

  BookView.prototype.getThumbnailsView = function getThumbnailsView() {
    return this.thumbnailsView;
  };

  BookView.prototype.getSearchView = function getSearchView() {
    return this.searchView;
  };

  BookView.prototype.getForms = function getForms() {
    return [];
  };

  BookView.prototype.getLinks = function getLinks() {
    return ['cmdZoomIn', 'cmdZoomOut', 'cmdDefaultZoom', 'cmdToc', 'cmdFastBackward', 'cmdBackward', 'cmdForward', 'cmdFastForward', 'cmdSave', 'cmdPrint', 'cmdFullScreen', 'cmdSmartPan', 'cmdSinglePage', 'cmdSounds', 'cmdStats', 'cmdLightingUp', 'cmdLightingDown', 'cmdCloseToc', 'cmdBookmarks', 'cmdSearch', 'cmdThumbnails'];
  };

  BookView.prototype.getWidgets = function getWidgets() {
    return ['widLoadingProgress', 'widFloatWnd', 'widTocMenu', 'widBookmarks', 'widThumbnails', 'widSearch', 'widSettings'];
  };

  BookView.prototype.getInputs = function getInputs() {
    return ['inpPage', 'inpPages'];
  };

  BookView.prototype.getTexts = function getTexts() {
    return ['txtLoadingProgress'];
  };

  BookView.prototype.getTemplate = function getTemplate() {
    return {
      html: 'templates/default-book-view.html',
      styles: ['css/black-book-view.css'],
      links: [{
        rel: 'stylesheet',
        href: 'css/font-awesome.min.css'
      }],
      script: 'js/default-book-view.js'
    };
  };

  return BookView;
}(_View3.default);

BookView.PAGE_HANDLER_DELAY = 1000;
exports.default = BookView;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _BookPropsBuilder2 = __webpack_require__(7);

var _BookPropsBuilder3 = _interopRequireDefault(_BookPropsBuilder2);

var _ImageFactory = __webpack_require__(6);

var _ImageFactory2 = _interopRequireDefault(_ImageFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ClbBookPropsBuilder = function (_BookPropsBuilder) {
  _inherits(ClbBookPropsBuilder, _BookPropsBuilder);

  function ClbBookPropsBuilder(context, pageCallback, pages, onReady) {
    _classCallCheck(this, ClbBookPropsBuilder);

    var _this = _possibleConstructorReturn(this, _BookPropsBuilder.call(this, onReady));

    _this.calcSheets(pages);
    _this.pageCallback = pageCallback;
    _this.binds = {
      pageCallback: pageCallback.bind(_this)
    };
    _this.imageFactory = new _ImageFactory2.default(context);

    if (pages > 0) {
      (function () {
        var test = _this.imageFactory.build(pageCallback(0), 0, _this.defaults.sheet.widthTexels, _this.defaults.sheet.heightTexels, _this.defaults.sheet.color);
        test.onLoad = function () {
          _this.calcProps(test.width, test.height);
          test.dispose();
          _this.ready();
        };
      })();
    } else {
      _this.props = _this.defaults;
      _this.ready();
    }
    return _this;
  }

  return ClbBookPropsBuilder;
}(_BookPropsBuilder3.default);

exports.default = ClbBookPropsBuilder;

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _SheetBlock2 = __webpack_require__(8);

var _SheetBlock3 = _interopRequireDefault(_SheetBlock2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Cover = function (_SheetBlock) {
  _inherits(Cover, _SheetBlock);

  function Cover(visual, p, angle, state) {
    _classCallCheck(this, Cover);

    return _possibleConstructorReturn(this, _SheetBlock.call(this, visual, p, 0, 1, angle, state));
  }

  Cover.prototype.getProps = function getProps() {
    return _extends({}, this.p.cover, {
      sheets: 1
    });
  };

  Cover.prototype.loadPoints = function loadPoints() {
    var openedInterpolationIndeces = [[2, 3, 4], [2, 3, 4, 5, 6]],
        closedInterpolationIndeces = [[0, 1, 2], [0, 1, 2]],
        interpolationPoints = [{
      x: [[0, 0.2877, 0.6347, 0.8174, 1.0000], [0, 0.2831, 0.6256, 0.8082, 0.9909], [0, 0.2603, 0.5936, 0.7763, 0.9589], [0, 0.1370, 0.3881, 0.5342, 0.6758], [0, 0, 0, 0, 0]],
      y: [[0, 0, 0, 0, 0], [0, 0.02, 0.005, -0.001, -0.0025], [0, 0.04, 0.01, -0.002, -0.005], [0, 0.2466, 0.4795, 0.5708, 0.6758], [0, 0.2877, 0.6347, 0.8174, 1.0000]]
    }, {
      x: [[0, 0.2877, 0.6347, 0.8174, 1.0000], [0, 0.2831, 0.6256, 0.8082, 0.9909], [0, 0.2603, 0.5936, 0.7763, 0.9589], [0.000, 0.233, 0.563, 0.746, 0.927], [0.000, 0.144, 0.433, 0.613, 0.796], [0.000, 0.070, 0.288, 0.455, 0.626], [0, 0, 0, 0, 0]],
      y: [[0, 0, 0, 0, 0], [0, 0.02, 0.005, -0.001, -0.0025], [0, 0.04, 0.01, -0.002, -0.005], [0.000, 0.168, 0.269, 0.270, 0.255], [0.000, 0.245, 0.435, 0.458, 0.460], [0.000, 0.278, 0.544, 0.614, 0.673], [0, 0.2877, 0.6347, 0.8174, 1.0000]]
    }];
    return {
      interpolationPoints: interpolationPoints,
      openedInterpolationIndeces: openedInterpolationIndeces,
      closedInterpolationIndeces: closedInterpolationIndeces
    };
  };

  return Cover;
}(_SheetBlock3.default);

exports.default = Cover;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _SheetCssLayer = __webpack_require__(36);

var _SheetCssLayer2 = _interopRequireDefault(_SheetCssLayer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CssLayersManager = function () {
  function CssLayersManager(book) {
    _classCallCheck(this, CssLayersManager);

    this.book = book;
    this.visual = book.visual;
    this.pageManager = book.pageManager;
    this.wrappers = {};
  }

  CssLayersManager.prototype.getActives = function getActives() {
    var page = this.book.getPage(),
        pages = this.book.getPages();
    return page === 0 || page === pages - 1 ? [page] : [page, page + 1];
  };

  CssLayersManager.prototype.dispose = function dispose() {
    for (var _iterator = Object.values(this.wrappers), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var w = _ref;

      w.layers.forEach(function (l) {
        return l.dispose();
      });
    }
    delete this.wrappers;
  };

  CssLayersManager.prototype.show = function show() {
    var _this = this;

    this.hidden = false;

    var _loop = function _loop() {
      if (_isArray2) {
        if (_i2 >= _iterator2.length) return 'break';
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) return 'break';
        _ref2 = _i2.value;
      }

      var n = _ref2;

      var w = _this.wrappers[n];
      if (w) {
        if (w.state === 'ready' && w.layers.length) {
          (function () {
            var block = _this.book.getBlockByPage(n);
            w.layers.forEach(function (l) {
              if (l.isHidden()) {
                l.update(block);
                l.show();
              }
            });
          })();
        }
      } else {
        (function () {
          var w = _this.wrappers[n] = {
            state: 'loading',
            layers: []
          };
          Promise.resolve().then(function () {
            _this.pageManager.getLayers(n, function (layers) {
              if (layers.length && _this.wrappers) {
                var block = _this.book.getBlockByPage(n);
                for (var _iterator3 = layers, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
                  var _ref3;

                  if (_isArray3) {
                    if (_i3 >= _iterator3.length) break;
                    _ref3 = _iterator3[_i3++];
                  } else {
                    _i3 = _iterator3.next();
                    if (_i3.done) break;
                    _ref3 = _i3.value;
                  }

                  var l = _ref3;

                  var sl = new _SheetCssLayer2.default(_this.visual, block);
                  w.layers.push(sl);
                  sl.set(l.css, l.html, l.js);
                }
                setTimeout(function () {
                  if (!_this.hidden && ~_this.getActives().indexOf(n)) {
                    w.layers.forEach(function (l) {
                      return l.show();
                    });
                  }
                }, 10);
              }
              w.state = 'ready';
            });
          });
        })();
      }
    };

    for (var _iterator2 = this.getActives(), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      var _ret = _loop();

      if (_ret === 'break') break;
    }
  };

  CssLayersManager.prototype.hide = function hide() {
    this.hidden = true;
    var wait = [];
    for (var _iterator4 = Object.values(this.wrappers), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
      var _ref4;

      if (_isArray4) {
        if (_i4 >= _iterator4.length) break;
        _ref4 = _iterator4[_i4++];
      } else {
        _i4 = _iterator4.next();
        if (_i4.done) break;
        _ref4 = _i4.value;
      }

      var _w = _ref4;

      _w.layers.forEach(function (l) {
        return wait.push(l.hide());
      });
    }
    return Promise.all(wait);
  };

  return CssLayersManager;
}();

exports.default = CssLayersManager;

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(1);

var _Cache = __webpack_require__(12);

var _Cache2 = _interopRequireDefault(_Cache);

var _LoadingAnimation = __webpack_require__(50);

var _LoadingAnimation2 = _interopRequireDefault(_LoadingAnimation);

var _ImageFactory = __webpack_require__(6);

var _ImageFactory2 = _interopRequireDefault(_ImageFactory);

var _BaseMathUtils = __webpack_require__(2);

var _BaseMathUtils2 = _interopRequireDefault(_BaseMathUtils);

var _TextureAnimator = __webpack_require__(58);

var _TextureAnimator2 = _interopRequireDefault(_TextureAnimator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PageManager = function () {
  function PageManager(visual, book, p) {
    _classCallCheck(this, PageManager);

    this.visual = visual;
    this.book = book;
    this.pageQuery = '';
    this.p = p;
    this.pageCache = new _Cache2.default(p.cachedPages);
    this.resourcesCache = new _Cache2.default();
    this.canvas = (0, _libs.$)('<canvas>')[0];
    this.imageFactory = new _ImageFactory2.default(_extends({}, visual, { dispatchEvent: book.dispatchEvent.bind(book), renderCanvas: this.canvas, renderCanvasCtx: this.canvas.getContext('2d') }), this.resourcesCache);

    this.loadings = [];
    this.renderQueue = [];
    this.pageRequests = [];
    this.predictedRequests = [];

    this.tmpMaterial = new _libs.THREE.MeshBasicMaterial();
    visual.addObject(new _libs.THREE.Mesh(new _libs.THREE.PlaneGeometry(0, 0), this.tmpMaterial));

    this.loading = {};
    this.loading[p.cover.color] = this.createLoadingTexture(p.cover);
    if (p.page.color !== p.cover.color) {
      this.loading[p.page.color] = this.createLoadingTexture(p.page);
    }

    this.turnOnEvents();

    visual.addRenderCallback(this.update.bind(this));

    setInterval(this.updateRenderQueue.bind(this), 250);
  }

  PageManager.prototype.createLoadingTexture = function createLoadingTexture(p) {
    var spriteTiles = 6,
        scale = Math.sqrt(4.5 * 210 * 4.5 * 297 / (p.widthTexels * p.heightTexels)),
        animation = new _LoadingAnimation2.default(scale * p.widthTexels, scale * p.heightTexels, p.color),
        animator = new _TextureAnimator2.default(animation.createSprite(spriteTiles), spriteTiles, 1, spriteTiles, 0.2);
    animation.dispose();
    return animator;
  };

  PageManager.prototype.dispose = function dispose() {
    this.turnOffEvents();
    for (var _iterator = Object.keys(this.loading), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var color = _ref;

      this.loading[color].dispose();
    }
    delete this.loading;
    this.resourcesCache.dispose();
    this.pageCache.dispose();
    this.canvas.height = this.canvas.width = 0;
    delete this.canvas;
  };

  PageManager.prototype.isCover = function isCover(n) {
    return n < 2 || n >= 2 * (this.p.sheets + 1);
  };

  PageManager.prototype.update = function update(dt) {
    var loading = {};
    for (var _iterator2 = this.loadings, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var o = _ref2;

      if (o.isActive()) {
        loading[o.color] = true;;
      }
    }
    for (var _iterator3 = Object.keys(loading), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
      var _ref3;

      if (_isArray3) {
        if (_i3 >= _iterator3.length) break;
        _ref3 = _iterator3[_i3++];
      } else {
        _i3 = _iterator3.next();
        if (_i3.done) break;
        _ref3 = _i3.value;
      }

      var color = _ref3;

      this.loading[color].update(dt);
    }
  };

  PageManager.prototype.removeFromLoadings = function removeFromLoadings(o) {
    var i = this.loadings.indexOf(o);
    if (~i) {
      this.loadings.splice(i, 1);
    }
  };

  PageManager.prototype.removeFromRenderQueue = function removeFromRenderQueue(o) {
    var i = this.renderQueue.indexOf(o);
    if (~i) {
      this.renderQueue.splice(i, 1);
    }
  };

  PageManager.prototype.refreshPageQuery = function refreshPageQuery(n) {
    var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

    this.pageQuery = query;
    var object = this.pageCache.get(n);
    if (object && object.wrapper && object.wrapper.setQuery) {
      if (!this.pageCache.remove(n)) {
        object.wrapper.setQuery(query);
      }
    }
  };

  PageManager.prototype.getLayers = function getLayers(n, clb) {
    var _this = this;

    if (this.p.cssLayersLoader) {
      this.p.cssLayersLoader(n, function () {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var object = _this.pageCache.get(n);
        if (object) {
          if (object.state !== 'active') {
            object.pendings.push({ clb: clb, args: args });
          } else {
            clb.apply(undefined, args);
          }
        }
      });
    } else {
      clb([]);
    }
  };

  PageManager.prototype.resolvePendings = function resolvePendings(pendings) {
    for (var _iterator4 = pendings, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
      var _ref4;

      if (_isArray4) {
        if (_i4 >= _iterator4.length) break;
        _ref4 = _iterator4[_i4++];
      } else {
        _i4 = _iterator4.next();
        if (_i4.done) break;
        _ref4 = _i4.value;
      }

      var p = _ref4;

      try {
        p.clb.apply(p, p.args);
      } catch (e) {
        console.error(e);
      }
    }
    pendings.splice(0, pendings.length);
  };

  PageManager.prototype.load = function load(material, n) {
    var _this2 = this;

    var pi = this.p.pageCallback(n),
        p = this.isCover(n) ? this.p.cover : this.p.page;
    var o = {
      texture: new _libs.THREE.Texture(),
      wrapper: null,
      state: 'loading',
      locked: function locked(n) {
        return o.state === 'loading' || o.state === 'rendering' || _this2.book.isActivePage(n);
      },
      color: p.color,
      isActive: function isActive() {
        return _this2.book.isActivePage(n);
      },
      dispose: function dispose() {
        _this2.removeFromLoadings(o);
        _this2.removeFromRenderQueue(o);
        if (o.wrapper && o.wrapper.dispose) {
          o.wrapper.dispose();
        }
        o.texture.dispose();
        delete o.texture;
        delete o.wrapper;
      },
      pendings: []
    };
    o.texture.minFilter = _libs.THREE.LinearFilter;
    this.loadings.push(o);
    this.setMaterial(o, material);

    Promise.resolve().then(function () {
      if (o.texture) {
        var widthTexels = pi.widthTexels || p.widthTexels,
            heightTexels = pi.heightTexels || p.heightTexels;
        o.wrapper = _this2.imageFactory.build(pi, pi.number === undefined ? n : pi.number, widthTexels, heightTexels, p.color, _this2.p.injector);
        if (o.wrapper.setQuery) {
          o.wrapper.setQuery(_this2.pageQuery);
        }
        o.simulate = pi.interactive ? (o.wrapper.simulate || function () {
          return undefined;
        }).bind(o.wrapper) : undefined;
        o.wrapper.onLoad = function () {
          if (o.state !== 'queuedForRender') {
            o.state = 'queuedForRender';
            _this2.renderQueue.push(o);
            _this2.updateRenderQueue();
          }
        };
        o.wrapper.onChange = function (image) {
          if (o.texture) {
            _this2.removeFromLoadings(o);
            if (o.material) {
              o.material.map = o.texture;
              o.material.needsUpdate = true;
            }
            o.texture.image = image;
            o.texture.needsUpdate = true;
            o.texture.onUpdate = function () {
              if (o.state !== 'queuedForRender') {
                o.state = 'active';
                _this2.resolvePendings(o.pendings);
              }
              delete _this2.rendering;
              _this2.updateRenderQueue();
            };
            _this2.tmpMaterial.map = o.texture;
            _this2.tmpMaterial.needsUpdate = true;
          }
        };
      }
    });
    return this.pageCache.put(n, o);
  };

  PageManager.prototype.updateRenderQueue = function updateRenderQueue() {
    var p = this.book.p;
    if (!this.rendering && (p.renderWhileFlipping || !this.book.isProcessing())) {
      for (var _iterator5 = this.renderQueue, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
        var _ref5;

        if (_isArray5) {
          if (_i5 >= _iterator5.length) break;
          _ref5 = _iterator5[_i5++];
        } else {
          _i5 = _iterator5.next();
          if (_i5.done) break;
          _ref5 = _i5.value;
        }

        var o = _ref5;

        if (o.isActive()) {
          this.rendering = o;
          break;
        }
      }
      if (p.renderInactivePages) {
        this.rendering = this.rendering || this.renderQueue[0];
      }
      if (this.rendering) {
        this.removeFromRenderQueue(this.rendering);
        this.rendering.state = 'rendering';
        this.rendering.wrapper.startRender();
      }
    }
  };

  PageManager.prototype.turnOnEvents = function turnOnEvents() {
    this.transferEvents = true;
  };

  PageManager.prototype.turnOffEvents = function turnOffEvents() {
    var mouseup = _libs.$.Event('mouseup'),
        mouseout = _libs.$.Event('mouseout');
    this.pageCache.forEach(function (ent) {
      var object = ent[1];
      if (object.simulate) {
        object.simulate(mouseup, undefined, 0, 0);
        object.simulate(mouseout, undefined, 0, 0);
      }
    });
    this.transferEvents = false;
  };

  PageManager.prototype.transferEventToTexture = function transferEventToTexture(n, e, data) {
    var _this3 = this;

    if (this.transferEvents) {
      (function () {
        var toObject = _this3.getOrLoadTextureObject(undefined, n),
            uv = data.uv,
            toDoc = toObject.wrapper.getSimulatedDoc();
        _this3.pageCache.forEach(function (ent) {
          var object = ent[1];
          if (object.simulate) {
            object.simulate(e, toDoc, uv.x, uv.y);
          }
        });
      })();
    }
  };

  PageManager.prototype.loadPredictedPages = function loadPredictedPages() {
    this.predictedRequests = _BaseMathUtils2.default.predict(this.pageRequests, this.p.preloadPages);
    for (var _iterator6 = this.predictedRequests, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
      var _ref6;

      if (_isArray6) {
        if (_i6 >= _iterator6.length) break;
        _ref6 = _iterator6[_i6++];
      } else {
        _i6 = _iterator6.next();
        if (_i6.done) break;
        _ref6 = _i6.value;
      }

      var p = _ref6;

      if (p < this.book.getPages() && !this.pageCache.get(p)) {
        this.load(undefined, p);
      }
    }
  };

  PageManager.prototype.addPageRequest = function addPageRequest(n) {
    this.pageRequests.push(n);
    if (this.pageRequests.length > this.p.pagesForPredicting) {
      this.pageRequests.shift();
    }
    Promise.resolve().then(this.loadPredictedPages.bind(this));
  };

  PageManager.prototype.setMaterial = function setMaterial(o, material) {
    this.pageCache.forEach(function (e) {
      var ob = e[1];
      if (o !== ob && ob.material === material) {
        delete ob.material;
      }
    });
    if (material && material !== o.material) {
      o.material = material;
      material.map = o.texture.image ? o.texture : this.loading[o.color].texture;
      material.needsUpdate = true;
    }
  };

  PageManager.prototype.getOrLoadTextureObject = function getOrLoadTextureObject(material, n) {
    var object = this.pageCache.get(n);
    if (!object) {
      object = this.load(material, n);
      this.addPageRequest(n);
    } else {
      this.setMaterial(object, material);
    }

    return object;
  };

  PageManager.prototype.setTexture = function setTexture(material, n) {
    if (~this.predictedRequests.indexOf(n)) {
      this.addPageRequest(n);
    }
    this.getOrLoadTextureObject(material, n);
  };

  return PageManager;
}();

exports.default = PageManager;

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _BookPropsBuilder2 = __webpack_require__(7);

var _BookPropsBuilder3 = _interopRequireDefault(_BookPropsBuilder2);

var _Pdf = __webpack_require__(17);

var _Pdf2 = _interopRequireDefault(_Pdf);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PdfBookPropsBuilder = function (_BookPropsBuilder) {
  _inherits(PdfBookPropsBuilder, _BookPropsBuilder);

  function PdfBookPropsBuilder(src, onReady) {
    _classCallCheck(this, PdfBookPropsBuilder);

    var _this = _possibleConstructorReturn(this, _BookPropsBuilder.call(this, onReady));

    _this.pdf = new _Pdf2.default(src);
    _this.pageDescription = {
      type: 'pdf',
      src: _this.pdf,
      interactive: true
    };
    _this.binds = {
      pageCallback: _this.pageCallback.bind(_this)
    };
    _this.pdf.getHandler(_this.init.bind(_this));
    return _this;
  }

  PdfBookPropsBuilder.prototype.dispose = function dispose() {
    this.pdf.dispose();
    _BookPropsBuilder.prototype.dispose.call(this);
  };

  PdfBookPropsBuilder.prototype.init = function init(handler) {
    var _this2 = this;

    this.calcSheets(this.pdf.getPagesNum());
    if (this.pdf.getPagesNum() > 0) {
      handler.getPage(1).then(function (page) {
        var size = _Pdf2.default.getPageSize(page);
        _this2.calcProps(size.width, size.height);
        _this2.ready();
      }).catch(function (e) {
        console.error(e);
      });
    } else {
      this.props = this.defaults;
      this.ready();
    }
  };

  PdfBookPropsBuilder.prototype.pageCallback = function pageCallback(n) {
    return this.pageDescription;
  };

  return PdfBookPropsBuilder;
}(_BookPropsBuilder3.default);

exports.default = PdfBookPropsBuilder;

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _libs = __webpack_require__(1);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PdfLinksHandler = function () {
  function PdfLinksHandler(pdf, ctrl, element) {
    _classCallCheck(this, PdfLinksHandler);

    this.pdf = pdf;
    this.ctrl = ctrl;
    this.element = (0, _libs.$)(element);
    this.cursors = [];
  }

  PdfLinksHandler.prototype.dispose = function dispose() {};

  PdfLinksHandler.prototype.setHandler = function setHandler(handler) {
    this.handler = handler;
  };

  PdfLinksHandler.prototype.defaultHandler = function defaultHandler(type, destination) {
    if (type === 'internal') {
      this.ctrl.goToPage(destination);
    } else if (type === 'external') {
      window.open(destination, '_blank');
    }
  };

  PdfLinksHandler.prototype.callHandlers = function callHandlers(type, destination) {
    if (!this.handler || !this.handler(type, destination)) {
      this.defaultHandler(type, destination);
    }
  };

  PdfLinksHandler.prototype.handleEvent = function handleEvent(data) {
    var _this = this;

    var e = data.event,
        anno = data.annotation;
    switch (e.type) {
      case 'mouseover':
        {
          this.cursors.push(this.element.css('cursor'));
          this.element.css('cursor', 'pointer');
          break;
        }
      case 'mouseout':
        {
          this.element.css('cursor', this.cursors.pop() || '');
          break;
        }
      case 'click':
        {
          if (anno.url) {
            this.callHandlers('external', anno.url);
          } else if (anno.dest) {
            var destPromise = void 0;
            if (typeof anno.dest === 'string') {
              destPromise = this.pdf.handler.getDestination(anno.dest);
            } else {
              destPromise = Promise.resolve(anno.dest);
            }
            destPromise.then(function (dest) {
              return typeof dest[0] === 'number' ? dest[0] : _this.pdf.handler.getPageIndex(dest[0]);
            }).then(function (number) {
              return _this.callHandlers('internal', number);
            }).catch(function () {
              return console.error('Bad link');
            });
          }
          break;
        }
    }
  };

  return PdfLinksHandler;
}();

exports.default = PdfLinksHandler;

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _Finder = __webpack_require__(16);

var _Finder2 = _interopRequireDefault(_Finder);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SearchEngine = function () {
  function SearchEngine(pageCallback, pages) {
    _classCallCheck(this, SearchEngine);

    this.pageCallback = pageCallback;
    this.pages = pages;
    this.results = [];
  }

  SearchEngine.prototype.setQuery = function setQuery(query) {
    this.query = query;
    this.update = true;
    this.process();
  };

  SearchEngine.prototype.process = function process() {
    var _this = this;

    if (this.update) {
      var results = this.results;
      this.results = [];
      if (this.onPageHitsChanged) {
        for (var _iterator = results, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var res = _ref;

          this.onPageHitsChanged(undefined, '');
        }
      }
      this.update = false;
      this.page = 0;
      this.stamp = Date.now();
      if (this.query.length > 1) {
        this.process();
      }
    } else {
      if (this.page < this.pages) {
        (function () {
          var stamp = _this.stamp;
          _this.find(_this.pageCallback(_this.page)).then(function (contexts) {
            if (stamp === _this.stamp) {
              if (contexts.length) {
                _this.results.push({
                  page: _this.page,
                  contexts: contexts
                });
              }
              ++_this.page;
              if (_this.onPageHitsChanged) {
                _this.onPageHitsChanged(_this.page, _this.query);
              }
              _this.process();
            }
          });
        })();
      }
    }
  };

  SearchEngine.prototype.find = function find(pi) {
    var _this2 = this;

    var next = void 0;
    if (pi.type === 'pdf') {
      next = new Promise(function (resolve) {
        pi.src.getHandler(function (handler) {
          handler.getPage((pi.number === undefined ? _this2.page : pi.number) + 1).then(function (page) {
            page.getTextContent().then(function (textContent) {
              resolve(new _Finder2.default(textContent.items.map(function (item) {
                return item.str;
              }), _this2.query, { hits: false }).getContexts());
            });
          }).catch(function () {
            return resolve([]);
          });
        });
      });
    } else {
      next = Promise.resolve([]);
    }
    return next;
  };

  return SearchEngine;
}();

exports.default = SearchEngine;

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _CSSLayer = __webpack_require__(11);

var _CSSLayer2 = _interopRequireDefault(_CSSLayer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SheetCssLayer = function () {
  function SheetCssLayer(visual, block) {
    _classCallCheck(this, SheetCssLayer);

    this.visual = visual;
    var size = block.getTopSize();
    this.layer = new _CSSLayer2.default(size.width, size.height);

    this.update(block);
    this.visual.addCssObject(this.layer);
  }

  SheetCssLayer.prototype.dispose = function dispose() {
    this.layer.dispose();
    this.visual.removeCssObject(this.layer);
  };

  SheetCssLayer.prototype.isHidden = function isHidden() {
    return this.layer.isHidden();
  };

  SheetCssLayer.prototype.hide = function hide() {
    return this.layer.hide();
  };

  SheetCssLayer.prototype.show = function show() {
    return this.layer.show();
  };

  SheetCssLayer.prototype.set = function set(css, html, js) {
    this.layer.setData(css, html, js);
  };

  SheetCssLayer.prototype.update = function update(block) {
    this.block = block;
    this.block.getTopWorldRotation(this.layer.rotation);
    this.block.getTopWorldPosition(this.layer.position);
  };

  return SheetCssLayer;
}();

exports.default = SheetCssLayer;

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _MathUtils = __webpack_require__(3);

var _MathUtils2 = _interopRequireDefault(_MathUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SheetPhysics = function () {
  SheetPhysics.targetForceClb = function targetForceClb(o, a, v, ch) {
    var l = a * this.r;
    return 100 * this.m * this.g * (2 / (1 + Math.exp(10 * (l - this.tl))) - 1) - this.m * 40 * v;
  };

  SheetPhysics.hoverCornerForceClb = function hoverCornerForceClb(o, v, l, ch) {
    return 5;
  };

  SheetPhysics.prototype.getTargetForceClb = function getTargetForceClb(mass, targetAngle) {
    return SheetPhysics.targetForceClb.bind({
      g: this.p.gravity,
      m: mass,
      tl: targetAngle * this.p.r,
      r: this.p.r
    });
  };

  SheetPhysics.dragForceClb = function dragForceClb(o, a, v, ch) {
    return o.flbt * o.m * (10 * o.g * ch - 50 * v / (1 + Math.exp(3.5 * Math.abs(ch))));
  };

  SheetPhysics.dragCornerForceClb = function dragCornerForceClb(o, a, v, ch) {
    return 15 * (2 / (1 + Math.exp(10 * (a - this.ta) * o.r)) - 1);
  };

  SheetPhysics.getDragCornerForceClb = function getDragCornerForceClb(targetAngle) {
    return SheetPhysics.dragCornerForceClb.bind({
      ta: targetAngle
    });
  };

  function SheetPhysics() {
    var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    var gravity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var cornerDeviation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.15;
    var fps = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 240;

    _classCallCheck(this, SheetPhysics);

    this.p = {
      r: r,
      cornerDeviation: cornerDeviation,
      l: Math.PI * r,
      startDt: 1 / fps,
      gravity: gravity,
      margin: 0.002 * r,
      infM: 1e4,
      attempts: 16,
      maxIterations: 100
    };
    this.os = [];
  }

  SheetPhysics.prototype.dispose = function dispose() {
    this.os = [];
  };

  SheetPhysics.prototype.getSize = function getSize() {
    return this.os.length;
  };

  SheetPhysics.prototype.addObject = function addObject(mass, angle, velocity, flexibility, cornerHeight, simulateClb, removeClb) {
    var forceClb = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : function () {
      return 0;
    };
    var cornerForceClb = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : function () {
      return 0;
    };

    var no = {
      id: _MathUtils2.default.getUnique(),
      m: mass,
      v: velocity,
      l: angle * this.p.r,
      f: forceClb,
      cf: cornerForceClb,
      ch: cornerHeight,
      flbt: flexibility,
      simulateClb: simulateClb,
      removeClb: removeClb
    };
    var i = this.os.findIndex(function (o) {
      return no.l <= o.l;
    });
    i = ~i ? i : this.os.length;
    this.os.splice(i, 0, no);
    return no.id;
  };

  SheetPhysics.prototype.getParametrMap = function getParametrMap(name) {
    var map = {
      mass: 'm',
      velocity: 'v',
      flexibility: 'flbt',
      cornerHeight: 'ch',
      simulateClb: 'simulateClb',
      removeClb: 'removeClb',
      forceClb: 'f',
      cornerForceClb: 'cf'
    };
    return map[name];
  };

  SheetPhysics.prototype.setParametr = function setParametr(id, name, value) {
    var o = this.os.find(function (o) {
      return o.id === id;
    });
    if (name === 'angle') {
      o.l = value * this.p.r;
    } else {
      o[this.getParametrMap(name)] = value;
    }
  };

  SheetPhysics.prototype.getParametr = function getParametr(id, name) {
    var o = this.os.find(function (o) {
      return o.id === id;
    });
    var value = void 0;
    if (name === 'angle') {
      value = o.l / this.p.r;
    } else {
      value = o[this.getParametrMap(name)];
    }
    return value;
  };

  SheetPhysics.prototype.simulate = function simulate(T) {
    var t = 0,
        dt = this.p.startDt,
        attempt = 0,
        it = 0;

    while (t < T && it < this.p.maxIterations) {
      if (dt > T - t) {
        dt = T - t;
      }
      var nos = this.integrate(this.os, dt),
          ci = this.findCollisions(nos);
      if (ci.num > 1 && attempt < this.p.attempts) {
        dt /= 2;
        ++attempt;
      } else {
        if (ci.num === 1) {
          var scos = this.solveCollision(nos[ci.last - 1], nos[ci.last]);
          nos[ci.last - 1] = scos[0];
          nos[ci.last] = scos[1];
        } else if (ci.num > 1) {
          var gs = [];
          var last = -2;
          for (var _iterator = ci.all, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var i = _ref;

            if (i - last > 1) {
              gs.push([]);
            }
            gs[gs.length - 1].push(i);
            last = i;
          }
          for (var _iterator2 = gs, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
            var _ref2;

            if (_isArray2) {
              if (_i2 >= _iterator2.length) break;
              _ref2 = _iterator2[_i2++];
            } else {
              _i2 = _iterator2.next();
              if (_i2.done) break;
              _ref2 = _i2.value;
            }

            var g = _ref2;

            var sg = void 0,
                i0 = void 0;
            if (nos[g[0]].l > Math.PI / 2 * this.p.r) {
              sg = -1;
              i0 = g[g.length - 1];
            } else {
              sg = 1;
              i0 = g[0];
            }
            for (var _i3 = i0; _i3 < nos.length && _i3 > -1; _i3 += sg) {
              var o = nos[_i3 + sg];
              if (o && sg * (o.l - nos[_i3].l) <= this.p.margin) {
                o.l = nos[_i3].l + sg * 2 * this.p.margin;
                if (o.l > this.p.l || o.l < 0) {
                  o.l = o.l > this.p.l ? this.p.l : 0;
                  o.ch = 0;
                  o.v = 0;
                  console.error('Bad collision');
                }
              } else {
                break;
              }
            }
          }
        }
        this.os = nos;
        this.findAndSolveCornerCollisions();
        t += dt;
        dt = this.p.startDt;
        attempt = 0;
      }
      ++it;
    }

    this.removeStatics();
  };

  SheetPhysics.prototype.removeStatics = function removeStatics() {
    var nos = [],
        notify = [[], []];
    for (var _iterator3 = this.os, _isArray3 = Array.isArray(_iterator3), _i4 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
      var _ref3;

      if (_isArray3) {
        if (_i4 >= _iterator3.length) break;
        _ref3 = _iterator3[_i4++];
      } else {
        _i4 = _iterator3.next();
        if (_i4.done) break;
        _ref3 = _i4.value;
      }

      var o = _ref3;

      if (o.simulateClb) {
        o.simulateClb(o.l / this.p.r, o.ch);
      }
      if ((o.l === this.p.l || o.l === 0) && o.v === 0) {
        if (o.removeClb !== undefined) {
          notify[(o.l !== this.p.l) + 0].push(o);
        }
      } else {
        nos.push(o);
      }
    }
    this.os = nos;
    for (var _iterator4 = notify[0].reverse(), _isArray4 = Array.isArray(_iterator4), _i5 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
      var _ref4;

      if (_isArray4) {
        if (_i5 >= _iterator4.length) break;
        _ref4 = _iterator4[_i5++];
      } else {
        _i5 = _iterator4.next();
        if (_i5.done) break;
        _ref4 = _i5.value;
      }

      var _o = _ref4;

      _o.removeClb(Math.PI, _o.ch);
    }
    for (var _iterator5 = notify[1], _isArray5 = Array.isArray(_iterator5), _i6 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
      var _ref5;

      if (_isArray5) {
        if (_i6 >= _iterator5.length) break;
        _ref5 = _iterator5[_i6++];
      } else {
        _i6 = _iterator5.next();
        if (_i6.done) break;
        _ref5 = _i6.value;
      }

      var _o2 = _ref5;

      _o2.removeClb(0, _o2.ch);
    }
  };

  SheetPhysics.prototype.findAndSolveCornerCollisions = function findAndSolveCornerCollisions() {
    if (this.os.length) {
      var os = [_extends({}, this.os[0], {
        l: 0,
        m: this.p.infM,
        ch: 0
      })].concat(this.os, [_extends({}, this.os[0], {
        l: 1.05 * this.p.l,
        m: this.p.infM,
        ch: 0
      })]);

      for (var i = 1; i < os.length; ++i) {
        var a = os[i - 1],
            b = os[i],
            al = a.l + this.p.cornerDeviation * a.ch * this.p.r,
            bl = b.l + this.p.cornerDeviation * b.ch * this.p.r;
        if (1.05 * al > bl && a.ch > b.ch) {
          var dCh = a.ch - b.ch,
              dv = a.m / a.flbt + b.m / b.flbt,
              ka = a.m / a.flbt / dv,
              kb = b.m / b.flbt / dv;
          a.ch = a.ch - kb * dCh;
          b.ch = b.ch + ka * dCh;
        }
      }
    }
  };

  SheetPhysics.prototype.solveCollision = function solveCollision(a, b) {
    var mm = b.m + a.m,
        av = (-a.v * b.m + a.m * a.v + 2 * b.m * b.v) / mm,
        bv = (b.m * b.v - b.v * a.m + 2 * a.m * a.v) / mm;
    return [_extends({}, a, { v: av }), _extends({}, b, { v: bv })];
  };

  SheetPhysics.prototype.findCollisions = function findCollisions(os) {
    var ci = {
      num: 0,
      last: 0,
      all: []
    };
    for (var i = 1; i < os.length && ci.num < 2; ++i) {
      if (os[i - 1].l > os[i].l || this.isCollision(os[i - 1], os[i])) {
        if (os[i - 1].l > os[i].l) {
          ++ci.num;
        }
        ++ci.num;
        ci.last = i;
        if (ci.all.indexOf(i - 1) === -1) {
          ci.all.push(i - 1);
        }
        if (ci.all.indexOf(i) === -1) {
          ci.all.push(i);
        }
      }
    }
    return ci;
  };

  SheetPhysics.prototype.isCollision = function isCollision(a, b) {
    return Math.abs(a.l - b.l) < this.p.margin && a.v > b.v;
  };

  SheetPhysics.prototype.integrate = function integrate(os, dt) {
    var nos = [];
    for (var _iterator6 = os, _isArray6 = Array.isArray(_iterator6), _i7 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
      var _ref6;

      if (_isArray6) {
        if (_i7 >= _iterator6.length) break;
        _ref6 = _iterator6[_i7++];
      } else {
        _i7 = _iterator6.next();
        if (_i7.done) break;
        _ref6 = _i7.value;
      }

      var o = _ref6;

      var vl = _MathUtils2.default.rk4(this.dy.bind({
        g: this.p.gravity,
        r: this.p.r,
        m: o.m,
        f: o.f,
        cf: o.cf,
        ch: o.ch,
        flbt: o.flbt
      }), 0, dt, [o.v, o.l, o.ch]);
      var no = _extends({}, o, {
        v: vl[0],
        l: vl[1],
        ch: vl[2]
      });
      if (no.l <= 0 || no.l >= this.p.l) {
        no.l = no.l <= 0 ? 0 : this.p.l;
        no.v = 0;
        no.ch = 0;
      }
      nos.push(no);
    }
    return nos;
  };

  SheetPhysics.prototype.dy = function dy(t, y) {
    var v = y[0],
        l = y[1],
        ch = y[2],
        f = this.f(this, l / this.r, v, ch),
        cf = this.cf(this, l / this.r, v, ch);
    return [(-this.g * Math.cos(l / this.r) * this.m + f) / this.m, v + 0.01 * (Math.random() - 0.5), this.flbt * ((2 / (1 + Math.exp(-0.2 * cf)) - 1) * (1 - 2 / (1 + Math.exp(-5 * (Math.abs(ch) - 2)))) - ch)];
  };

  return SheetPhysics;
}();

exports.default = SheetPhysics;

/***/ },
/* 38 */
/***/ function(module, exports) {

"use strict";
'use strict';

exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SoundsEnviroment = function () {
  function SoundsEnviroment() {
    var template = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, SoundsEnviroment);

    this.sounds = template.sounds || {};
    this.audio = {};
    if (this.sounds.startFlip) {
      this.audio.startFlip = new Audio(this.sounds.startFlip);
    }
    if (this.sounds.endFlip) {
      this.audio.endFlip = new Audio(this.sounds.endFlip);
    }
  }

  SoundsEnviroment.prototype.setEnabled = function setEnabled(enabled) {
    this.enabled = enabled;
  };

  SoundsEnviroment.prototype.togle = function togle() {
    this.enabled = !this.enabled;
  };

  SoundsEnviroment.prototype.dispose = function dispose() {
    delete this.audio.startFlip;
    delete this.audio.endFlip;
  };

  SoundsEnviroment.prototype.startFlip = function startFlip() {
    if (this.enabled && this.audio.startFlip) {
      this.audio.startFlip.play();
    }
  };

  SoundsEnviroment.prototype.endFlip = function endFlip() {
    if (this.enabled && this.audio.startFlip) {
      this.audio.startFlip.pause();
      this.audio.startFlip.currentTime = 0;
    }
    if (this.enabled && this.audio.endFlip) {
      this.audio.endFlip.play();
    }
  };

  SoundsEnviroment.prototype.subscribeFlips = function subscribeFlips(emitter) {
    emitter.addEventListener('startFlip', this.startFlip.bind(this));
    emitter.addEventListener('endFlip', this.endFlip.bind(this));
  };

  return SoundsEnviroment;
}();

exports.default = SoundsEnviroment;

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _WidgetController2 = __webpack_require__(64);

var _WidgetController3 = _interopRequireDefault(_WidgetController2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TocController = function (_WidgetController) {
  _inherits(TocController, _WidgetController);

  function TocController(view, bookCtrl) {
    _classCallCheck(this, TocController);

    var _this = _possibleConstructorReturn(this, _WidgetController.call(this, view));

    _this.bookCtrl = bookCtrl;
    _this.tab = 'none';
    return _this;
  }

  TocController.prototype.setThumbnails = function setThumbnails(thumbnails) {
    this.thumbnails = thumbnails;
    thumbnails.onNavigate = this.navigateThumbnails.bind(this);
    if (this.tab === 'none') {
      this.tab = 'thumbnails';
    }
    this.fireChange();
  };

  TocController.prototype.setSearch = function setSearch(search) {
    this.search = search;
    search.onNavigate = this.navigateSearch.bind(this);
    this.fireChange();
  };

  TocController.prototype.setBookmarks = function setBookmarks(bookmarks, pdf) {
    this.bookmarks = bookmarks;
    this.pdf = pdf;
    bookmarks.onNavigate = this.navigateBookmarks.bind(this);
    if (bookmarks.getSize()) {
      this.tab = 'bookmarks';
      this.isBookmarks = true;
    }
    this.fireChange();
  };

  TocController.prototype.cmdBookmarks = function cmdBookmarks() {
    this.tab = 'bookmarks';
    this.fireChange();
  };

  TocController.prototype.cmdThumbnails = function cmdThumbnails() {
    this.tab = 'thumbnails';
    this.fireChange();
  };

  TocController.prototype.cmdSearch = function cmdSearch() {
    this.tab = 'search';
    this.fireChange();
  };

  TocController.prototype.cmdCloseToc = function cmdCloseToc() {
    this.hide();
  };

  TocController.prototype.navigateThumbnails = function navigateThumbnails(number) {
    this.bookCtrl.goToPage(number);
  };

  TocController.prototype.navigateSearch = function navigateSearch(number) {
    this.bookCtrl.goToPage(number);
  };

  TocController.prototype.navigateBookmarks = function navigateBookmarks(item) {
    var _this2 = this;

    if (item.url) {
      window.open(item.url, '_blank');
    } else if (item.dest) {
      var destPromise = void 0;
      if (typeof item.dest === 'string') {
        destPromise = this.pdf.handler.getDestination(item.dest);
      } else {
        destPromise = Promise.resolve(item.dest);
      }
      destPromise.then(function (dest) {
        return _this2.pdf.handler.getPageIndex(dest[0]);
      }).then(function (number) {
        return _this2.bookCtrl.goToPage(number);
      }).catch(function () {
        return console.error('Bad bookmark');
      });
    }
  };

  TocController.prototype.updateView = function updateView() {
    var _this3 = this;

    if (this.view) {
      this.view.setState('widTocMenu', {
        enable: true,
        visible: true,
        active: false
      });
      this.view.setState('widThumbnails', {
        enable: true,
        visible: this.tab === 'thumbnails',
        active: false
      });
      this.view.setState('widSearch', {
        enable: true,
        visible: this.tab === 'search',
        active: false
      });
      this.view.setState('widBookmarks', {
        enable: true,
        visible: this.tab === 'bookmarks',
        active: false
      });
      this.view.setState('cmdBookmarks', {
        enable: true,
        visible: true,
        active: this.tab === 'bookmarks'
      });
      this.view.setState('cmdThumbnails', {
        enable: true,
        visible: true,
        active: this.tab === 'thumbnails'
      });
      this.view.setState('cmdSearch', {
        enable: true,
        visible: true,
        active: this.tab === 'search'
      });
      Promise.resolve().then(function () {
        return _this3.thumbnails.setEnable(_this3.visible && _this3.tab === 'thumbnails');
      });
      _WidgetController.prototype.updateView.call(this);
    }
  };

  return TocController;
}(_WidgetController3.default);

exports.default = TocController;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _libs = __webpack_require__(1);

var _ThreeUtils = __webpack_require__(18);

var _ThreeUtils2 = _interopRequireDefault(_ThreeUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var resX = 11,
    resY = 2,
    resZ = 15,
    scale = 1,
    faces = [];

var frontGeometry = new _libs.THREE.PlaneGeometry(scale, scale, resX - 1, resY - 1);
frontGeometry.translate(0.5 * scale, 0.5 * scale, scale);
var backGeometry = new _libs.THREE.PlaneGeometry(scale, scale, resX - 1, resY - 1);
backGeometry.rotateY(Math.PI);
backGeometry.translate(0.5 * scale, 0.5 * scale, 0);
var leftGeometry = new _libs.THREE.PlaneGeometry(scale, scale, resZ - 1, resY - 1);
leftGeometry.rotateY(-Math.PI / 2);
leftGeometry.translate(0, 0.5 * scale, 0.5 * scale);
var rightGeometry = new _libs.THREE.PlaneGeometry(scale, scale, resZ - 1, resY - 1);
rightGeometry.rotateY(Math.PI / 2);
rightGeometry.translate(scale, 0.5 * scale, 0.5 * scale);
var topGeometry = new _libs.THREE.PlaneGeometry(scale, scale, resX - 1, resZ - 1);
topGeometry.rotateX(-Math.PI / 2);
topGeometry.translate(0.5 * scale, scale, 0.5 * scale);
var bottomGeometry = topGeometry.clone();
bottomGeometry.translate(0, -scale, 0);
for (var _iterator = bottomGeometry.faces, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
  var _ref;

  if (_isArray) {
    if (_i >= _iterator.length) break;
    _ref = _iterator[_i++];
  } else {
    _i = _iterator.next();
    if (_i.done) break;
    _ref = _i.value;
  }

  var f = _ref;
  var _ref3 = [f.b, f.a];
  f.a = _ref3[0];
  f.b = _ref3[1];
}

var geometry = new _libs.THREE.Geometry();
geometry.vertices = [].concat(bottomGeometry.vertices, topGeometry.vertices);

var addFaces = function addFaces(fs, map) {
  for (var _iterator2 = fs, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
    var _ref2;

    if (_isArray2) {
      if (_i2 >= _iterator2.length) break;
      _ref2 = _iterator2[_i2++];
    } else {
      _i2 = _iterator2.next();
      if (_i2.done) break;
      _ref2 = _i2.value;
    }

    var f = _ref2;

    geometry.faces.push(new _libs.THREE.Face3(map(f.a), map(f.b), map(f.c)));
  }
  faces.push(geometry.faces.length);
};

var mapVertices = function mapVertices(src, dst) {
  var map = [];
  var eq = function eq(a, b) {
    return Math.abs(a.x - b.x) + Math.abs(a.y - b.y) + Math.abs(a.z - b.z) < 1e-4;
  };
  for (var i = 0; i < src.length; ++i) {
    for (var j = 0; j < dst.length; ++j) {
      if (eq(src[i], dst[j])) {
        map[i] = j;
        break;
      }
    }
  }
  return map;
};

var frontMap = mapVertices(frontGeometry.vertices, geometry.vertices);
var backMap = mapVertices(backGeometry.vertices, geometry.vertices);
var leftMap = mapVertices(leftGeometry.vertices, geometry.vertices);
var rightMap = mapVertices(rightGeometry.vertices, geometry.vertices);

addFaces(topGeometry.faces, function (i) {
  return i + bottomGeometry.vertices.length;
});
addFaces(bottomGeometry.faces, function (i) {
  return i;
});
addFaces(frontGeometry.faces, function (i) {
  return frontMap[i];
});
addFaces(backGeometry.faces, function (i) {
  return backMap[i];
});
addFaces(leftGeometry.faces, function (i) {
  return leftMap[i];
});
addFaces(rightGeometry.faces, function (i) {
  return rightMap[i];
});
faces.pop();

_ThreeUtils2.default.computeFaceVertexUvs(geometry, faces);

geometry.computeVertexNormals();
//geometry.computeFaceNormals();
geometry.computeBoundingSphere();
//geometry.computeBoundingBox();
geometry.verticesNeedUpdate = true;

exports.default = {
  resX: resX,
  resY: resY,
  resZ: resZ,
  faces: faces,
  geometry: geometry
};

/***/ },
/* 41 */
/***/ function(module, exports) {

"use strict";
'use strict';

exports.__esModule = true;
exports.props = props;
var mouseButtons = {
  Left: 0,
  Middle: 1,
  Right: 2
};

function props() {
  return {
    eps: 1e-4,
    scale: {
      default: 0.9,
      min: 0.9,
      max: 2.5,
      levels: 7
    },
    lighting: {
      default: 0.7,
      min: 0,
      max: 1,
      levels: 7
    },
    pan: {
      speed: 50
    },
    actions: {
      cmdZoomIn: {
        enabled: true
      },
      cmdZoomOut: {
        enabled: true
      },
      cmdDefaultZoom: {
        enabled: true,
        type: 'dblclick',
        code: 0
      },
      cmdToc: {
        enabled: true
      },
      cmdFastBackward: {
        enabled: false
      },
      cmdBackward: {
        enabled: true
      },
      cmdForward: {
        enabled: true
      },
      cmdFastForward: {
        enabled: false
      },
      cmdSave: {
        enabled: true
      },
      cmdPrint: {
        enabled: true
      },
      cmdFullScreen: {
        enabled: true
      },
      widSettings: {
        enabled: true
      },
      cmdSmartPan: {
        enabled: true,
        active: true
      },
      cmdSinglePage: {
        enabled: true,
        active: false,
        activeForMobile: false
      },
      cmdSounds: {
        enabled: true,
        active: true
      },
      cmdStats: {
        enabled: true,
        active: false
      },
      cmdLightingUp: {
        enabled: true
      },
      cmdLightingDown: {
        enabled: true
      },
      cmdPanLeft: {
        enabled: false
      },
      cmdPanRight: {
        enabled: false
      },
      cmdPanUp: {
        enabled: false
      },
      cmdPanDown: {
        enabled: false
      },
      mouseCmdRotate: {
        enabled: true,
        type: 'mousedrag',
        code: mouseButtons.Right
      },
      mouseCmdDragZoom: {
        enabled: true,
        type: 'mousedrag',
        code: mouseButtons.Middle
      },
      mouseCmdPan: {
        enabled: true,
        type: 'mousedrag',
        code: mouseButtons.Left
      },
      mouseCmdWheelZoom: {
        enabled: true,
        type: 'mousewheel',
        code: 0
      },
      touchCmdRotate: {
        enabled: true,
        type: 'touchdrag',
        code: 3
      },
      touchCmdZoom: {
        enabled: true,
        type: 'touchdrag',
        code: 2
      },
      touchCmdPan: {
        enabled: true,
        type: 'touchdrag',
        code: 1
      }
    }
  };
};

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _libs = __webpack_require__(0);

var _ImageBase2 = __webpack_require__(4);

var _ImageBase3 = _interopRequireDefault(_ImageBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BlankImage = function (_ImageBase) {
  _inherits(BlankImage, _ImageBase);

  function BlankImage(context, width, height, color) {
    _classCallCheck(this, BlankImage);

    var _this = _possibleConstructorReturn(this, _ImageBase.call(this, context, width, height, color));

    Promise.resolve().then(function () {
      _this.startRender = function () {
        _this.renderBlankPage();
        _this.finishRender();
      };
      _this.finishLoad();
    });
    return _this;
  }

  return BlankImage;
}(_ImageBase3.default);

exports.default = BlankImage;

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Bookmarks = function () {
  function Bookmarks(container, items) {
    var _this = this;

    var getTitle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (i) {
      return i.title;
    };
    var getItems = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function (i) {
      return i.items;
    };

    _classCallCheck(this, Bookmarks);

    this.container = container;
    this.map = [];
    this.getTitle = getTitle;
    this.getItems = getItems;
    this.nodes = this.mapNodes(items, this.map);

    this.binds = {
      togle: function togle(e) {
        e.preventDefault();
        var li = (0, _libs.$)(e.target);
        while (li[0] && li[0] !== container[0] && !li.hasClass('item')) {
          li = (0, _libs.$)(li[0].parentNode);
        }
        if (li.hasClass('item')) {
          var cmd = (0, _libs.$)(e.target);
          while (cmd[0] && cmd[0] !== li[0] && !cmd.hasClass('cmd')) {
            cmd = (0, _libs.$)(cmd[0].parentNode);
          }
          if (cmd.hasClass('cmd')) {
            var node = _this.map[li.attr('data-id')];
            if (cmd.hasClass('togle')) {
              node.minimized = !node.minimized;
              if (node.minimized) {
                li.find('ul').remove();
                li.find('.togle').addClass('minimized');
              } else {
                li.find('.togle').removeClass('minimized');
                li.append((_this.renderNode(node).match(/<ul.*<\/ul>/) || [''])[0]);
              }
            } else {
              if (_this.onNavigate) {
                _this.onNavigate(node.item);
              }
            }
          }
        }
      }
    };

    container.on('click', this.binds.togle);
    this.update();
  }

  Bookmarks.prototype.getSize = function getSize() {
    return this.map.length;
  };

  Bookmarks.prototype.dispose = function dispose() {
    this.container.off('click', this.binds.togle);
    this.container.html('');
  };

  Bookmarks.prototype.update = function update() {
    this.container.html(this.renderNodes(this.nodes));
  };

  Bookmarks.prototype.forEach = function forEach(f) {
    var nodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nodes;

    for (var _iterator = nodes || [], _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var node = _ref;

      f(node);
      this.forEach(f, node.children);
    }
  };

  Bookmarks.prototype.expand = function expand() {
    this.forEach(function (n) {
      return n.minimized = false;
    });
    this.update();
  };

  Bookmarks.prototype.minimize = function minimize() {
    this.forEach(function (n) {
      return n.minimized = true;
    });
    this.update();
  };

  Bookmarks.prototype.renderNode = function renderNode(node) {
    return ['<div class="area">', node.children ? '<a href="#" class="cmd togle' + (node.minimized ? ' minimized' : '') + '"><i class="fa fa-angle-right"></i></a> ' : '<i class="white-space"></i> ', '<a class="cmd" title="', node.title, '" href="#">', node.title, '</a></div>', node.minimized ? '' : this.renderNodes(node.children)].join('');
  };

  Bookmarks.prototype.renderNodes = function renderNodes(nodes) {
    var res = ['<div class="bookmarks">'];
    if (nodes && nodes.length) {
      res.push('<ul class="level-', nodes[0].level, '">');
      for (var _iterator2 = nodes, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var node = _ref2;

        res.push(['<li class="item" data-id="', node.id, '">', this.renderNode(node), '</li>'].join(''));
      }
      res.push('</ul>');
    }
    res.push('</div>');
    return res.join('');
  };

  Bookmarks.prototype.mapNodes = function mapNodes(items) {
    var map = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

    var nodes = null;
    if (items && items.length) {
      nodes = [];
      for (var _iterator3 = items, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
        var _ref3;

        if (_isArray3) {
          if (_i3 >= _iterator3.length) break;
          _ref3 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done) break;
          _ref3 = _i3.value;
        }

        var item = _ref3;

        var id = map.length;
        map.push(undefined);
        var node = {
          id: id,
          title: this.getTitle(item),
          level: level,
          item: item,
          minimized: true,
          children: this.mapNodes(this.getItems(item), map, level + 1)
        };
        nodes.push(node);
        map[id] = node;
      }
    }
    return nodes;
  };

  return Bookmarks;
}();

exports.default = Bookmarks;

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Detector = function () {
	function Detector() {
		_classCallCheck(this, Detector);
	}

	Detector.getWebGLErrorMessage = function getWebGLErrorMessage() {
		var element = document.createElement('div');
		element.id = 'webgl-error-message';
		element.style.fontFamily = 'monospace';
		element.style.fontSize = '13px';
		element.style.fontWeight = 'normal';
		element.style.textAlign = 'center';
		element.style.background = '#fff';
		element.style.color = '#000';
		element.style.padding = '1.5em';
		element.style.width = '400px';
		element.style.margin = '5em auto 0';

		if (!Detector.webgl) {
			element.innerHTML = window.WebGLRenderingContext ? ['Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">WebGL</a>.<br />', 'Find out how to get it <a href="http://get.webgl.org/" style="color:#000">here</a>.'].join('\n') : ['Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">WebGL</a>.<br/>', 'Find out how to get it <a href="http://get.webgl.org/" style="color:#000">here</a>.'].join('\n');
		}
		return element;
	};

	Detector.addGetWebGLMessage = function addGetWebGLMessage(parameters) {
		var parent = void 0,
		    id = void 0,
		    element = void 0;
		parameters = parameters || {};

		parent = parameters.parent || (0, _libs.$)(document.body);
		id = parameters.id || 'oldie';

		element = Detector.getWebGLErrorMessage();
		//element.id = id;

		parent.append(element);
	};

	return Detector;
}();

Detector.canvas = !!window.CanvasRenderingContext2D;

Detector.webgl = function () {
	try {
		var canvas = document.createElement('canvas');
		return !!(window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));
	} catch (e) {
		return false;
	}
}();

Detector.workers = !!window.Worker;
Detector.fileapi = window.File && window.FileReader && window.FileList && window.Blob;
exports.default = Detector;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DocMouseSimulator = function () {
  function DocMouseSimulator(jFrame, element) {
    var bElement = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document.body;

    _classCallCheck(this, DocMouseSimulator);

    this.jFrame = jFrame;
    this.wnd = jFrame[0].contentWindow;
    this.doc = jFrame[0].contentDocument;
    this.element = element || doc.body;
    this.bElement = bElement;
    this.resendProperties = this.getDefaultResendProperties();
    this.undefinedProperties = this.getDefaultUndefinedProperties();
    this.cursors = [];
    this.onDocChangeClbs = [];
    var terms = [{
      find: ':hover',
      replace: '.' + DocMouseSimulator.HOVER
    }, {
      find: ':active',
      replace: '.' + DocMouseSimulator.ACTIVE
    }];
    var style = ['<style type="text/css">'];
    for (var i = 0; i < this.doc.styleSheets.length; ++i) {
      var ss = this.doc.styleSheets[i];
      for (var j = 0; j < ss.cssRules.length; ++j) {
        var r = ss.cssRules[j],
            cssText = void 0;
        for (var _iterator = terms, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var term = _ref;

          if (~r.selectorText.indexOf(term.find)) {
            cssText = (cssText || r.cssText).replace(new RegExp(term.find, 'g'), term.replace);
          }
        }
        if (cssText) {
          style.push(cssText);
        }
      }
    }
    style.push('</style>');
    (0, _libs.$)(this.doc.head).append((0, _libs.$)(style.join('')));
  }

  DocMouseSimulator.prototype.convertCoords = function convertCoords(x, y) {
    var jElement = (0, _libs.$)(this.element);
    var offset = jElement.offset();
    return {
      x: offset.left + jElement.width() * x,
      y: offset.top + jElement.height() * (1 - y)
    };
  };

  DocMouseSimulator.prototype.triggerEvent = function triggerEvent(element, e, p, type, advancedProps) {
    var props = {};
    for (var _iterator2 = this.resendProperties, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var _n = _ref2;

      props[_n] = e[_n];
    }
    for (var _iterator3 = this.undefinedProperties, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
      var _ref3;

      if (_isArray3) {
        if (_i3 >= _iterator3.length) break;
        _ref3 = _iterator3[_i3++];
      } else {
        _i3 = _iterator3.next();
        if (_i3.done) break;
        _ref3 = _i3.value;
      }

      var _n2 = _ref3;

      props[_n2] = undefined;
    }
    for (var n in advancedProps) {
      if (advancedProps.hasOwnProperty(n)) {
        props[n] = advancedProps[n];
      }
    }
    props.view = this.wnd;
    props.pageX = p.x;
    props.pageY = p.y;
    var jE = _libs.$.Event(type, props);
    jE.timeStamp = e.timeStamp;
    (0, _libs.$)(element).trigger(jE);
  };

  DocMouseSimulator.prototype.addClass = function addClass(element, name) {
    (0, _libs.$)(element).addClass(name);
    var style = this.wnd.getComputedStyle(element);
    this.cursors.push((0, _libs.$)(this.bElement).css('cursor'));
    (0, _libs.$)(this.bElement).css('cursor', style.getPropertyValue('cursor'));
  };

  DocMouseSimulator.prototype.removeClass = function removeClass(element, name) {
    (0, _libs.$)(element).removeClass(name);
    (0, _libs.$)(this.bElement).css('cursor', this.cursors.pop());
  };

  DocMouseSimulator.prototype.enterElement = function enterElement(element) {
    this.addClass(element, DocMouseSimulator.HOVER);
  };

  DocMouseSimulator.prototype.leaveElement = function leaveElement(element) {
    this.removeClass(element, DocMouseSimulator.HOVER);
  };

  DocMouseSimulator.prototype.activateElement = function activateElement(element) {
    this.addClass(element, DocMouseSimulator.ACTIVE);
  };

  DocMouseSimulator.prototype.deactivateElement = function deactivateElement(element) {
    this.removeClass(element, DocMouseSimulator.ACTIVE);
  };

  DocMouseSimulator.prototype.addDocChangeClb = function addDocChangeClb(clb) {
    this.onDocChangeClbs.push(clb);
  };

  DocMouseSimulator.prototype.notify = function notify() {
    for (var _iterator4 = this.onDocChangeClbs, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
      var _ref4;

      if (_isArray4) {
        if (_i4 >= _iterator4.length) break;
        _ref4 = _iterator4[_i4++];
      } else {
        _i4 = _iterator4.next();
        if (_i4.done) break;
        _ref4 = _i4.value;
      }

      var clb = _ref4;

      clb(this.wnd, this.doc);
    }
  };

  DocMouseSimulator.prototype.elementFromPoint = function elementFromPoint(p) {
    var node = this.doc.body,
        next = true;
    while (next) {
      next = false;
      for (var i = 0; i < node.childNodes.length; ++i) {
        var child = node.childNodes[i];
        if (child instanceof this.wnd.Element) {
          var jC = (0, _libs.$)(child),
              offset = jC.offset(),
              height = jC.height(),
              width = jC.width();
          if (p.x > offset.left && p.x < offset.left + width && p.y > offset.top && p.y < offset.top + height) {
            node = child;
            next = true;
            break;
          }
        }
      }
    }
    return node;
  };

  DocMouseSimulator.prototype.getElement = function getElement(p) {
    var off0 = this.jFrame.offset();
    this.jFrame.offset({ left: 0.5 * window.innerWidth - p.x, top: 0.5 * window.innerHeight - p.y });
    var element = this.doc.elementFromPoint(p.x, p.y);
    if (!element) {
      // it isn't a joke it's IE
      element = this.doc.elementFromPoint(p.x, p.y);
    }
    this.jFrame.offset(off0);
    return element ? element : this.elementFromPoint(p);
  };

  DocMouseSimulator.prototype.simulate = function simulate(e, doc, x, y) {
    var p = this.convertCoords(x, y),
        element = doc === this.doc ? this.getElement(p) : undefined;
    var trigger = element !== undefined,
        notify = false;

    switch (e.type) {
      case 'mousedown':
        {
          if (this.capElement) {
            this.deactivateElement(this.capElement);
            notify = true;
          }
          this.capElement = element;
          if (this.capElement) {
            this.activateElement(this.capElement);
            notify = true;
          }
          break;
        }
      case 'mouseup':
        {
          if (this.capElement) {
            this.deactivateElement(this.capElement);
            notify = true;
          }
          this.timeStamp = e.timeStamp;
          break;
        }
      case 'click':
        {
          trigger = element && this.capElement === element && e.timeStamp === this.timeStamp;
          this.capElement = undefined;
          break;
        }
      case 'mouseenter':
      case 'mouseover':
      case 'mousemove':
        {
          var leaved = null;
          if (this.hovElement !== element && this.hovElement) {
            this.triggerEvent(this.hovElement, e, p, 'mouseout', { relatedTarget: element ? element : null });
            this.leaveElement(this.hovElement);
            leaved = this.hovElement;
            this.hovElement = undefined;
            notify = true;
          }
          if (!this.hovElement && element) {
            this.triggerEvent(element, e, p, 'mouseover', { relatedTarget: leaved });
            this.enterElement(element);
            this.hovElement = element;
            notify = true;
          }
          trigger = element && e.type === 'mousemove';
          break;
        }
      case 'mouseleave':
      case 'mouseout':
        {
          if (this.hovElement) {
            this.triggerEvent(this.hovElement, e, p, 'mouseout', { relatedTarget: e.relatedTarget });
            this.leaveElement(this.hovElement);
            this.hovElement = undefined;
            notify = true;
          }
          trigger = false;
          break;
        }
    }
    if (trigger) {
      this.triggerEvent(element, e, p, e.type);
    }
    if (notify) {
      this.notify();
    }
  };

  DocMouseSimulator.prototype.getDefaultUndefinedProperties = function getDefaultUndefinedProperties() {
    return ['clientX', 'clientY', 'offsetX', 'offsetY', 'screenX', 'screenY'];
  };

  DocMouseSimulator.prototype.getDefaultResendProperties = function getDefaultResendProperties() {
    return ['altKey', 'bubbles', 'button', 'buttons', 'cancelable', 'changedTouches', 'char', 'charCode', 'ctrlKey', 'data', 'detail', 'eventPhase', 'isDefaultPrevented', 'key', 'keyCode', 'metaKey', 'pointerId', 'pointerType', 'shiftKey', 'targetTouches', 'touches', 'which'];
  };

  return DocMouseSimulator;
}();

/*
altKey,
bubbles,
button,
buttons,
cancelable,
changedTouches,
char,
charCode,
clientX,
clientY,
ctrlKey,
currentTarget,
data,
delegateTarget,
detail,
eventPhase,
handleObj,
isDefaultPrevented,
key,
keyCode,
metaKey,
offsetX,
offsetY,
originalEvent,
pageX,
pageY,
pointerId,
pointerType,
relatedTarget,
screenX,
screenY,
shiftKey,
target,
targetTouches,
timeStamp,
toElement,
touches,
type,
view,
which
*/


DocMouseSimulator.HOVER = 'SIMULATED-HOVER';
DocMouseSimulator.ACTIVE = 'SIMULATED-ACTIVE';
exports.default = DocMouseSimulator;

/***/ },
/* 46 */
/***/ function(module, exports) {

"use strict";
'use strict';

exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Dom2Image = function Dom2Image(wnd, doc, cache) {
    _classCallCheck(this, Dom2Image);

    var self = this;
    this.window = wnd;
    this.document = doc;
    this.cache = cache;

    var util = newUtil();
    var inliner = newInliner();
    var fontFaces = newFontFaces();
    var images = newImages();

    this.toSvg = toSvg;
    this.toPng = toPng;
    this.toJpeg = toJpeg;
    this.toBlob = toBlob;
    this.toPixelData = toPixelData;
    this.impl = {
        fontFaces: fontFaces,
        images: images,
        util: util,
        inliner: inliner
    };

    /**
     * @param {Node} node - The DOM Node object to render
     * @param {Object} options - Rendering options
     * @param {Function} options.filter - Should return true if passed node should be included in the output
     *          (excluding node means excluding it's children as well). Not called on the root node.
     * @param {String} options.bgcolor - color for the background, any valid CSS color value.
     * @param {Number} options.width - width to be applied to node before rendering.
     * @param {Number} options.height - height to be applied to node before rendering.
     * @param {Object} options.style - an object whose properties to be copied to node's style before rendering.
     * @param {Number} options.quality - a Number between 0 and 1 indicating image quality (applicable to JPEG only),
                defaults to 1.0.
     * @return {Promise} - A promise that is fulfilled with a SVG image data URL
     * */

    function toSvg(node, options) {
        options = options || {};
        return Promise.resolve(node).then(function (node) {
            return cloneNode(node, options.filter, true);
        }).then(embedFonts).then(inlineImages).then(applyOptions).then(function (clone) {
            return makeSvgDataUri(clone, options.width || util.width(node), options.height || util.height(node));
        });

        function applyOptions(clone) {
            if (options.bgcolor) clone.style.backgroundColor = options.bgcolor;

            if (options.width) clone.style.width = options.width + 'px';
            if (options.height) clone.style.height = options.height + 'px';

            if (options.style) self.window.Object.keys(options.style).forEach(function (property) {
                clone.style[property] = options.style[property];
            });

            return clone;
        }
    }

    /**
     * @param {Node} node - The DOM Node object to render
     * @param {Object} options - Rendering options, @see {@link toSvg}
     * @return {Promise} - A promise that is fulfilled with a Uint8Array containing RGBA pixel data.
     * */
    function toPixelData(node, options) {
        return draw(node, options || {}).then(function (canvas) {
            return canvas.getContext('2d').getImageData(0, 0, util.width(node), util.height(node)).data;
        });
    }

    /**
     * @param {Node} node - The DOM Node object to render
     * @param {Object} options - Rendering options, @see {@link toSvg}
     * @return {Promise} - A promise that is fulfilled with a PNG image data URL
     * */
    function toPng(node, options) {
        return draw(node, options || {}).then(function (canvas) {
            return canvas.toDataURL();
        });
    }

    /**
     * @param {Node} node - The DOM Node object to render
     * @param {Object} options - Rendering options, @see {@link toSvg}
     * @return {Promise} - A promise that is fulfilled with a JPEG image data URL
     * */
    function toJpeg(node, options) {
        options = options || {};
        return draw(node, options).then(function (canvas) {
            return canvas.toDataURL('image/jpeg', options.quality || 1.0);
        });
    }

    /**
     * @param {Node} node - The DOM Node object to render
     * @param {Object} options - Rendering options, @see {@link toSvg}
     * @return {Promise} - A promise that is fulfilled with a PNG image blob
     * */
    function toBlob(node, options) {
        return draw(node, options || {}).then(util.canvasToBlob);
    }

    function draw(domNode, options) {
        return toSvg(domNode, options).then(util.makeImage).then(util.delay(100)).then(function (image) {
            var canvas = newCanvas(domNode);
            canvas.getContext('2d').drawImage(image, 0, 0);
            return canvas;
        });

        function newCanvas(domNode) {
            var canvas = self.document.createElement('canvas');
            canvas.width = options.width || util.width(domNode);
            canvas.height = options.height || util.height(domNode);

            if (options.bgcolor) {
                var ctx = canvas.getContext('2d');
                ctx.fillStyle = options.bgcolor;
                ctx.fillRect(0, 0, canvas.width, canvas.height);
            }

            return canvas;
        }
    }

    function cloneNode(node, filter, root) {
        if (!root && filter && !filter(node)) return Promise.resolve();

        return Promise.resolve(node).then(makeNodeCopy).then(function (clone) {
            return cloneChildren(node, clone, filter);
        }).then(function (clone) {
            return processClone(node, clone);
        });

        function makeNodeCopy(node) {
            if (util.isCanvas(node)) return util.makeImage(node.toDataURL());
            return node.cloneNode(false);
        }

        function cloneChildren(original, clone, filter) {
            var children = original.childNodes;
            if (children.length === 0) return Promise.resolve(clone);

            return cloneChildrenInOrder(clone, util.asArray(children), filter).then(function () {
                return clone;
            });

            function cloneChildrenInOrder(parent, children, filter) {
                var done = Promise.resolve();
                children.forEach(function (child) {
                    done = done.then(function () {
                        return cloneNode(child, filter);
                    }).then(function (childClone) {
                        if (childClone) parent.appendChild(childClone);
                    });
                });
                return done;
            }
        }

        function processClone(original, clone) {
            if (!util.isElement(clone)) return clone;

            return Promise.resolve().then(cloneStyle).then(clonePseudoElements).then(copyUserInput).then(fixSvg).then(function () {
                return clone;
            });

            function cloneStyle() {
                copyStyle(self.window.getComputedStyle(original), clone.style);

                function copyStyle(source, target) {
                    if (source.cssText) target.cssText = source.cssText;else copyProperties(source, target);

                    function copyProperties(source, target) {
                        util.asArray(source).forEach(function (name) {
                            target.setProperty(name, source.getPropertyValue(name), source.getPropertyPriority(name));
                        });
                    }
                }
            }

            function clonePseudoElements() {
                [':before', ':after'].forEach(function (element) {
                    clonePseudoElement(element);
                });

                function clonePseudoElement(element) {
                    var style = self.window.getComputedStyle(original, element);
                    var content = style.getPropertyValue('content');

                    if (content === '' || content === 'none') return;

                    var className = util.uid();
                    clone.className = clone.className + ' ' + className;
                    var styleElement = self.document.createElement('style');
                    styleElement.appendChild(formatPseudoElementStyle(className, element, style));
                    clone.appendChild(styleElement);

                    function formatPseudoElementStyle(className, element, style) {
                        var selector = '.' + className + ':' + element;
                        var cssText = style.cssText ? formatCssText(style) : formatCssProperties(style);
                        return self.document.createTextNode(selector + '{' + cssText + '}');

                        function formatCssText(style) {
                            var content = style.getPropertyValue('content');
                            return style.cssText + ' content: ' + content + ';';
                        }

                        function formatCssProperties(style) {

                            return util.asArray(style).map(formatProperty).join('; ') + ';';

                            function formatProperty(name) {
                                return name + ': ' + style.getPropertyValue(name) + (style.getPropertyPriority(name) ? ' !important' : '');
                            }
                        }
                    }
                }
            }

            function copyUserInput() {
                if (util.isTextArea(original)) clone.innerHTML = original.value;
                if (util.isInput(original)) clone.setAttribute("value", original.value);
            }

            function fixSvg() {
                if (!util.isSVG(clone)) return;
                clone.setAttribute('xmlns', 'http://www.w3.org/2000/svg');

                if (!util.isSVGRect(clone)) return;
                ['width', 'height'].forEach(function (attribute) {
                    var value = clone.getAttribute(attribute);
                    if (!value) return;

                    clone.style.setProperty(attribute, value);
                });
            }
        }
    }

    function embedFonts(node) {
        return fontFaces.resolveAll().then(function (cssText) {
            var styleNode = self.document.createElement('style');
            node.appendChild(styleNode);
            styleNode.appendChild(self.document.createTextNode(cssText));
            return node;
        });
    }

    function inlineImages(node) {
        return images.inlineAll(node).then(function () {
            return node;
        });
    }

    function makeSvgDataUri(node, width, height) {
        return Promise.resolve(node).then(function (node) {
            node.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml');
            return new self.window.XMLSerializer().serializeToString(node);
        }).then(util.escapeXhtml).then(function (xhtml) {
            return ['data:image/svg+xml;charset=utf-8,', '<svg xmlns="http://www.w3.org/2000/svg" width="', width, '" height="', height, '">', '<foreignObject x="0" y="0" width="100%" height="100%">', xhtml, '</foreignObject>', '</svg>'].join('');
        });
    }

    function newUtil() {
        return {
            escape: escape,
            parseExtension: parseExtension,
            mimeType: mimeType,
            dataAsUrl: dataAsUrl,
            isDataUrl: isDataUrl,
            canvasToBlob: canvasToBlob,
            resolveUrl: resolveUrl,
            getAndEncode: getAndEncode,
            uid: uid(),
            delay: delay,
            asArray: asArray,
            escapeXhtml: escapeXhtml,
            makeImage: makeImage,
            width: width,
            height: height,

            isElement: isElement,
            isCanvas: isCanvas,
            isTextArea: isTextArea,
            isInput: isInput,
            isSVG: isSVG,
            isSVGRect: isSVGRect,
            isImage: isImage
        };

        function mimes() {
            /*
             * Only WOFF and EOT mime types for fonts are 'real'
             * see http://www.iana.org/assignments/media-types/media-types.xhtml
             */
            var WOFF = 'application/font-woff';
            var JPEG = 'image/jpeg';

            return {
                'woff': WOFF,
                'woff2': WOFF,
                'ttf': 'application/font-truetype',
                'eot': 'application/vnd.ms-fontobject',
                'png': 'image/png',
                'jpg': JPEG,
                'jpeg': JPEG,
                'gif': 'image/gif',
                'tiff': 'image/tiff',
                'svg': 'image/svg+xml'
            };
        }

        function parseExtension(url) {
            var match = /\.([^\.\/]*?)$/g.exec(url);
            if (match) return match[1];else return '';
        }

        function mimeType(url) {
            var extension = parseExtension(url).toLowerCase();
            return mimes()[extension] || '';
        }

        function isDataUrl(url) {
            return url.search(/^(data:)/) !== -1;
        }

        function toBlob(canvas) {
            return new Promise(function (resolve) {
                var binaryString = self.window.atob(canvas.toDataURL().split(',')[1]);
                var length = binaryString.length;
                var binaryArray = new self.window.Uint8Array(length);

                for (var i = 0; i < length; i++) {
                    binaryArray[i] = binaryString.charCodeAt(i);
                }resolve(new self.window.Blob([binaryArray], {
                    type: 'image/png'
                }));
            });
        }

        function canvasToBlob(canvas) {
            if (canvas.toBlob) return new Promise(function (resolve) {
                canvas.toBlob(resolve);
            });

            return toBlob(canvas);
        }

        function resolveUrl(url, baseUrl) {
            var doc = self.document.implementation.createHTMLDocument();
            var base = doc.createElement('base');
            doc.head.appendChild(base);
            var a = doc.createElement('a');
            doc.body.appendChild(a);
            base.href = baseUrl;
            a.href = url;
            return a.href;
        }

        function uid() {
            var index = 0;

            return function () {
                return 'u' + fourRandomChars() + index++;

                function fourRandomChars() {
                    /* see http://stackoverflow.com/a/6248722/2519373 */
                    return ('0000' + (self.window.Math.random() * self.window.Math.pow(36, 4) << 0).toString(36)).slice(-4);
                }
            };
        }

        function makeImage(uri) {
            return new Promise(function (resolve, reject) {
                var image = new self.window.Image();
                image.onload = function () {
                    resolve(image);
                };
                image.onerror = reject;
                image.src = uri;
            });
        }

        function getAndEncode(url) {
            var data = self.cache.get(url);
            if (data) {
                if (data.content) {
                    return data.content;
                } else {
                    return new Promise(function (resolve) {
                        if (data.content) {
                            resolve(data.content);
                        } else {
                            data.pendings.push(resolve);
                        }
                    });
                }
            } else {
                data = self.cache.put(url, { pendings: [] });

                var TIMEOUT = 30000;

                return new Promise(function (resolve) {
                    var request = new self.window.XMLHttpRequest();

                    request.onreadystatechange = done;
                    request.ontimeout = timeout;
                    request.responseType = 'blob';
                    request.timeout = TIMEOUT;
                    request.open('GET', url, true);
                    request.send();

                    function done() {
                        if (request.readyState !== 4) return;

                        if (request.status !== 200) {
                            fail('cannot fetch resource: ' + url + ', status: ' + request.status);
                            return;
                        }

                        var encoder = new self.window.FileReader();
                        encoder.onloadend = function () {
                            data.content = encoder.result.split(/,/)[1];
                            for (var _iterator = data.pendings, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                                var _ref;

                                if (_isArray) {
                                    if (_i >= _iterator.length) break;
                                    _ref = _iterator[_i++];
                                } else {
                                    _i = _iterator.next();
                                    if (_i.done) break;
                                    _ref = _i.value;
                                }

                                var _resolve = _ref;

                                _resolve(data.content);
                            }
                            data.pendings = [];
                            resolve(data.content);
                        };
                        encoder.readAsDataURL(request.response);
                    }

                    function timeout() {
                        fail('timeout of ' + TIMEOUT + 'ms occured while fetching resource: ' + url);
                    }

                    function fail(message) {
                        console.error(message);
                        resolve('');
                    }
                });
            }
        }

        function dataAsUrl(content, type) {
            return ['data:', type, ';base64,', content].join('');
        }

        function escape(string) {
            return string.replace(/([.*+?^${}()|\[\]\/\\])/g, '\\$1');
        }

        function delay(ms) {
            return function (arg) {
                return new Promise(function (resolve) {
                    setTimeout(function () {
                        resolve(arg);
                    }, ms);
                });
            };
        }

        function asArray(arrayLike) {
            var array = [];
            var length = arrayLike.length;
            for (var i = 0; i < length; i++) {
                array.push(arrayLike[i]);
            }return array;
        }

        function escapeXhtml(string) {
            return string.replace(/(#|\n)/g, function (c) {
                return c === '#' ? '%23' : '%0A';
            });
        }

        function width(node) {
            var leftBorder = px(node, 'border-left-width');
            var rightBorder = px(node, 'border-right-width');
            return node.scrollWidth + leftBorder + rightBorder;
        }

        function height(node) {
            var topBorder = px(node, 'border-top-width');
            var bottomBorder = px(node, 'border-bottom-width');
            return node.scrollHeight + topBorder + bottomBorder;
        }

        function px(node, styleProperty) {
            var value = self.window.getComputedStyle(node).getPropertyValue(styleProperty);
            return parseFloat(value.replace('px', ''));
        }

        function isElement(node) {
            return node instanceof self.window.Element;
        }

        function isCanvas(node) {
            return node instanceof self.window.HTMLCanvasElement;
        }

        function isTextArea(node) {
            return node instanceof self.window.HTMLTextAreaElement;
        }

        function isInput(node) {
            return node instanceof self.window.HTMLInputElement;
        }

        function isSVG(node) {
            return node instanceof self.window.SVGElement;
        }

        function isSVGRect(node) {
            return node instanceof self.window.SVGRectElement;
        }

        function isImage(node) {
            return node instanceof self.window.HTMLImageElement;
        }
    }

    function newInliner() {
        var URL_REGEX = /url\(['"]?([^'"]+?)['"]?\)/g;

        return {
            inlineAll: inlineAll,
            shouldProcess: shouldProcess,
            impl: {
                readUrls: readUrls,
                inline: inline
            }
        };

        function shouldProcess(string) {
            return string.search(URL_REGEX) !== -1;
        }

        function readUrls(string) {
            var result = [];
            var match = void 0;
            while ((match = URL_REGEX.exec(string)) !== null) {
                result.push(match[1]);
            }
            return result.filter(function (url) {
                return !util.isDataUrl(url);
            });
        }

        function inline(string, url, baseUrl, get) {
            return Promise.resolve(url).then(function (url) {
                return baseUrl ? util.resolveUrl(url, baseUrl) : url;
            }).then(get || util.getAndEncode).then(function (data) {
                return util.dataAsUrl(data, util.mimeType(url));
            }).then(function (dataUrl) {
                return string.replace(urlAsRegex(url), ['$1', dataUrl, '$3'].join(''));
            });

            function urlAsRegex(url) {
                return new self.window.RegExp(['(url\\([\'"]?)(', util.escape(url), ')([\'"]?\\))'].join(''), 'g');
            }
        }

        function inlineAll(string, baseUrl, get) {
            if (nothingToInline()) return Promise.resolve(string);

            return Promise.resolve(string).then(readUrls).then(function (urls) {
                var done = Promise.resolve(string);
                urls.forEach(function (url) {
                    done = done.then(function (string) {
                        return inline(string, url, baseUrl, get);
                    });
                });
                return done;
            });

            function nothingToInline() {
                return !shouldProcess(string);
            }
        }
    }

    function newFontFaces() {
        return {
            resolveAll: resolveAll,
            impl: {
                readAll: readAll
            }
        };

        function resolveAll() {
            return readAll(self.document).then(function (webFonts) {
                return Promise.all(webFonts.map(function (webFont) {
                    return webFont.resolve();
                }));
            }).then(function (cssStrings) {
                return cssStrings.join('\n');
            });
        }

        function readAll() {
            return Promise.resolve(util.asArray(self.document.styleSheets)).then(getCssRules).then(selectWebFontRules).then(function (rules) {
                return rules.map(newWebFont);
            });

            function selectWebFontRules(cssRules) {
                return cssRules.filter(function (rule) {
                    return rule.type === CSSRule.FONT_FACE_RULE;
                }).filter(function (rule) {
                    return inliner.shouldProcess(rule.style.getPropertyValue('src'));
                });
            }

            function getCssRules(styleSheets) {
                var cssRules = [];
                styleSheets.forEach(function (sheet) {
                    try {
                        util.asArray(sheet.cssRules || []).forEach(cssRules.push.bind(cssRules));
                    } catch (e) {
                        console.log('Error while reading CSS rules from ' + sheet.href, e.toString());
                    }
                });
                return cssRules;
            }

            function newWebFont(webFontRule) {
                return {
                    resolve: function resolve() {
                        var baseUrl = (webFontRule.parentStyleSheet || {}).href;
                        return inliner.inlineAll(webFontRule.cssText, baseUrl);
                    },
                    src: function src() {
                        return webFontRule.style.getPropertyValue('src');
                    }
                };
            }
        }
    }

    function newImages() {
        return {
            inlineAll: inlineAll,
            impl: {
                newImage: newImage
            }
        };

        function newImage(element) {
            return {
                inline: inline
            };

            function inline(get) {
                if (util.isDataUrl(element.src)) return Promise.resolve();

                return Promise.resolve(element.src).then(get || util.getAndEncode).then(function (data) {
                    return util.dataAsUrl(data, util.mimeType(element.src));
                }).then(function (dataUrl) {
                    return new Promise(function (resolve, reject) {
                        element.onload = resolve;
                        element.onerror = reject;
                        element.src = dataUrl;
                    });
                });
            }
        }

        function inlineAll(node) {
            if (!util.isElement(node)) return Promise.resolve(node);

            return inlineBackground(node).then(function () {
                if (util.isImage(node)) return newImage(node).inline();else return Promise.all(util.asArray(node.childNodes).map(function (child) {
                    return inlineAll(child);
                }));
            });

            function inlineBackground(node) {
                var background = node.style.getPropertyValue('background');

                if (!background) return Promise.resolve(node);

                return inliner.inlineAll(background).then(function (inlined) {
                    node.style.setProperty('background', inlined, node.style.getPropertyPriority('background'));
                }).then(function () {
                    return node;
                });
            }
        }
    }
};

exports.default = Dom2Image;

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Drag = function () {
  function Drag(wnd, doc, visualWorld) {
    _classCallCheck(this, Drag);

    this.wnd = wnd;
    this.doc = doc;
    this.visual = visualWorld;
    this.coords = new _libs.THREE.Vector2();
    this.intersection = new _libs.THREE.Vector3();
    this.raycaster = this.visual.raycaster;
    this.camera = this.visual.camera;
    this.plane = new _libs.THREE.Plane();
    this.threes = [];
    this.selected = null;
    this.enabled = true;
    this.controlsState = this.visual.getControlsState();

    this.element = this.visual.element;
    this.binds = {
      onMouseMove: this.onMouseMove.bind(this),
      onMouseDown: this.onMouseDown.bind(this),
      onMouseUp: this.onMouseUp.bind(this)
    };
    (0, _libs.$)(this.element).on('mousemove', this.binds.onMouseMove);
    (0, _libs.$)(this.element).on('mousedown', this.binds.onMouseDown);
    (0, _libs.$)(this.doc).on('mouseup', this.binds.onMouseUp);
  }

  Drag.prototype.addThree = function addThree(three) {
    this.threes.push(three);
  };

  Drag.prototype.removeThree = function removeThree(three) {
    var i = this.threes.indexOf(three);
    if (~i) {
      this.threes.splice(i, 1);
    }
  };

  Drag.prototype.onPickCallback = function onPickCallback() {
    return true;
  };

  Drag.prototype.onDragCallback = function onDragCallback() {
    return true;
  };

  Drag.prototype.onReleaseCallback = function onReleaseCallback() {};

  Drag.prototype.dispose = function dispose() {
    (0, _libs.$)(this.element).off('mousemove', this.binds.onMouseMove);
    (0, _libs.$)(this.element).off('mousedown', this.binds.onMouseDown);
    (0, _libs.$)(this.doc).off('mouseup', this.binds.onMouseUp);
  };

  Drag.prototype.setCoordsFromEvent = function setCoordsFromEvent(e) {
    var jElement = (0, _libs.$)(this.element);
    var offset = jElement.offset();
    this.coords.x = (e.pageX - offset.left) / jElement.width() * 2 - 1;
    this.coords.y = -((e.pageY - offset.top) / jElement.height()) * 2 + 1;
    return this.coords;
  };

  Drag.prototype.onMouseDown = function onMouseDown(e) {
    if (!this.enabled) return;

    if (this.selected) this.onMouseUp(e);

    this.setCoordsFromEvent(e);
    this.raycaster.setFromCamera(this.coords, this.camera);

    var intersects = this.raycaster.intersectObjects(this.threes);
    if (intersects.length > 0) {
      var selected = intersects[0].object;
      if (!this.onPickCallback(intersects[0])) return;
      var v = intersects[0].point.clone();
      this.distance = v.sub(this.raycaster.ray.origin).length();;
      this.controlsState = this.visual.getControlsState();
      this.visual.setControlsState(false);
      this.plane.setFromNormalAndCoplanarPoint(this.visual.camera.getWorldDirection(this.plane.normal), intersects[0].point);
      //this.plane.setFromNormalAndCoplanarPoint(this.plane.normal.set(0,0,1), new THREE.Vector3(0,0,0));
      this.selected = selected;
    }
  };

  Drag.prototype.onMouseMove = function onMouseMove(e) {
    if (!this.enabled) return;
    e.preventDefault();

    if (this.selected) {
      this.setCoordsFromEvent(e);
      this.raycaster.setFromCamera(this.coords, this.camera);
      if (this.raycaster.ray.intersectPlane(this.plane, this.intersection)) {
        if (!this.onDragCallback(this.intersection)) this.onMouseUp(e);
      } /**/
      //this.intersection.copy(this.raycaster.ray.direction).normalize().multiplyScalar(this.distance).add(this.raycaster.ray.origin);/**/
      //if(!this.onDragCallback(this.selected, this.intersection)) this.onMouseUp(e);
    }
  };

  Drag.prototype.onMouseUp = function onMouseUp(e) {
    if (this.selected) {
      this.onReleaseCallback();
      this.selected = null;
      this.visual.setControlsState(this.controlsState);
    }
    if (!this.enabled) return;
    e.preventDefault();
  };

  return Drag;
}();

exports.default = Drag;

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

__webpack_require__(68)(_libs.$);

var EventsToActions = function () {
  EventsToActions.getEventFlags = function getEventFlags(e) {
    return e.ctrlKey << 0 | e.shiftKey << 1 | e.altKey << 2;
  };

  EventsToActions.getPosition = function getPosition(touches) {
    var x = void 0,
        y = void 0;
    if (touches.length === 2) {
      x = touches[1].pageX - touches[0].pageX;
      y = touches[1].pageY - touches[0].pageY;
      y = -Math.sqrt(x * x + y * y);
      x = 0;
    } else {
      x = touches[0].pageX;
      y = touches[0].pageY;
    }
    return {
      x: x,
      y: y
    };
  };

  function EventsToActions(element, actions) {
    _classCallCheck(this, EventsToActions);

    this.actions = actions || {};
    this.element = element;
    this.doc = element[0].ownerDocument;
    this.wnd = this.doc.defaultView;
    this.enabled = true;

    this.binds = {
      contextMenu: this.contextMenu.bind(this),

      mouseDown: this.mouseDown.bind(this),
      mouseMove: this.mouseMove.bind(this),
      mouseUp: this.mouseUp.bind(this),
      mouseWheel: this.mouseWheel.bind(this),

      mouseMoveDoc: this.mouseMoveDoc.bind(this),
      mouseUpDoc: this.mouseUpDoc.bind(this),

      click: this.click.bind(this),
      dblclick: this.dblclick.bind(this),

      touchStart: this.touchStart.bind(this),
      touchMove: this.touchMove.bind(this),
      touchEnd: this.touchEnd.bind(this),

      keyDown: this.keyDown.bind(this),
      keyPress: this.keyPress.bind(this),
      keyUp: this.keyUp.bind(this)
    };

    this.element.on('contextmenu', this.binds.contextMenu);

    this.element.on('mousedown', this.binds.mouseDown);
    this.element.on('mousemove', this.binds.mouseMove);
    this.element.on('mouseup', this.binds.mouseUp);
    this.element.on('mousewheel', this.binds.mouseWheel);

    (0, _libs.$)(this.doc).on('mousemove', this.binds.mouseMoveDoc);
    (0, _libs.$)(this.doc).on('mouseup', this.binds.mouseUpDoc);

    this.element.on('click', this.binds.click);
    this.element.on('dblclick', this.binds.dblclick);

    this.element.on('touchstart', this.binds.touchStart);
    this.element.on('touchmove', this.binds.touchMove);
    this.element.on('touchend', this.binds.touchEnd);

    (0, _libs.$)(this.wnd).on('keydown', this.binds.keyDown);
    (0, _libs.$)(this.wnd).on('keypress', this.binds.keyPress);
    (0, _libs.$)(this.wnd).on('keyup', this.binds.keyUp);
  }

  EventsToActions.prototype.addAction = function addAction(action, type, code, flags) {
    type = type.toLowerCase();
    if (!this.actions[type]) {
      this.actions[type] = {};
    }
    if (!this.actions[type][code]) {
      this.actions[type][code] = {};
    }
    if (!this.actions[type][code][flags]) {
      this.actions[type][code][flags] = [];
    }
    this.actions[type][code][flags].push(action);
  };

  EventsToActions.prototype.getActions = function getActions(type, code, flags) {
    return ((this.actions[type] || {})[code] || {})[flags] || [];
  };

  EventsToActions.prototype.fireActions = function fireActions(actions, e, data) {
    for (var _iterator = actions, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var action = _ref;

      action(e, data);
    }
  };

  EventsToActions.prototype.contextMenu = function contextMenu(e) {
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e);
      this.fireActions(this.getActions('contextmenu', e.button, flags), e);
    }
  };

  EventsToActions.prototype.mouseDown = function mouseDown(e) {
    if (this.picked) {
      this.mouseUpDoc();
    }
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e);
      this.fireActions(this.getActions('mousedown', e.button, flags), e);
      this.picked = {
        x: e.pageX,
        y: e.pageY,
        actions: this.getActions('mousedrag', e.button, flags)
      };
      this.fireActions(this.picked.actions, e, {
        state: 'start'
      });
    }
  };

  EventsToActions.prototype.mouseMove = function mouseMove(e) {
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e);
      this.fireActions(this.getActions('mousemove', e.button, flags), e);
    }
  };

  EventsToActions.prototype.mouseMoveDoc = function mouseMoveDoc(e) {
    if (this.enabled && this.picked) {
      this.fireActions(this.picked.actions, e, {
        state: 'move',
        dx: e.pageX - this.picked.x,
        dy: e.pageY - this.picked.y
      });
      this.picked = {
        x: e.pageX,
        y: e.pageY,
        actions: this.picked.actions
      };
    }
  };

  EventsToActions.prototype.mouseUp = function mouseUp(e) {
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e);
      this.fireActions(this.getActions('mouseup', e.button, flags), e);
    }
  };

  EventsToActions.prototype.mouseUpDoc = function mouseUpDoc(e) {
    if (this.picked) {
      this.fireActions(this.picked.actions, e, {
        state: 'end'
      });
      delete this.picked;
    }
  };

  EventsToActions.prototype.mouseWheel = function mouseWheel(e) {
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e);
      this.fireActions(this.getActions('mousewheel', 0, flags), e);
    }
  };

  EventsToActions.prototype.clicks = function clicks(e, type) {
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e);
      this.fireActions(this.getActions(type, e.button, flags), e);
    }
  };

  EventsToActions.prototype.click = function click(e) {
    this.clicks(e, 'click');
  };

  EventsToActions.prototype.dblclick = function dblclick(e) {
    this.clicks(e, 'dblclick');
  };

  EventsToActions.prototype.touchPick = function touchPick(e, flags, touches) {
    this.picked = _extends({}, EventsToActions.getPosition(touches), {
      actions: this.getActions('touchdrag', touches.length, flags),
      code: touches.length,
      flags: flags
    });
    this.fireActions(this.picked.actions, e, {
      state: 'start'
    });
  };

  EventsToActions.prototype.touchStart = function touchStart(e) {
    if (this.picked) {
      this.touchEnd(e);
    }
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e),
          touches = e.touches || e.originalEvent.touches;
      this.fireActions(this.getActions('touchstart', touches.length, flags), e);
      this.touchPick(e, flags, touches);
    }
  };

  EventsToActions.prototype.touchMove = function touchMove(e) {
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e),
          touches = e.touches || e.originalEvent.touches;
      this.fireActions(this.getActions('touchmove', touches.length, flags), e);
      if (this.picked) {
        if (this.picked.code === touches.length && this.picked.flags === flags) {
          var pos = EventsToActions.getPosition(touches);
          this.fireActions(this.picked.actions, e, {
            state: 'move',
            dx: pos.x - this.picked.x,
            dy: pos.y - this.picked.y
          });
          this.picked = _extends({}, this.picked, pos);
        } else {
          this.touchEnd(e);
          this.touchPick(e, flags, touches);
        }
      }
    }
  };

  EventsToActions.prototype.touchEnd = function touchEnd(e) {
    if (this.picked) {
      this.fireActions(this.picked.actions, e, {
        state: 'end'
      });
      delete this.picked;
    }
  };

  EventsToActions.prototype.key = function key(e, type) {
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e);
      this.fireActions(this.getActions(type, e.keyCode, flags), e);
    }
  };

  EventsToActions.prototype.keyDown = function keyDown(e) {
    this.key(e, 'keydown');
  };

  EventsToActions.prototype.keyPress = function keyPress(e) {
    this.key(e, 'keypress');
  };

  EventsToActions.prototype.keyUp = function keyUp(e) {
    this.key(e, 'keyup');
  };

  EventsToActions.prototype.dispose = function dispose() {
    this.element.off('contextmenu', this.binds.contextMenu);

    this.element.off('mousedown', this.binds.mouseDown);
    this.element.off('mousemove', this.binds.mouseMove);
    this.element.off('mouseup', this.binds.mouseUp);
    this.element.off('mousewheel', this.binds.mouseWheel);

    (0, _libs.$)(this.doc).off('mousemove', this.binds.mouseMoveDoc);
    (0, _libs.$)(this.doc).off('mouseup', this.binds.mouseUpDoc);

    this.element.off('click', this.binds.click);
    this.element.off('dblclick', this.binds.dblclick);

    this.element.off('touchstart', this.binds.touchStart);
    this.element.off('touchmove', this.binds.touchMove);
    this.element.off('touchend', this.binds.touchEnd);

    (0, _libs.$)(this.wnd).off('keydown', this.binds.keyDown);
    (0, _libs.$)(this.wnd).off('keypress', this.binds.keyPress);
    (0, _libs.$)(this.wnd).off('keyup', this.binds.keyUp);
  };

  return EventsToActions;
}();

EventsToActions.modKeys = {
  Ctrl: 1,
  Shift: 2,
  Alt: 4
};
EventsToActions.mouseButtons = {
  Left: 0,
  Middle: 1,
  Right: 2
};
exports.default = EventsToActions;

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _libs = __webpack_require__(0);

var _ImageBase2 = __webpack_require__(4);

var _ImageBase3 = _interopRequireDefault(_ImageBase2);

var _BaseMathUtils = __webpack_require__(2);

var _BaseMathUtils2 = _interopRequireDefault(_BaseMathUtils);

var _Dom2Image = __webpack_require__(46);

var _Dom2Image2 = _interopRequireDefault(_Dom2Image);

var _DocMouseSimulator = __webpack_require__(45);

var _DocMouseSimulator2 = _interopRequireDefault(_DocMouseSimulator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var InteractiveImage = function (_ImageBase) {
  _inherits(InteractiveImage, _ImageBase);

  function InteractiveImage(context, width, height, color, src, cache, injector) {
    _classCallCheck(this, InteractiveImage);

    var _this = _possibleConstructorReturn(this, _ImageBase.call(this, context, width, height, color));

    _this.iId = 'i' + _BaseMathUtils2.default.getUnique();
    var jFrame = (0, _libs.$)('<iframe id="' + _this.iId + '" src="' + src + '" style="position: fixed; left: -1000px;"></iframe>');
    (0, _libs.$)(_this.doc.body).append(jFrame);
    _this.frame = jFrame[0];

    _this.binds = {};

    if (injector) {
      injector(_this.frame.contentWindow);
    }

    if (_this.doc.implementation.hasFeature('www.http://w3.org/TR/SVG11/feature#Extensibility', '1.1')) {
      // svg foreignObject renderer
      _this.image = new Image();
      _this.binds.imageLoad = function () {
        _this.renderImage(_this.image);
        _this.finishRender();
      };
      (0, _libs.$)(_this.image).on('load', _this.binds.imageLoad);
      _this.svgRender = new _Dom2Image2.default(_this.frame.contentWindow, _this.frame.contentDocument, cache);
    } // otherwise - html2canvas

    _this.binds.frameLoad = function () {
      if (~_this.frame.contentDocument.title.indexOf('404')) {
        _this.startRender = function () {
          _this.renderNotFoundPage();
          _this.finishRender();
        };
        _this.finishLoad();
      } else {
        setTimeout(function () {
          if (_this.frame) {
            _this.width = (0, _libs.$)(_this.frame.contentDocument.body).width();
            _this.height = (0, _libs.$)(_this.frame.contentDocument.body).height();
            jFrame.css('width', _this.width + 'px').css('height', _this.height + 'px');
            jFrame.offset({ left: -_this.width - 100, top: 0 });
            if (_this.svgRender) {
              _this.simulator = new _DocMouseSimulator2.default(jFrame, _this.frame.contentDocument.body, _this.element);
              _this.simulator.addDocChangeClb(_this.finishLoad.bind(_this));
            }
            _this.startRender = function () {
              _this.render();
            };
            _this.finishLoad();
          }
        }, 500);
      }
    };
    (0, _libs.$)(_this.frame.contentWindow).on('load', _this.binds.frameLoad);
    return _this;
  }

  InteractiveImage.prototype.getSimulatedDoc = function getSimulatedDoc() {
    return this.frame.contentDocument;
  };

  InteractiveImage.prototype.render = function render() {
    var _this2 = this;

    if (this.svgRender) {
      this.svgRender.toSvg(this.simulator.element, { height: this.height + 'px', width: this.width + 'px' }).then(function (dataUrl) {
        _this2.image.src = dataUrl;
      }).catch(function (error) {
        console.error('Dom2Image: ', error);
        _this2.renderBlankPage();
        _this2.finishRender();
      });
    } else {
      (0, _libs.html2canvas)(this.frame.contentDocument.body, { timeout: 30000 }).then(function (canvas) {
        _this2.renderImage(canvas);
        _this2.finishRender();
      });
    }
  };

  InteractiveImage.prototype.dispose = function dispose() {
    (0, _libs.$)(this.image).off('load', this.binds.imageLoad);
    (0, _libs.$)(this.frame.contentWindow).off('load', this.binds.frameLoad);
    (0, _libs.$)(this.doc.body).find('#' + this.iId).remove();
    if (this.image) {
      this.image.src = '';
      delete this.image;
    }
    this.frame.src = '';
    delete this.frame;
    _ImageBase.prototype.dispose.call(this);
  };

  InteractiveImage.prototype.simulate = function simulate(e, doc, x, y) {
    if (this.simulator) {
      this.simulator.simulate(e, doc, x, y);
    }
  };

  return InteractiveImage;
}(_ImageBase3.default);

exports.default = InteractiveImage;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _libs = __webpack_require__(0);

var _GraphUtils = __webpack_require__(5);

var _GraphUtils2 = _interopRequireDefault(_GraphUtils);

var _MathUtils = __webpack_require__(3);

var _MathUtils2 = _interopRequireDefault(_MathUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LoadingAnimation = function () {
  LoadingAnimation.prototype.dy = function dy(t, y) {
    var w = y[0],
        a = y[1];
    return [-this.g * Math.cos(a), w];
  };

  LoadingAnimation.prototype.integrate = function integrate(T) {
    var t = 0,
        dt = this.p.dt,
        os = this.os;
    while (t < T) {
      if (t + dt > T) {
        dt = T - t;
      }
      os = _MathUtils2.default.rk4(this.dy.bind({ g: this.p.g }), 0, dt, os);
      t += dt;
    }
    return os;
  };

  LoadingAnimation.prototype.calcTimeTo = function calcTimeTo(target) {
    var t = 0,
        dt = this.p.dt,
        os = this.os;
    while (Math.abs(os[1] - target) > 1e-4) {
      var nos = _MathUtils2.default.rk4(this.dy.bind({ g: this.p.g }), 0, dt, os);
      if (nos[0] < 0 && nos[1] < target || nos[0] > 0 && nos[1] > target) {
        dt /= 2;
      } else {
        os = nos;
        t += dt;
      }
    }
    return t;
  };

  LoadingAnimation.prototype.update = function update(T) {
    this.os = this.integrate(T);

    this.t += T;
    if (this.t >= this.p.updateInterval) {
      this.t = 0;
      var r = 0.1 * Math.min(this.c.width, this.c.height),
          a = this.os[1],
          x0 = 0.5 * this.c.width,
          y0 = 0.5 * this.c.height,
          ctx = this.ctx;

      ctx.clearRect(0, 0, this.c.width, this.c.height);
      ctx.beginPath();
      ctx.fillStyle = _GraphUtils2.default.color2Rgba(this.p.color, 1);
      ctx.rect(0, 0, this.c.width, this.c.height);
      ctx.fill();

      ctx.beginPath();
      ctx.shadowBlur = 50;
      ctx.fillStyle = _GraphUtils2.default.color2Rgba(_GraphUtils2.default.inverseColor(this.p.color, 0.9), Math.abs(this.os[0] / 6.36));
      ctx.shadowColor = _GraphUtils2.default.color2Rgba(_GraphUtils2.default.inverseColor(this.p.color, 1), 0.9);
      ctx.shadowOffsetX = 0;
      ctx.shadowOffsetY = 0;
      ctx.font = 'bold ' + Math.round(0.25 * r) + 'px Arial';
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      ctx.fillText("Loading...", x0, y0);

      var ps = 10,
          da = 2 * Math.PI / ps; //2.5*_r/r
      ctx.shadowColor = _GraphUtils2.default.color2Rgba(_GraphUtils2.default.inverseColor(this.p.color, 1), 0.7);
      for (var i = 0, _a = a, _r = 0.2 * r; i < ps; ++i, _r *= 0.9, _a += da) {
        ctx.beginPath();
        ctx.fillStyle = _GraphUtils2.default.color2Rgba(_GraphUtils2.default.inverseColor(this.p.color, (ps - i) / ps), 0.7 * (ps - i) / ps);
        var cx = x0 + r * Math.cos(_a),
            cy = y0 - r * Math.sin(_a),
            nx = x0 + r * Math.cos(_a + da),
            ny = y0 - r * Math.sin(_a + da);
        ctx.shadowOffsetX = 0.2 * (nx - cx);
        ctx.shadowOffsetY = 0.2 * (ny - cy);
        ctx.arc(cx, cy, _r, 0, Math.PI * 2, 1);
        ctx.fill();
      }
      if (this.onChange) {
        this.onChange(this.c, this.p.color);
      }
    }
  };

  LoadingAnimation.prototype.getImage = function getImage() {
    return this.c;
  };

  LoadingAnimation.prototype.dispose = function dispose() {
    this.c.width = 0;
    this.c.height = 0;
    delete this.ctx;
    delete this.c;
  };

  LoadingAnimation.prototype.createSprite = function createSprite(n) {
    var c = (0, _libs.$)('<canvas width="' + this.c.width * n + '" height="' + this.c.height + '"></canvas>')[0],
        ctx = c.getContext('2d'),
        t = this.calcTimeTo(this.os[1] + Math.sign(this.os[0]) * 2 * Math.PI),
        dt = t / (n + 1);
    var updateInterval = this.p.updateInterval;

    this.p.updateInterval = 0;
    for (var i = 0; i < n; ++i) {
      this.update(dt);
      ctx.drawImage(this.c, i * this.c.width, 0);
    }
    this.p.updateInterval = updateInterval;
    return c;
  };

  function LoadingAnimation(width, height, color) {
    _classCallCheck(this, LoadingAnimation);

    var jC = (0, _libs.$)('<canvas width="' + width + '" height="' + height + '"></canvas>');
    this.c = jC[0];
    this.p = {
      g: 9.8,
      dt: 1 / 60,
      color: color,
      updateInterval: 0.25
    };
    this.ctx = this.c.getContext('2d');
    this.os = [-2, Math.PI / 2];
    this.t = this.p.updateInterval;
  }

  return LoadingAnimation;
}();

exports.default = LoadingAnimation;

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LoadingController = function () {
  function LoadingController(view) {
    var showProgress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var loadingMsg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

    _classCallCheck(this, LoadingController);

    this.view = view;
    this.progress = 0;
    this.showProgress = showProgress;
    this.getLoadingMsg = loadingMsg || LoadingController.defaultLoadingMsg;
    this.updateView();
  }

  LoadingController.defaultLoadingMsg = function defaultLoadingMsg(progress) {
    return ['Please wait... the Application is Loading: ', progress, '%'].join('');
  };

  LoadingController.prototype.dispose = function dispose() {
    this.showProgress = false;
    this.updateView();
    delete this.view;
  };

  LoadingController.prototype.setProgress = function setProgress(v) {
    this.progress = v;
    this.updateView();
  };

  LoadingController.prototype.updateView = function updateView() {
    if (this.view) {

      this.view.setState('widLoadingProgress', {
        enable: true,
        visible: this.showProgress,
        active: false
      });

      this.view.setState('txtLoadingProgress', {
        value: this.getLoadingMsg(this.progress),
        visible: true
      });

      for (var _iterator = this.view.getLinks(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var name = _ref;

        this.view.setState(name, {
          enable: false,
          visible: true,
          active: false
        });
      }

      this.view.setState('inpPages', {
        visible: true,
        value: ''
      });

      this.view.setState('inpPage', {
        visible: true,
        enable: false,
        value: ''
      });
    }
  };

  return LoadingController;
}();

exports.default = LoadingController;

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _libs = __webpack_require__(0);

var _EventConverter2 = __webpack_require__(15);

var _EventConverter3 = _interopRequireDefault(_EventConverter2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MouseEventConverter = function (_EventConverter) {
  _inherits(MouseEventConverter, _EventConverter);

  function MouseEventConverter(wnd, doc, element) {
    _classCallCheck(this, MouseEventConverter);

    var _this = _possibleConstructorReturn(this, _EventConverter.call(this, wnd, doc));

    _this.element = element;
    _this.binds = {
      convert: _this.convert.bind(_this)
    };
    (0, _libs.$)(_this.element).on('mousemove mousedown mouseover mouseout click', _this.binds.convert);
    (0, _libs.$)(_this.doc).on('mouseup', _this.binds.convert);
    return _this;
  }

  MouseEventConverter.prototype.convert = function convert(e, data) {
    _EventConverter.prototype.convert.call(this, this.filter ? this.filter(this.element, e) : e, data);
  };

  MouseEventConverter.prototype.dispose = function dispose() {
    (0, _libs.$)(this.element).off('mousemove mousedown mouseover mouseout click', this.binds.convert);
    (0, _libs.$)(this.doc).off('mouseup', this.binds.convert);
  };

  return MouseEventConverter;
}(_EventConverter3.default);

exports.default = MouseEventConverter;

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(0);

var _MathUtils = __webpack_require__(3);

var _MathUtils2 = _interopRequireDefault(_MathUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Object3DWatcher = function () {
  function Object3DWatcher(visual, boundBoxClb) {
    var testScale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.testScale;

    _classCallCheck(this, Object3DWatcher);

    this.visual = visual;
    this.boundBoxClb = boundBoxClb;
    this.testScale = testScale;
    this.camera = visual.camera;
    this.element = this.visual.element;
    this.elementSize = { w: 1, h: 1 };
    this.devicePixelRatio = this.visual.wnd.devicePixelRatio || 1;
    this.orbit = visual.getOrbit();
    this.scale = 1;

    this.eps = 1e-4;
    this.v = new _libs.THREE.Vector3();
    this.dv = new _libs.THREE.Vector2();

    this.enabled = false;

    visual.addRenderCallback(this.update.bind(this));

    this.os = {
      vx: 0,
      vy: 0,
      x: 0,
      y: 0
    };
    this.orbit.update();
    this.camera.updateMatrixWorld();
    var box = this.computeClientBoundBox(),
        k = 1.11;
    this.movePan({ x: -k * box.mid.x, y: -k * box.mid.y });
  }

  Object3DWatcher.prototype.movePan = function movePan(dv) {
    this.orbit.pan(dv.x * this.visual.width(), -dv.y * this.visual.height());
  };

  Object3DWatcher.prototype.vToCamera = function vToCamera(v) {
    v.project(this.camera);
    return {
      x: 0.5 * v.x,
      y: 0.5 * v.y
    };
  };

  Object3DWatcher.prototype.computeClientBoundBox = function computeClientBoundBox() {
    var box = this.boundBoxClb(),
        xs = [box.min.x, box.max.x],
        ys = [0, 0],
        zs = [box.min.z, box.max.z];

    var ps = [],
        res = { max: {}, min: {} };
    for (var _iterator = xs, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var x = _ref;

      for (var _iterator2 = ys, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var y = _ref2;

        for (var _iterator3 = zs, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
          var _ref3;

          if (_isArray3) {
            if (_i3 >= _iterator3.length) break;
            _ref3 = _iterator3[_i3++];
          } else {
            _i3 = _iterator3.next();
            if (_i3.done) break;
            _ref3 = _i3.value;
          }

          var z = _ref3;

          ps.push(this.vToCamera(this.v.set(x, y, z)));
        }
      }
    }

    ps.sort(function (p1, p2) {
      return p1.x - p2.x;
    });
    res.min.x = ps[0].x;
    res.max.x = ps[ps.length - 1].x;
    ps.sort(function (p1, p2) {
      return p1.y - p2.y;
    });
    res.min.y = ps[0].y;
    res.max.y = ps[ps.length - 1].y;

    res.width = res.max.x - res.min.x;
    res.height = res.max.y - res.min.y;

    res.mid = {
      x: 0.5 * (res.max.x + res.min.x),
      y: 0.5 * (res.max.y + res.min.y)
    };

    return res;
  };

  Object3DWatcher.prototype.setObject = function setObject(boundBoxClb) {
    this.boundBoxClb = boundBoxClb;
  };

  Object3DWatcher.prototype.testScale = function testScale() {
    return true;
  };

  Object3DWatcher.prototype.computeCorr = function computeCorr(K, min, max) {
    var corr = 0;
    if (K < 1) {
      if (min > -0.5) {
        corr = -0.5 - min;
      } else if (max < 0.5) {
        corr = 0.5 - max;
      }
    } else {
      if (min < -0.5) {
        corr = -0.5 - min;
      } else if (max > 0.5) {
        corr = 0.5 - max;
      }
    }
    return corr;
  };

  Object3DWatcher.prototype.getScale = function getScale() {
    var box = this.computeClientBoundBox(),
        Kx = this.elementSize.w / box.width,
        Ky = this.elementSize.h / box.height;
    return 1 / Math.min(Kx, Ky);
  };

  Object3DWatcher.prototype.centerView = function centerView(T) {
    var _this = this;

    var box = this.computeClientBoundBox(),
        Kx = this.elementSize.w / box.width,
        Ky = this.elementSize.h / box.height,
        K = Math.min(Kx, Ky);

    if (this.testScale() && Math.abs(1 / K - this.scale) > this.eps) {
      var scale = 1 / K + 0.2 * (this.scale - 1 / K);
      this.orbit.setScale(this.orbit.getScale() / (K * scale));
      this.orbit.update();
      this.camera.updateMatrixWorld();
      box = this.computeClientBoundBox();
      Kx = this.elementSize.w / box.width;
      Ky = this.elementSize.h / box.height;
      K = Math.min(Kx, Ky);
    }

    var dv = this.dv;
    if (K > 1 - this.eps) {
      dv.set(-box.mid.x, -box.mid.y);
    } else {
      dv.set(this.computeCorr(Kx, box.min.x, box.max.x), this.computeCorr(Ky, box.min.y, box.max.y));
    }

    if (Math.sqrt(this.os.vx * this.os.vx + this.os.vy * this.os.vy) > 0.003 || dv.length() > 0.003) {
      var dt = 1 / 60,
          t = 0,
          os = _extends({}, this.os, {
        x: 0,
        y: 0
      });
      os.tf = function (vx, vy, x, y) {
        return {
          x: 75 * (dv.x - x) / Math.pow(_this.devicePixelRatio, 1.5),
          y: 75 * (dv.y - y) / Math.pow(_this.devicePixelRatio, 1.5)
        };
      };
      while (t < T) {
        if (t + dt > T) {
          dt = T - t;
        }
        os = this.integrate(os, dt);
        t += dt;
      }
      this.movePan(os);
      this.os = os;
    }
  };

  Object3DWatcher.prototype.integrate = function integrate(os, dt) {
    var _MathUtils$rk = _MathUtils2.default.rk4(this.dy.bind(os), 0, dt, [os.vx, os.vy, os.x, os.y]),
        vx = _MathUtils$rk[0],
        vy = _MathUtils$rk[1],
        x = _MathUtils$rk[2],
        y = _MathUtils$rk[3];

    return _extends({}, os, {
      vx: vx, vy: vy, x: x, y: y
    });
  };

  Object3DWatcher.prototype.dy = function dy(t, Y) {
    var vx = Y[0],
        vy = Y[1],
        x = Y[2],
        y = Y[3],
        vd = 15,
        tf = this.tf(vx, vy, x, y);

    return [tf.x - vd * vx, tf.y - vd * vy, vx, vy];
  };

  Object3DWatcher.prototype.update = function update(dt) {
    if (this.enabled && this.boundBoxClb) {
      this.centerView(dt);
    }
  };

  return Object3DWatcher;
}();

exports.default = Object3DWatcher;

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Orbit = function (_THREE$EventDispatche) {
  _inherits(Orbit, _THREE$EventDispatche);

  function Orbit(object, domElement) {
    _classCallCheck(this, Orbit);

    var _this = _possibleConstructorReturn(this, _THREE$EventDispatche.call(this));

    _this.object = object;
    _this.domElement = domElement || document.body;

    // Set to false to disable this control
    _this.enabled = true;

    // "target" sets the location of focus, where the object orbits around
    _this.target = new _libs.THREE.Vector3();

    // How far you can dolly in and out(PerspectiveCamera only)
    _this.minDistance = 0;
    _this.maxDistance = Infinity;

    // How far you can zoom in and out(OrthographicCamera only)
    _this.minZoom = 0;
    _this.maxZoom = Infinity;

    // How far you can orbit vertically, upper and lower limits.
    // Range is 0 to Math.PI radians.
    _this.minPolarAngle = 0; // radians
    _this.maxPolarAngle = Math.PI; // radians

    // How far you can orbit horizontally, upper and lower limits.
    // If set, must be a sub-interval of the interval [-Math.PI, Math.PI ].
    _this.minAzimuthAngle = -Infinity; // radians
    _this.maxAzimuthAngle = Infinity; // radians

    // Set to true to enable damping (inertia)
    // If damping is enabled, you must call controls.update() in your animation loop
    _this.enableDamping = false;
    _this.dampingFactor = 0.25;

    // This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
    // Set to false to disable zooming
    _this.enableZoom = true;
    _this.zoomSpeed = 1.0;

    // Set to false to disable rotating
    _this.enableRotate = true;
    _this.rotateSpeed = 1.0;

    // Set to false to disable panning
    _this.enablePan = true;

    // Set to true to automatically rotate around the target
    // If auto-rotate is enabled, you must call controls.update() in your animation loop
    _this.autoRotate = false;
    _this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60

    // for reset
    _this.target0 = _this.target.clone();
    _this.position0 = _this.object.position.clone();
    _this.zoom0 = _this.object.zoom;

    //
    // public methods
    //
    _this.getPolarAngle = function () {
      return spherical.phi;
    };

    _this.getAzimuthalAngle = function () {
      return spherical.theta;
    };

    _this.reset = function () {
      scope.target.copy(scope.target0);
      scope.object.position.copy(scope.position0);
      scope.object.zoom = scope.zoom0;

      scope.object.updateProjectionMatrix();
      scope.dispatchEvent(changeEvent);

      scope.update();
    };

    _this.zoomOut = function () {
      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.zoomSpeed;

      var _speed = this.zoomSpeed;
      this.zoomSpeed = speed;
      dollyIn(getZoomScale());
      this.zoomSpeed = _speed;
    };

    _this.zoomIn = function () {
      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.zoomSpeed;

      var _speed = this.zoomSpeed;
      this.zoomSpeed = speed;
      dollyOut(getZoomScale());
      this.zoomSpeed = _speed;
    };

    _this.getScale = function () {
      return scale;
    };

    _this.setScale = function (newScale) {
      scale = newScale;
    };

    // this method is exposed, but perhaps it would be better if we can make it private...
    _this.update = function () {
      var offset = new _libs.THREE.Vector3();
      // so camera.up is the orbit axis
      var quat = new _libs.THREE.Quaternion().setFromUnitVectors(object.up, new _libs.THREE.Vector3(0, 1, 0));
      var quatInverse = quat.clone().inverse();
      var lastPosition = new _libs.THREE.Vector3();
      var lastQuaternion = new _libs.THREE.Quaternion();

      return function update() {
        var position = scope.object.position;
        offset.copy(position).sub(scope.target);
        // rotate offset to "y-axis-is-up" space
        offset.applyQuaternion(quat);
        // angle from z-axis around y-axis
        spherical.setFromVector3(offset);
        if (scope.autoRotate) {
          rotateLeft(getAutoRotationAngle());
        }
        spherical.theta += sphericalDelta.theta;
        spherical.phi += sphericalDelta.phi;
        // restrict theta to be between desired limits
        spherical.theta = Math.max(scope.minAzimuthAngle, Math.min(scope.maxAzimuthAngle, spherical.theta));
        // restrict phi to be between desired limits
        spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));
        spherical.makeSafe();
        spherical.radius *= scale;
        // restrict radius to be between desired limits
        spherical.radius = Math.max(scope.minDistance, Math.min(scope.maxDistance, spherical.radius));
        // move target to panned location
        scope.target.add(panOffset);
        offset.setFromSpherical(spherical);
        // rotate offset back to "camera-up-vector-is-up" space
        offset.applyQuaternion(quatInverse);
        position.copy(scope.target).add(offset);
        scope.object.lookAt(scope.target);

        if (scope.enableDamping === true) {
          sphericalDelta.theta *= 1 - scope.dampingFactor;
          sphericalDelta.phi *= 1 - scope.dampingFactor;
        } else {
          sphericalDelta.set(0, 0, 0);
        }

        scale = 1;
        panOffset.set(0, 0, 0);

        // update condition is:
        // min(camera displacement, camera rotation in radians)^2 > EPS
        // using small-angle approximation cos(x/2) = 1-x^2 / 8

        if (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {

          scope.dispatchEvent(changeEvent);

          lastPosition.copy(scope.object.position);
          lastQuaternion.copy(scope.object.quaternion);
          zoomChanged = false;

          return true;
        }
        return false;
      };
    }();

    _this.dispose = function () {};

    //
    // internals
    //
    var scope = _this;
    var changeEvent = { type: 'change' };
    var EPS = 1e-6;
    // current position in spherical coordinates
    var spherical = new _libs.THREE.Spherical();
    var sphericalDelta = new _libs.THREE.Spherical();

    var scale = 1;
    var panOffset = new _libs.THREE.Vector3();
    var zoomChanged = false;

    function getAutoRotationAngle() {
      return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;
    }

    function getZoomScale() {
      return Math.pow(0.95, scope.zoomSpeed);
    }

    function rotateLeft(angle) {
      sphericalDelta.theta -= angle;
    }

    function rotateUp(angle) {
      sphericalDelta.phi -= angle;
    }

    var panLeft = function () {
      var v = new _libs.THREE.Vector3();
      return function panLeft(distance, objectMatrix) {
        v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix
        v.multiplyScalar(-distance);
        panOffset.add(v);
      };
    }();

    var panUp = function () {
      var v = new _libs.THREE.Vector3();
      return function panUp(distance, objectMatrix) {
        v.setFromMatrixColumn(objectMatrix, 1); // get Y column of objectMatrix
        v.multiplyScalar(distance);
        panOffset.add(v);
      };
    }();

    // deltaX and deltaY are in pixels; right and down are positive
    scope.pan = function () {
      var offset = new _libs.THREE.Vector3();
      return function pan(deltaX, deltaY) {
        var element = scope.domElement;
        if (scope.object instanceof _libs.THREE.PerspectiveCamera) {
          // perspective
          var position = scope.object.position;
          offset.copy(position).sub(scope.target);
          var targetDistance = offset.length();
          // half of the fov is center to top of screen
          targetDistance *= Math.tan(scope.object.fov / 2 * Math.PI / 180.0);
          // we actually don't use screenWidth, since perspective camera is fixed to screen height
          panLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix);
          panUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix);
        } else if (scope.object instanceof _libs.THREE.OrthographicCamera) {
          // orthographic
          panLeft(deltaX * (scope.object.right - scope.object.left) / scope.object.zoom / element.clientWidth, scope.object.matrix);
          panUp(deltaY * (scope.object.top - scope.object.bottom) / scope.object.zoom / element.clientHeight, scope.object.matrix);
        } else {
          // camera neither orthographic nor perspective
          console.warn('WARNING: OrbitControls.js encountered an unknown camera type-pan disabled.');
          scope.enablePan = false;
        }
      };
    }();

    function dollyIn(dollyScale) {
      if (scope.object instanceof _libs.THREE.PerspectiveCamera) {
        scale /= dollyScale;
      } else if (scope.object instanceof _libs.THREE.OrthographicCamera) {
        scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom * dollyScale));
        scope.object.updateProjectionMatrix();
        zoomChanged = true;
      } else {
        console.warn('WARNING: OrbitControls.js encountered an unknown camera type-dolly/zoom disabled.');
        scope.enableZoom = false;
      }
    }

    function dollyOut(dollyScale) {
      if (scope.object instanceof _libs.THREE.PerspectiveCamera) {
        scale *= dollyScale;
      } else if (scope.object instanceof _libs.THREE.OrthographicCamera) {
        scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / dollyScale));
        scope.object.updateProjectionMatrix();
        zoomChanged = true;
      } else {
        console.warn('WARNING: OrbitControls.js encountered an unknown camera type-dolly/zoom disabled.');
        scope.enableZoom = false;
      }
    }

    /* Actions */

    function rotate(event, data) {
      if (scope.enabled && scope.enableRotate && data.state === 'move') {
        var element = scope.domElement;
        // rotating across whole screen goes 360 degrees around
        rotateLeft(2 * Math.PI * data.dx / element.clientWidth * scope.rotateSpeed);
        // rotating up and down along whole screen attempts to go 360, but limited to 180
        rotateUp(2 * Math.PI * data.dy / element.clientHeight * scope.rotateSpeed);
        scope.update();
      }
    }

    function pan(event, data) {
      if (scope.enabled && scope.enablePan && data.state === 'move') {
        scope.pan(data.dx, data.dy);
        scope.update();
      }
    }

    function offsetDolly(event, data) {
      if (scope.enabled && scope.enableZoom && data.state === 'move') {
        if (data.dy > 0) {
          dollyIn(getZoomScale());
        } else if (data.dy < 0) {
          dollyOut(getZoomScale());
        }
        scope.update();
      }
    }

    function wheelDolly(event) {
      if (scope.enabled && scope.enableZoom) {
        if (event.deltaY > 0) {
          dollyOut(getZoomScale());
        } else if (event.deltaY < 0) {
          dollyIn(getZoomScale());
        }
        scope.update();
      }
    }

    _this.actions = {
      rotate: rotate,
      pan: pan,
      offsetDolly: offsetDolly,
      wheelDolly: wheelDolly
    };

    // force an update at start
    _this.update();
    return _this;
  }

  return Orbit;
}(_libs.THREE.EventDispatcher);

exports.default = Orbit;

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _libs = __webpack_require__(0);

var _ImageBase2 = __webpack_require__(4);

var _ImageBase3 = _interopRequireDefault(_ImageBase2);

var _Pdf = __webpack_require__(17);

var _Pdf2 = _interopRequireDefault(_Pdf);

var _BaseMathUtils = __webpack_require__(2);

var _BaseMathUtils2 = _interopRequireDefault(_BaseMathUtils);

var _CustomEventConverter = __webpack_require__(14);

var _CustomEventConverter2 = _interopRequireDefault(_CustomEventConverter);

var _PolyTarget = __webpack_require__(66);

var _PolyTarget2 = _interopRequireDefault(_PolyTarget);

var _Finder = __webpack_require__(16);

var _Finder2 = _interopRequireDefault(_Finder);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PdfImage = function (_ImageBase) {
  _inherits(PdfImage, _ImageBase);

  function PdfImage(context, width, height, color, pdf, n) {
    _classCallCheck(this, PdfImage);

    var _this = _possibleConstructorReturn(this, _ImageBase.call(this, context, width, height, color));

    _this.query = '';
    _this.n = n;
    _this.pdf = pdf;
    _this.v = { x: 0, y: 0, z: 0, set: function set(x, y, z) {
        this.x = x;this.y = y;this.z = z;
        return this;
      }, transform: function transform(m) {
        var x = m.m[0][0] * this.x + m.m[1][0] * this.y + m.m[2][0] * this.z,
            y = m.m[0][1] * this.x + m.m[1][1] * this.y + m.m[2][1] * this.z,
            z = m.m[0][2] * this.x + m.m[0][2] * this.y + m.m[2][0] * this.z;
        this.x = x;
        this.y = y;
        this.z = z;
        return this;
      } };
    _this.m = { m: [[1, 0, 0], [0, 1, 0], [0, 0, 1]], set: function set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
        this.m = [[m00, m01, m02], [m10, m11, m12], [m20, m21, m22]];
        return this;
      } };

    _this.startRender = function () {
      _this.pdf.getHandler(_this.render.bind(_this));
    };
    Promise.resolve().then(function () {
      return _this.pdf.getHandler(_this.init.bind(_this));
    });
    return _this;
  }

  PdfImage.prototype.setQuery = function setQuery(query) {
    this.query = query.trim();
    if (this.textContent) {
      this.setHits(this.textContent);
      this.finishLoad();
    }
  };

  PdfImage.prototype.rectSize = function rectSize(r) {
    return {
      width: r[2] - r[0],
      height: r[3] - r[1]
    };
  };

  PdfImage.prototype.createPoly = function createPoly(m, p, s) {
    var poly = [],
        v = this.v;
    v.set(p.x, p.y, 1).transform(m);
    poly.push({ x: v.x, y: v.y });
    v.set(p.x, p.y + s.height, 1).transform(m);
    poly.push({ x: v.x, y: v.y });
    v.set(p.x + s.width, p.y + s.height, 1).transform(m);
    poly.push({ x: v.x, y: v.y });
    v.set(p.x + s.width, p.y, 1).transform(m);
    poly.push({ x: v.x, y: v.y });
    return poly;
  };

  PdfImage.prototype.getSimulatedDoc = function getSimulatedDoc() {
    return this.page;
  };

  PdfImage.prototype.simulate = function simulate(e, doc, x, y) {
    if (this.eventConverter) {
      this.eventConverter.convert(e, { doc: doc, x: x, y: y });
    }
  };

  PdfImage.prototype.setAnnotations = function setAnnotations(annos) {
    var view = this.page.view,
        vSz = this.rectSize(view),
        t = this.viewport.clone({
      dontFlip: true
    }).transform,
        targets = [];
    this.m.set(1, t[1], 0, t[2], 1, 0, t[4] / vSz.width, t[5] / vSz.height, 1);

    for (var _iterator = annos, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var anno = _ref;

      if (anno.subtype === 'Link') {
        var rect = anno.rect,
            aPos = {
          x: (rect[0] - view[0]) / vSz.width,
          y: (rect[1] - view[1]) / vSz.height
        },
            aSz = this.rectSize(rect);
        aSz.width /= vSz.width;
        aSz.height /= vSz.height;
        var _target = new _PolyTarget2.default(this.createPoly(this.m, aPos, aSz));
        _target.anno = anno;
        _target.callback = this.annoClb.bind(this);
        targets.push(_target);
      }
    }
    if (targets.length) {
      this.eventConverter = new _CustomEventConverter2.default(this.wnd, this.doc, _PolyTarget2.default.test, this.page);
      for (var _iterator2 = targets, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var target = _ref2;

        this.eventConverter.addCustom(target);
      }
    }
  };

  PdfImage.prototype.setHits = function setHits(textContent) {
    this.textContent = textContent;
    if (this.query !== '') {
      this.finder = new _Finder2.default(textContent.items.map(function (item) {
        return item.str;
      }), this.query, { contexts: false });
    }
  };

  PdfImage.prototype.renderHits = function renderHits() {
    var _this2 = this;

    if (this.finder) {
      (function () {
        var view = _this2.page.view,
            vSz = _this2.rectSize(view),
            testSz = (0, _libs.$)('<div style="position: absolute; visibility: hidden;"></div>').appendTo('body'),
            baseOffset = testSz.offset().left;
        for (var _iterator3 = _this2.finder.getHits(), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
          var _ref3;

          if (_isArray3) {
            if (_i3 >= _iterator3.length) break;
            _ref3 = _iterator3[_i3++];
          } else {
            _i3 = _iterator3.next();
            if (_i3.done) break;
            _ref3 = _i3.value;
          }

          var hit = _ref3;

          var item = _this2.textContent.items[hit.index],
              t = item.transform;
          testSz.html(item.str.substr(0, hit.offset) + '<span>' + item.str.substr(hit.offset, hit.length) + '</span>' + item.str.substr(hit.offset + hit.length));
          testSz.css(_this2.textContent.styles[item.fontName]);
          var testSpan = testSz.find('span'),
              offset = testSpan.offset().left,
              width = testSpan.width(),
              baseWidth = testSz.width(),
              relativeOffset = (offset - baseOffset) / baseWidth,
              relativeWidth = width / baseWidth;
          _this2.m.set(1, t[1], 0, t[2], 1, 0, t[4] + relativeOffset * item.width, t[5], 1);
          var poly = _this2.createPoly(_this2.m, { x: 0, y: 0 }, { width: relativeWidth * item.width, height: item.height });
          poly = poly.map(function (p) {
            return { x: p.x / vSz.width, y: p.y / vSz.height };
          });
          _this2.renderHit(poly);
        }
        testSz.remove();
      })();
    }
  };

  PdfImage.prototype.annoClb = function annoClb(e, data) {
    if (this.context.dispatchEvent) {
      this.context.dispatchEvent({
        type: 'pdfAnnotation',
        event: e,
        annotation: data.target.anno
      });
    }
  };

  PdfImage.prototype.init = function init(handler) {
    var _this3 = this;

    handler.getPage(this.n + 1).then(function (page) {
      _this3.page = page;
      _this3.size = _Pdf2.default.getPageSize(page);
      page.getAnnotations().then(_this3.setAnnotations.bind(_this3));
      page.getTextContent().then(_this3.setHits.bind(_this3));
      var scale = _BaseMathUtils2.default.calcScale(_this3.size.width, _this3.size.height, _this3.resW, _this3.resH);
      _this3.viewport = page.getViewport(scale);
      _this3.resW = _this3.width = _this3.viewport.width;
      _this3.resH = _this3.height = _this3.viewport.height;
      _this3.finishLoad();
    }).catch(function (e) {
      console.error('Cannot load PDF page: ' + (_this3.n + 1));
      _this3.finishLoad();
    });
  };

  PdfImage.prototype.render = function render(handler) {
    var _this4 = this;

    if (this.page) {
      this.page.render({
        canvasContext: this.pushCtx(),
        viewport: this.viewport
      }).then(function () {
        _this4.renderHits();
        _this4.popCtx();
        _this4.finishRender();
      });
    } else {
      this.renderBlankPage();
      this.finishRender();
    }
  };

  return PdfImage;
}(_ImageBase3.default);

exports.default = PdfImage;

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Search = function () {
  function Search(container, pages) {
    _classCallCheck(this, Search);

    this.container = container;
    this.pages = pages;
    this.prevResults = [];
    container.html('\n      <div class="search">\n        <div class="query">\n          <input class="inpQuery" type="text" maxlength="30" value="" />\n        </div>\n        <div class="results">\n        </div>\n        <div class="status">\n\n        </div>\n      </div>\n    ');
    this.query = container.find('.query input');
    this.results = container.find('.results');
    this.status = container.find('.status');

    this.binds = {
      navigate: this.navigate.bind(this),
      doQuery: this.doQuery.bind(this)
    };

    this.query.on('keydown', this.binds.doQuery);
    this.results.on('click', this.binds.navigate);
  }

  Search.prototype.dispose = function dispose() {
    this.results.off('click', this.binds.navigate);
    this.query.off('keydown', this.binds.doQuery);
  };

  Search.prototype.navigate = function navigate(e) {
    e.preventDefault();
    if (this.onNavigate !== undefined) {
      var target = (0, _libs.$)(e.target);
      if (!target.hasClass('result')) {
        var t = target.find('.result');
        if (t.length) {
          target = t;
        } else {
          while (target.length && !target.hasClass('result')) {
            target = (0, _libs.$)(target[0].parentNode);
          }
        }
      }
      var page = target.attr('data');
      if (page !== undefined) {
        this.onNavigate(parseInt(page));
      }
    }
  };

  Search.prototype.doQuery = function doQuery() {
    var _this = this;

    if (this.onQuery) {
      var queryStamp = this.queryStamp = Date.now();
      setTimeout(function () {
        if (queryStamp === _this.queryStamp) {
          _this.onQuery(_this.query[0].value.trim());
        }
      }, 1000);
    }
  };

  Search.prototype.setResults = function setResults(results, lastPage) {
    if (this.prevResults.length && results[0] !== this.prevResults[0]) {
      this.prevResults = [];
      this.results.html('');
    }
    var htmls = [];
    for (var i = this.prevResults.length; i < results.length; ++i) {
      var result = results[i];
      htmls.push('<div class="result" data="' + result.page + '">');
      htmls.push('<a href="#">');
      htmls.push('<div>' + result.contexts.join('</div><div>') + '</div>');
      htmls.push('</a>');
      htmls.push('</div>');
    }
    (0, _libs.$)(htmls.join('')).appendTo(this.results);
    this.prevResults = [].concat(results);
    if (lastPage === undefined) {
      this.status.html('');
    } else {
      this.status.html(lastPage + ' of ' + this.pages);
    }
  };

  return Search;
}();

exports.default = Search;

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _libs = __webpack_require__(0);

var _ImageBase2 = __webpack_require__(4);

var _ImageBase3 = _interopRequireDefault(_ImageBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var StaticImage = function (_ImageBase) {
  _inherits(StaticImage, _ImageBase);

  function StaticImage(context, width, height, color, src) {
    _classCallCheck(this, StaticImage);

    var _this = _possibleConstructorReturn(this, _ImageBase.call(this, context, width, height, color));

    _this.binds = {};
    _this.image = new Image();
    _this.image.crossOrigin = 'Anonymous';
    _this.binds.imageLoad = function () {
      _this.width = _this.image.width;
      _this.height = _this.image.height;
      _this.startRender = function () {
        _this.renderImage(_this.image);
        _this.finishRender();
      };
      _this.finishLoad();
    };
    _this.binds.imageError = function () {
      _this.startRender = function () {
        _this.renderNotFoundPage();
        _this.finishRender();
      };
      _this.finishLoad();
    };
    (0, _libs.$)(_this.image).on('load', _this.binds.imageLoad).on('error', _this.binds.imageError);
    _this.image.src = src;
    return _this;
  }

  StaticImage.prototype.dispose = function dispose() {
    (0, _libs.$)(this.image).off('load', this.binds.imageLoad).off('error', this.binds.imageError);
    this.image.src = '';
    delete this.image;
    _ImageBase.prototype.dispose.call(this);
  };

  return StaticImage;
}(_ImageBase3.default);

exports.default = StaticImage;

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TextureAnimator = function () {
  function TextureAnimator(img, tilesHoriz, tilesVert, numTiles, tileDispDuration) {
    _classCallCheck(this, TextureAnimator);

    var texture = new _libs.THREE.Texture();
    texture.minFilter = _libs.THREE.LinearFilter;
    texture.image = img;
    texture.needsUpdate = true;

    // note: texture passed by reference, will be updated by the update function.
    this.texture = texture;
    this.tilesHorizontal = tilesHoriz;
    this.tilesVertical = tilesVert;
    // how many images does this spritesheet contain?
    //  usually equals tilesHoriz * tilesVert, but not necessarily,
    //  if there at blank tiles at the bottom of the spritesheet.
    this.numberOfTiles = numTiles;
    texture.repeat.set(1 / this.tilesHorizontal, 1 / this.tilesVertical);

    // how long should each image be displayed?
    this.tileDisplayDuration = tileDispDuration;

    // how long has the current image been displayed?
    this.currentDisplayTime = 0;

    // which image is currently being displayed?
    this.currentTile = 0;
  }

  TextureAnimator.prototype.update = function update(milliSec) {
    this.currentDisplayTime += milliSec;
    while (this.currentDisplayTime > this.tileDisplayDuration) {
      this.currentDisplayTime -= this.tileDisplayDuration;
      ++this.currentTile;
      if (this.currentTile == this.numberOfTiles) this.currentTile = 0;
      var currentColumn = this.currentTile % this.tilesHorizontal;
      this.texture.offset.x = currentColumn / this.tilesHorizontal;
      var currentRow = Math.floor(this.currentTile / this.tilesHorizontal);
      this.texture.offset.y = currentRow / this.tilesVertical;
    }
  };

  TextureAnimator.prototype.dispose = function dispose() {
    var img = this.texture.image;
    img.height = img.width = 0;
    this.texture.dispose();
  };

  return TextureAnimator;
}();

exports.default = TextureAnimator;

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _libs = __webpack_require__(0);

var _MouseEventConverter2 = __webpack_require__(52);

var _MouseEventConverter3 = _interopRequireDefault(_MouseEventConverter2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ThreeMouseEventConverter = function (_MouseEventConverter) {
  _inherits(ThreeMouseEventConverter, _MouseEventConverter);

  ThreeMouseEventConverter.objectsTest = function objectsTest(object1, object2) {
    return object1 && object2 ? object1.object === object2.object : false;
  };

  ThreeMouseEventConverter.objectsAndFacesTest = function objectsAndFacesTest(object1, object2) {
    return object1 && object2 ? object1.object === object2.object && object1.face.materialIndex === object2.face.materialIndex : false;
  };

  function ThreeMouseEventConverter(wnd, doc, visualWorld) {
    var test = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ThreeMouseEventConverter.objectsAndFacesTest;

    _classCallCheck(this, ThreeMouseEventConverter);

    var _this = _possibleConstructorReturn(this, _MouseEventConverter.call(this, wnd, doc, visualWorld.element));

    _this.visual = visualWorld;
    _this.coords = new _libs.THREE.Vector2();
    _this.raycaster = _this.visual.raycaster;
    _this.camera = _this.visual.camera;
    _this.threes = [];
    _this.test = test;
    return _this;
  }

  ThreeMouseEventConverter.prototype.getCallback = function getCallback(object) {
    return object.object.userData.mouseCallback;
  };

  ThreeMouseEventConverter.prototype.addThree = function addThree(three) {
    this.threes.push(three);
  };

  ThreeMouseEventConverter.prototype.removeThree = function removeThree(three) {
    var i = this.threes.indexOf(three);
    if (~i) {
      this.threes.splice(i, 1);
    }
  };

  ThreeMouseEventConverter.prototype.setCoordsFromEvent = function setCoordsFromEvent(e) {
    var jElement = (0, _libs.$)(this.element);
    var offset = jElement.offset();
    this.coords.x = (e.pageX - offset.left) / jElement.width() * 2 - 1;
    this.coords.y = -((e.pageY - offset.top) / jElement.height()) * 2 + 1;
    return this.coords;
  };

  ThreeMouseEventConverter.prototype.getObject = function getObject(e) {
    this.setCoordsFromEvent(e);
    this.raycaster.setFromCamera(this.coords, this.camera);
    var intersects = this.raycaster.intersectObjects(this.threes);
    return intersects[0];
  };

  return ThreeMouseEventConverter;
}(_MouseEventConverter3.default);

exports.default = ThreeMouseEventConverter;

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(0);

var _ImageFactory = __webpack_require__(6);

var _ImageFactory2 = _interopRequireDefault(_ImageFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Thumbnails = function () {
  function Thumbnails(context, container, thumbnailsClb, size) {
    var _this = this;

    var props = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : { kWtoH: 210 / 297 };

    _classCallCheck(this, Thumbnails);

    this.container = container;
    this.p = props;
    this.thumbnailsClb = thumbnailsClb;
    this.size = size;
    this.canvas = (0, _libs.$)('<canvas>')[0];
    this.imageFactory = new _ImageFactory2.default(_extends({}, context, {
      renderCanvas: this.canvas,
      renderCanvasCtx: this.canvas.getContext('2d')
    }));
    this.thumbnails = [];
    for (var i = 0; i < size; ++i) {
      var info = this.thumbnailsClb(i);
      this.thumbnails.push(_extends({}, info, {
        index: i,
        loaded: info.type === 'thumbnail-image',
        heading: null,
        thumbnail: null,
        title: info.title || i
      }));
    }

    this.binds = {
      update: this.update.bind(this),
      navigate: function navigate(e) {
        e.preventDefault();
        if (_this.onNavigate) {
          var node = e.target;
          while (node && !node.dataThumbnail) {
            node = node.parentNode;
          }
          _this.onNavigate(node.dataThumbnail.index);
        }
      }
    };
    this.container.on('scroll', this.binds.update);
  }

  Thumbnails.prototype.getSize = function getSize() {
    return this.size;
  };

  Thumbnails.prototype.setEnable = function setEnable(enable) {
    this.enable = enable;
    this.update();
  };

  Thumbnails.prototype.dispose = function dispose() {
    this.container.find('a').off('click', this.binds.navigate);
    this.container.off('scroll', this.binds.update);
    this.container.html('');
    this.canvas.height = this.canvas.width = 0;
    delete this.canvas;
  };

  Thumbnails.prototype.load = function load(thumbnail) {
    var _this2 = this;

    this.loading = true;
    var wrapper = this.imageFactory.build(thumbnail, thumbnail.number === undefined ? thumbnail.index : thumbnail.number, this.p.kWtoH * 150, 150);
    wrapper.onChange = function (canvas) {
      _this2.setImage(thumbnail, canvas.toDataURL('image/png'));
      thumbnail.loaded = true;
      wrapper.dispose();
      _this2.loading = false;
      Promise.resolve().then(function () {
        return _this2.update();
      });
    };
  };

  Thumbnails.prototype.getActive = function getActive() {
    var first = this.container.scrollTop(),
        last = first + this.container.height(),
        res = [];
    for (var _iterator = this.thumbnails, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var thumbnail = _ref;

      if (Math.max(thumbnail.first, first) < Math.min(thumbnail.last, last)) {
        res.push(thumbnail);
      }
    }
    return res;
  };

  Thumbnails.prototype.update = function update() {
    if (!this.loading && this.canvas && this.enable) {
      if (!this.built) {
        this.render();
      }
      var active = this.getActive();
      for (var _iterator2 = active, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var thumbnail = _ref2;

        if (!thumbnail.loaded) {
          this.load(thumbnail);
          break;
        }
      }
    }
  };

  Thumbnails.prototype.setImage = function setImage(thumbnail, img) {
    thumbnail.img = img;
    thumbnail.thumbnail.css('background-image', ['url(\'', img, '\')'].join(''));
    thumbnail.thumbnail.removeClass('loading');
  };

  Thumbnails.prototype.render = function render() {
    var elements = ['<div class="thumbnails">'];
    for (var i = 0; i < this.size; ++i) {
      elements.push(['<div class="item"><a href="#"><div class="thumbnail loading"></div></a><div class="heading"><a href="#" title="', i + 1, '">', i + 1, '</a></div></div>'].join(''));
    }
    elements.push('</div>');
    this.container.append(elements.join(''));
    var items = this.container.find('.item'),
        base = this.container.find('.thumbnails').offset().top;
    for (var _i3 = 0; _i3 < items.length; ++_i3) {
      var item = (0, _libs.$)(items[_i3]);
      this.thumbnails[_i3].heading = item.find('.heading');
      this.thumbnails[_i3].thumbnail = item.find('.thumbnail');
      this.thumbnails[_i3].first = item.offset().top - base;
      this.thumbnails[_i3].last = this.thumbnails[_i3].first + item.height();
      if (this.thumbnails[_i3].loaded) {
        this.setImage(this.thumbnails[_i3], this.thumbnails[_i3].src);
      }
      for (var _iterator3 = item.find('a'), _isArray3 = Array.isArray(_iterator3), _i4 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
        var _ref3;

        if (_isArray3) {
          if (_i4 >= _iterator3.length) break;
          _ref3 = _iterator3[_i4++];
        } else {
          _i4 = _iterator3.next();
          if (_i4.done) break;
          _ref3 = _i4.value;
        }

        var a = _ref3;

        a.dataThumbnail = this.thumbnails[_i3];
      }
    }
    this.container.find('a').on('click', this.binds.navigate);
    this.built = true;
  };

  return Thumbnails;
}();

exports.default = Thumbnails;

/***/ },
/* 61 */
/***/ function(module, exports) {

"use strict";
"use strict";

exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Utils = function () {
  function Utils() {
    _classCallCheck(this, Utils);
  }

  Utils.defaultCmp = function defaultCmp(a, b) {
    return a - b;
  };

  Utils.lowerBound = function lowerBound(a, x, cmp) {
    cmp = cmp || Utils.defaultCmp;
    var l = 0,
        h = a.length - 1;
    while (h - l > 1) {
      var mid = Math.floor((l + h) / 2);
      if (cmp(x, a[mid]) < 0) {
        h = mid;
      } else {
        l = mid;
      }
    }
    return cmp(x, a[h]) >= 0 ? h : l;
  };

  return Utils;
}();

exports.default = Utils;

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var View = function () {
  View.classProperty = function classProperty(ctrl, className, value) {
    if (value) {
      ctrl.addClass(className);
    } else {
      ctrl.removeClass(className);
    }
  };

  View.attributeProperty = function attributeProperty(ctrl, attributeName, value) {
    if (value) {
      ctrl.attr(attributeName, attributeName);
    } else {
      ctrl.removeAttr(attributeName);
    }
  };

  View.callHandlers = function callHandlers(handlers, id, e, data) {
    for (var _iterator = handlers, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var handler = _ref;

      if (handler[id]) {
        handler[id](e, data);
      } else if (handler.handleDefault) {
        handler.handleDefault(id, e, data);
      }
    }
  };

  View.handleEvent = function handleEvent(id, getHandlers, e, data) {
    View.callHandlers(getHandlers(id), id, e, data);
  };

  View.handleLinkEvent = function handleLinkEvent(e) {
    e.preventDefault();
    View.handleEvent(this.id, this.getHandlers, e);
  };

  View.handleInputEvent = function handleInputEvent(e) {
    View.handleEvent(this.id, this.getHandlers, e, e.target.value);
  };

  View.handleFormEvent = function handleFormEvent(e) {
    e.preventDefault();
    View.handleEvent(this.id, this.getHandlers, e);
  };

  // virtual functions {


  View.prototype.getLinks = function getLinks() {
    return null;
  };

  View.prototype.getWidgets = function getWidgets() {
    return null;
  };

  View.prototype.getInputs = function getInputs() {
    return null;
  };

  View.prototype.getTexts = function getTexts() {
    return null;
  };

  View.prototype.getTemplate = function getTemplate() {
    return {};
  };

  View.prototype.getHandlers = function getHandlers(id) {
    return this.handlers;
  };
  // }

  View.prototype.callLater = function callLater(handlers, id, e, data, ms) {
    var _this = this;

    this.pendings[id] = {
      timestamp: new Date().getTime()
    };
    setTimeout(function () {
      var timestamp = new Date().getTime(),
          pending = _this.pendings[id];
      if (pending && timestamp - pending.timestamp >= ms) {
        View.callHandlers(handlers, id, e, data);
        delete _this.pendings[id];
      }
    }, ms);
  };

  // loadFiles(urls, ready, failure) {
  //   let done = Promise.resolve();
  //   for(let url of urls) {
  //     done = done.then(()=> {
  //       return new Promise((resolve, reject)=> {
  //         $.get(url, (res)=> {
  //           ready(res, url);
  //           resolve();
  //         }).fail((res)=> {
  //           if(failure && failure(res, url)) {
  //             resolve();
  //           }
  //           else {
  //             reject(res);
  //           }
  //         });
  //       });
  //     });
  //   }
  //   return done;
  // }

  View.prototype.loadFiles = function loadFiles(urls, files) {
    var tasks = [];

    var _loop = function _loop() {
      if (_isArray2) {
        if (_i2 >= _iterator2.length) return 'break';
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) return 'break';
        _ref2 = _i2.value;
      }

      var name = _ref2;

      files[name] = [];

      var _loop2 = function _loop2() {
        if (_isArray3) {
          if (_i3 >= _iterator3.length) return 'break';
          _ref3 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done) return 'break';
          _ref3 = _i3.value;
        }

        var url = _ref3;

        tasks.push(new Promise(function (resolve, reject) {
          _libs.$.get(url, function (data) {
            files[name].push({ url: url, data: data });
            resolve();
          }).fail(function (res) {
            reject(res);
          });
        }));
      };

      for (var _iterator3 = urls[name], _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
        var _ref3;

        var _ret2 = _loop2();

        if (_ret2 === 'break') break;
      }
    };

    for (var _iterator2 = Object.keys(urls), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      var _ret = _loop();

      if (_ret === 'break') break;
    }
    return Promise.all(tasks);
  };

  View.prototype.urlResolver = function urlResolver(baseUrl, url) {
    url = url.replace(/\\/g, '/');
    if (url.charAt(0) !== '/') {
      baseUrl = baseUrl.replace(/\\/g, '/');
      var p = baseUrl.lastIndexOf('/');
      url = (~p ? baseUrl.substr(0, p + 1) : '') + url;

      var parts = url.split('/');
      url = [];
      for (var _iterator4 = parts, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
        var _ref4;

        if (_isArray4) {
          if (_i4 >= _iterator4.length) break;
          _ref4 = _iterator4[_i4++];
        } else {
          _i4 = _iterator4.next();
          if (_i4.done) break;
          _ref4 = _i4.value;
        }

        var part = _ref4;

        if (part === '.') {} else if (part === '..') {
          if (url.length && !(url.length === 1 && url[0] === '')) {
            url.pop();
          }
        } else {
          url.push(part);
        }
      }
      url = url.join('/');
    }

    return url;
  };

  View.prototype.objToAttrsStr = function objToAttrsStr(o) {
    var res = [];
    for (var _iterator5 = Object.keys(o), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
      var _ref5;

      if (_isArray5) {
        if (_i5 >= _iterator5.length) break;
        _ref5 = _iterator5[_i5++];
      } else {
        _i5 = _iterator5.next();
        if (_i5.done) break;
        _ref5 = _i5.value;
      }

      var _name = _ref5;

      res.push([_name, '="', o[_name], '"'].join(''));
    }
    return res.join(' ');
  };

  function View(parentContainer, onLoad) {
    var _this2 = this;

    var template = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, View);

    this.pendings = {};
    this.binds = {};
    this.parentContainer = (0, _libs.$)(parentContainer);
    this.parentContainer.html('<iframe style="width: 100%; height: 100%; border: 0;" scrolling="no"></iframe>');
    this.frame = this.parentContainer.find('iframe')[0];
    if (this.frame.contentWindow.stop) {
      this.frame.contentWindow.stop();
    }
    this.container = (0, _libs.$)(this.frame.contentDocument.body);
    this.container.css('margin', '0');
    this.head = (0, _libs.$)(this.frame.contentDocument.head);
    this.onLoad = onLoad;
    this.handlers = [];

    var script = template.html ? template.script : this.getTemplate().script;
    var urls = {
      styles: template.styles || this.getTemplate().styles,
      html: [template.html || this.getTemplate().html],
      script: script ? [script] : []
    },
        files = {},
        links = template.links || this.getTemplate().links;

    this.loadFiles(urls, files).then(function () {
      var _loop3 = function _loop3() {
        if (_isArray6) {
          if (_i6 >= _iterator6.length) return 'break';
          _ref6 = _iterator6[_i6++];
        } else {
          _i6 = _iterator6.next();
          if (_i6.done) return 'break';
          _ref6 = _i6.value;
        }

        var style = _ref6;

        var textCss = style.data,
            url = style.url;
        textCss = textCss.replace(/url\(['"](.*?)["']\)/g, function (r, r1) {
          return ['url(', _this2.urlResolver(url, r1), ')'].join('');
        });
        (0, _libs.$)('<style type="text/css">' + textCss + '</style>').appendTo(_this2.head);
      };

      for (var _iterator6 = files.styles, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
        var _ref6;

        var _ret3 = _loop3();

        if (_ret3 === 'break') break;
      }

      _this2.container.html(files.html[0].data);

      for (var _iterator7 = links, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;) {
        var _ref7;

        if (_isArray7) {
          if (_i7 >= _iterator7.length) break;
          _ref7 = _iterator7[_i7++];
        } else {
          _i7 = _iterator7.next();
          if (_i7.done) break;
          _ref7 = _i7.value;
        }

        var link = _ref7;

        (0, _libs.$)(_this2.head).append(['<link ', _this2.objToAttrsStr(link), '>'].join(''));
      }

      if (files.script[0]) {
        var init = eval(files.script[0].data);
        _this2.templateObject = init(_this2.container);
      }

      _this2.linkControls = {};
      for (var _iterator8 = _this2.getLinks(), _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : _iterator8[Symbol.iterator]();;) {
        var _ref8;

        if (_isArray8) {
          if (_i8 >= _iterator8.length) break;
          _ref8 = _iterator8[_i8++];
        } else {
          _i8 = _iterator8.next();
          if (_i8.done) break;
          _ref8 = _i8.value;
        }

        var id = _ref8;

        _this2.linkControls[id] = _this2.container.find('.' + id);
        _this2.binds[id] = View.handleLinkEvent.bind({ getHandlers: _this2.getHandlers.bind(_this2), id: id });
        _this2.linkControls[id].on('click', _this2.binds[id]);
      }

      _this2.widgetControls = {};
      for (var _iterator9 = _this2.getWidgets(), _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : _iterator9[Symbol.iterator]();;) {
        var _ref9;

        if (_isArray9) {
          if (_i9 >= _iterator9.length) break;
          _ref9 = _iterator9[_i9++];
        } else {
          _i9 = _iterator9.next();
          if (_i9.done) break;
          _ref9 = _i9.value;
        }

        var _id = _ref9;

        _this2.widgetControls[_id] = _this2.container.find('.' + _id);
      }

      _this2.inputControls = {};
      for (var _iterator10 = _this2.getInputs(), _isArray10 = Array.isArray(_iterator10), _i10 = 0, _iterator10 = _isArray10 ? _iterator10 : _iterator10[Symbol.iterator]();;) {
        var _ref10;

        if (_isArray10) {
          if (_i10 >= _iterator10.length) break;
          _ref10 = _iterator10[_i10++];
        } else {
          _i10 = _iterator10.next();
          if (_i10.done) break;
          _ref10 = _i10.value;
        }

        var _id2 = _ref10;

        _this2.inputControls[_id2] = _this2.container.find('.' + _id2);
        _this2.binds[_id2] = View.handleInputEvent.bind({ getHandlers: _this2.getHandlers.bind(_this2), id: _id2 });
        _this2.inputControls[_id2].on('keyup', _this2.binds[_id2]);
      }

      _this2.formControls = {};
      for (var _iterator11 = _this2.getForms(), _isArray11 = Array.isArray(_iterator11), _i11 = 0, _iterator11 = _isArray11 ? _iterator11 : _iterator11[Symbol.iterator]();;) {
        var _ref11;

        if (_isArray11) {
          if (_i11 >= _iterator11.length) break;
          _ref11 = _iterator11[_i11++];
        } else {
          _i11 = _iterator11.next();
          if (_i11.done) break;
          _ref11 = _i11.value;
        }

        var _id3 = _ref11;

        _this2.formControls[_id3] = _this2.container.find('.' + _id3);
        _this2.binds[_id3] = View.handleFormEvent.bind({ getHandlers: _this2.getHandlers.bind(_this2), id: _id3 });
        _this2.formControls[_id3].on('submit', _this2.binds[_id3]);
      }

      _this2.textControls = {};
      for (var _iterator12 = _this2.getTexts(), _isArray12 = Array.isArray(_iterator12), _i12 = 0, _iterator12 = _isArray12 ? _iterator12 : _iterator12[Symbol.iterator]();;) {
        var _ref12;

        if (_isArray12) {
          if (_i12 >= _iterator12.length) break;
          _ref12 = _iterator12[_i12++];
        } else {
          _i12 = _iterator12.next();
          if (_i12.done) break;
          _ref12 = _i12.value;
        }

        var _id4 = _ref12;

        _this2.textControls[_id4] = _this2.container.find('.' + _id4);
      }

      _this2.stateSetters = [{
        map: _this2.linkControls,
        setter: _this2.setLinkControlState.bind(_this2)
      }, {
        map: _this2.widgetControls,
        setter: _this2.setWidgetControlState.bind(_this2)
      }, {
        map: _this2.inputControls,
        setter: _this2.setInputControlState.bind(_this2)
      }, {
        map: _this2.textControls,
        setter: _this2.setTextControlState.bind(_this2)
      }];

      _this2.initView();

      if (_this2.onLoad) {
        _this2.onLoad();
      }
    }).catch(function (res) {
      return console.error(res);
    });
  }

  View.prototype.dispose = function dispose() {
    delete this.textControls;
    for (var _iterator13 = this.getLinks(), _isArray13 = Array.isArray(_iterator13), _i13 = 0, _iterator13 = _isArray13 ? _iterator13 : _iterator13[Symbol.iterator]();;) {
      var _ref13;

      if (_isArray13) {
        if (_i13 >= _iterator13.length) break;
        _ref13 = _iterator13[_i13++];
      } else {
        _i13 = _iterator13.next();
        if (_i13.done) break;
        _ref13 = _i13.value;
      }

      var id = _ref13;

      this.linkControls[id].off('click', this.binds[id]);
    }
    delete this.linkControls;
    delete this.widgetControls;
    for (var _iterator14 = this.getInputs(), _isArray14 = Array.isArray(_iterator14), _i14 = 0, _iterator14 = _isArray14 ? _iterator14 : _iterator14[Symbol.iterator]();;) {
      var _ref14;

      if (_isArray14) {
        if (_i14 >= _iterator14.length) break;
        _ref14 = _iterator14[_i14++];
      } else {
        _i14 = _iterator14.next();
        if (_i14.done) break;
        _ref14 = _i14.value;
      }

      var _id5 = _ref14;

      this.inputControls[_id5].off('keyup', this.binds[_id5]);
    }
    delete this.inputControls;
    for (var _iterator15 = this.getForms(), _isArray15 = Array.isArray(_iterator15), _i15 = 0, _iterator15 = _isArray15 ? _iterator15 : _iterator15[Symbol.iterator]();;) {
      var _ref15;

      if (_isArray15) {
        if (_i15 >= _iterator15.length) break;
        _ref15 = _iterator15[_i15++];
      } else {
        _i15 = _iterator15.next();
        if (_i15.done) break;
        _ref15 = _i15.value;
      }

      var _id6 = _ref15;

      this.formControls[_id6].off('submit', this.binds[_id6]);
    }
    delete this.formControls;

    !this.templateObject || !this.templateObject.dispose || this.templateObject.dispose();
    this.parentContainer.html('');
  };

  View.prototype.getContainer = function getContainer() {
    return this.container[0];
  };

  View.prototype.getParentContainer = function getParentContainer() {
    return this.parentContainer[0];
  };

  View.prototype.addHandler = function addHandler(handler) {
    this.handlers.push(handler);
  };

  View.prototype.initView = function initView() {};

  View.setControlState = function setControlState(ctrl, defaults, state, stateHandlers) {
    if (ctrl) {
      var st = _extends({}, defaults, state);
      for (var _name2 in st) {
        if (st.hasOwnProperty(_name2) && stateHandlers[_name2]) {
          stateHandlers[_name2](ctrl, st[_name2]);
        }
      }
    }
  };

  View.prototype.setLinkControlState = function setLinkControlState(id, state) {
    View.setControlState(this.linkControls[id], {
      visible: true,
      active: false,
      enable: true
    }, state, View.linkStateHandlers);
  };

  View.prototype.setWidgetControlState = function setWidgetControlState(id, state) {
    View.setControlState(this.widgetControls[id], {
      visible: true,
      active: false,
      enable: true
    }, state, View.widgetStateHandlers);
  };

  View.prototype.setInputControlState = function setInputControlState(id, state) {
    View.setControlState(this.inputControls[id], {
      visible: true,
      enable: true,
      value: ''
    }, state, View.inputStateHandlers);
  };

  View.prototype.setTextControlState = function setTextControlState(id, state) {
    View.setControlState(this.textControls[id], {
      visible: true,
      value: ''
    }, state, View.textStateHandlers);
  };

  View.prototype.onItemStateChanged = function onItemStateChanged() {};

  View.prototype.setState = function setState(id, state) {
    for (var _iterator16 = this.stateSetters, _isArray16 = Array.isArray(_iterator16), _i16 = 0, _iterator16 = _isArray16 ? _iterator16 : _iterator16[Symbol.iterator]();;) {
      var _ref16;

      if (_isArray16) {
        if (_i16 >= _iterator16.length) break;
        _ref16 = _iterator16[_i16++];
      } else {
        _i16 = _iterator16.next();
        if (_i16.done) break;
        _ref16 = _i16.value;
      }

      var item = _ref16;

      if (item.map[id]) {
        item.setter(id, state);
        this.onItemStateChanged(id, state);
        break;
      }
    }
  };

  return View;
}();

View.linkStateHandlers = {
  visible: function visible(ctrl, value) {
    return View.classProperty(ctrl, 'hidden', !value);
  },
  active: function active(ctrl, value) {
    return View.classProperty(ctrl, 'active', value);
  },
  enable: function enable(ctrl, value) {
    return View.classProperty(ctrl, 'disabled', !value);
  }
};
View.widgetStateHandlers = {
  visible: function visible(ctrl, value) {
    return View.classProperty(ctrl, 'hidden', !value);
  },
  active: function active(ctrl, value) {
    return View.classProperty(ctrl, 'active', value);
  },
  enable: function enable(ctrl, value) {
    return View.classProperty(ctrl, 'disabled', !value);
  }
};
View.inputStateHandlers = {
  visible: function visible(ctrl, value) {
    return View.classProperty(ctrl, 'hidden', !value);
  },
  value: function value(ctrl, _value) {
    return ctrl[0].value = _value;
  },
  enable: function enable(ctrl, value) {
    return View.attributeProperty(ctrl, 'disabled', !value);
  }
};
View.textStateHandlers = {
  visible: function visible(ctrl, value) {
    return View.classProperty(ctrl, 'hidden', !value);
  },
  value: function value(ctrl, _value2) {
    return ctrl.text(_value2);
  }
};
exports.default = View;

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(0);

var _Orbit = __webpack_require__(54);

var _Orbit2 = _interopRequireDefault(_Orbit);

var _ThreeMouseEventConverter = __webpack_require__(59);

var _ThreeMouseEventConverter2 = _interopRequireDefault(_ThreeMouseEventConverter);

var _Drag = __webpack_require__(47);

var _Drag2 = _interopRequireDefault(_Drag);

var _CSS3DRenderer = __webpack_require__(10);

var _CSS3DRenderer2 = _interopRequireDefault(_CSS3DRenderer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var VisualWorld = function () {
  function VisualWorld(wnd, doc, container) {
    var _this = this;

    var useHelpers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

    _classCallCheck(this, VisualWorld);

    this.wnd = wnd;
    this.doc = doc;
    this.jContainer = container;
    this.renderCallbacks = [];

    this.clock = new _libs.THREE.Clock();

    this.raycaster = new _libs.THREE.Raycaster();

    this.scene = new _libs.THREE.Scene();
    this.cssScene = new _libs.THREE.Scene();

    this.camera = new _libs.THREE.PerspectiveCamera(30, this.width() / this.height(), 0.2, 2000);
    var scale = 1;

    this.camera.position.x = 0;
    this.camera.position.y = 5.5 * scale;
    this.camera.position.z = 0;

    this.renderer = new _libs.THREE.WebGLRenderer({ alpha: true });
    this.renderer.setClearColor(0x000000, 0);
    this.renderer.setPixelRatio(this.wnd.devicePixelRatio);
    this.renderer.setSize(this.width(), this.height());

    this.jContainer.append(this.renderer.domElement);

    this.cssRenderer = new _CSS3DRenderer2.default();
    this.cssRenderer.setSize(this.width(), this.height());
    (0, _libs.$)(this.cssRenderer.domElement).css({
      position: 'absolute',
      top: 0,
      margin: 0,
      padding: 0
    });
    this.jContainer.append(this.cssRenderer.domElement);

    this.element = this.cssRenderer.domElement;

    this.controls = new _Orbit2.default(this.camera, this.element);
    this.controls.target.y = 0.5;

    var cssScene = (0, _libs.$)(this.cssRenderer.domElement).find('div'),
        tmpVector = new _libs.THREE.Vector3();
    this.controls.addEventListener('change', function () {
      _this.camera.getWorldDirection(tmpVector);
      cssScene.css('display', tmpVector.y - _this.camera.position.y > 0 ? 'none' : 'block');
    });

    this.textureLoader = new _libs.THREE.TextureLoader();

    this.scene.add(new _libs.THREE.AmbientLight(0xD0D0D0)); //0xC0C0C0

    this.light = new _libs.THREE.DirectionalLight(0x404040, 1);
    this.light.position.set(0, 6 * scale, 0);
    this.light.castShadow = false;
    // const d = 20*scale;
    // this.light.shadow.camera.left = -d;
    // this.light.shadow.camera.right = d;
    // this.light.shadow.camera.top = d;
    // this.light.shadow.camera.bottom = -d;
    // this.light.shadow.camera.near = 1*scale;
    // this.light.shadow.camera.far = 25*scale;
    // this.light.shadow.mapSize.x = 1024;
    // this.light.shadow.mapSize.y = 1024;
    this.scene.add(this.light);

    if (useHelpers) {
      this.scene.add(new _libs.THREE.AxisHelper(5));
    }

    this.binds = {
      onWindowResize: this.onWindowResize.bind(this),
      animate: this.animate.bind(this)
    };

    (0, _libs.$)(this.wnd).on('resize', this.binds.onWindowResize);

    this.mouseEvents = new _ThreeMouseEventConverter2.default(this.wnd, this.doc, this);
    var filterData = { type: 'mousemove' };
    this.mouseEvents.filter = function (element, e) {
      var types = ['mouseenter', 'mouseover', 'mouseleave', 'mouseout'],
          contains = function contains(p, c) {
        return p === c || _libs.$.contains(p, c);
      };
      if (e.type === 'mousemove') {
        filterData.pageX = e.pageX;
        filterData.pageY = e.pageY;
      }
      return e.relatedTarget && ~types.indexOf(e.type) && contains(element, e.target) && contains(element, e.relatedTarget) ? _extends({}, e, filterData) : e;
    };
    this.drag = new _Drag2.default(this.wnd, this.doc, this);

    this.animate();
  }

  VisualWorld.prototype.dispose = function dispose() {
    delete this.binds.animate;
    (0, _libs.$)(this.wnd).off('resize', this.binds.onWindowResize);
    this.mouseEvents.dispose();
    this.drag.dispose();
    this.controls.dispose();
  };

  VisualWorld.prototype.width = function width() {
    return this.jContainer.width();
  };

  VisualWorld.prototype.height = function height() {
    return this.jContainer.height();
  };

  VisualWorld.prototype.setExtraLighting = function setExtraLighting(v) {
    this.light.intensity = v;
  };

  VisualWorld.prototype.getOrbit = function getOrbit() {
    return this.controls;
  };

  VisualWorld.prototype.setControlsState = function setControlsState(state) {
    this.controls.enabled = state;
  };

  VisualWorld.prototype.getControlsState = function getControlsState() {
    return this.controls.enabled;
  };

  VisualWorld.prototype.onWindowResize = function onWindowResize() {
    var _this2 = this;

    var updateCamera = function updateCamera(camera) {
      camera.aspect = _this2.width() / _this2.height();
      camera.updateProjectionMatrix();
    },
        updateRenderer = function updateRenderer(renderer) {
      renderer.setSize(_this2.width(), _this2.height());
    };

    updateCamera(this.camera);
    updateRenderer(this.renderer);
    updateRenderer(this.cssRenderer);
  };

  VisualWorld.prototype.addObject = function addObject(object) {
    this.scene.add(object);
  };

  VisualWorld.prototype.addCssObject = function addCssObject(object) {
    this.cssScene.add(object);
  };

  VisualWorld.prototype.removeCssObject = function removeCssObject(object) {
    this.cssScene.remove(object);
  };

  VisualWorld.prototype.removeObject = function removeObject(object) {
    this.scene.remove(object);
  };

  VisualWorld.prototype.animate = function animate() {
    if (this.binds.animate) {
      requestAnimationFrame(this.binds.animate);
    }
    this.render();
  };

  VisualWorld.prototype.addRenderCallback = function addRenderCallback(clb) {
    this.renderCallbacks.push(clb);
  };

  VisualWorld.prototype.removeRenderCallback = function removeRenderCallback(clb) {
    var i = this.renderCallbacks.indexOf(clb);
    if (~i) {
      this.renderCallbacks.splice(i, 1);
    }
  };

  VisualWorld.prototype.render = function render() {
    var deltaTime = this.clock.getDelta();
    this.controls.update(deltaTime);
    for (var _iterator = this.renderCallbacks, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var clb = _ref;

      clb(deltaTime);
    }
    this.cssRenderer.render(this.cssScene, this.camera);
    this.renderer.render(this.scene, this.camera);
  };

  VisualWorld.prototype.processGeometry = function processGeometry(bufGeometry, mesh) {
    mesh.geometry = bufGeometry;
    // Obtain a Geometry
    var geometry = new _libs.THREE.Geometry().fromBufferGeometry(bufGeometry);
    // Merge the vertices so the triangle soup is converted to indexed triangles
    geometry.mergeVertices();
    // Convert again to BufferGeometry, indexed
    var indexedBufferGeom = this.createIndexedBufferGeometryFromGeometry(geometry);
    // Create index arrays mapping the indexed vertices to bufGeometry vertices
    return this.mapIndices(bufGeometry, indexedBufferGeom);
  };

  VisualWorld.prototype.createIndexedBufferGeometryFromGeometry = function createIndexedBufferGeometryFromGeometry(geometry) {
    var numVertices = geometry.vertices.length;
    var numFaces = geometry.faces.length;

    var bufferGeom = new _libs.THREE.BufferGeometry();
    var vertices = new Float32Array(numVertices * 3);
    var indices = new (numFaces * 3 > 65535 ? Uint32Array : Uint16Array)(numFaces * 3);

    for (var i = 0; i < numVertices; i++) {
      var p = geometry.vertices[i];
      var i3 = i * 3;
      vertices[i3] = p.x;
      vertices[i3 + 1] = p.y;
      vertices[i3 + 2] = p.z;
    }

    for (var _i2 = 0; _i2 < numFaces; _i2++) {
      var f = geometry.faces[_i2];
      var _i3 = _i2 * 3;
      indices[_i3] = f.a;
      indices[_i3 + 1] = f.b;
      indices[_i3 + 2] = f.c;
    }

    bufferGeom.setIndex(new _libs.THREE.BufferAttribute(indices, 1));
    bufferGeom.addAttribute('position', new _libs.THREE.BufferAttribute(vertices, 3));

    return bufferGeom;
  };

  VisualWorld.prototype.isEqual = function isEqual(x1, y1, z1, x2, y2, z2) {
    var delta = 0.000001;
    return Math.abs(x2 - x1) < delta && Math.abs(y2 - y1) < delta && Math.abs(z2 - z1) < delta;
  };

  VisualWorld.prototype.mapIndices = function mapIndices(bufGeometry, indexedBufferGeom) {
    // Creates mappedVertices, mappedIndices and mappedAssociation in bufGeometry
    var vertices = bufGeometry.attributes.position.array;
    var idxVertices = indexedBufferGeom.attributes.position.array;
    var indices = indexedBufferGeom.index.array;

    var numIdxVertices = idxVertices.length / 3;
    var numVertices = vertices.length / 3;

    bufGeometry.mappedVertices = idxVertices;
    bufGeometry.mappedIndices = indices;
    bufGeometry.mappedAssociation = [];

    for (var i = 0; i < numIdxVertices; i++) {
      var association = [];
      bufGeometry.mappedAssociation.push(association);
      var i3 = i * 3;
      for (var j = 0; j < numVertices; j++) {
        var j3 = j * 3;
        if (this.isEqual(idxVertices[i3], idxVertices[i3 + 1], idxVertices[i3 + 2], vertices[j3], vertices[j3 + 1], vertices[j3 + 2])) {
          association.push(j3);
        }
      }
    }
    return { vertices: bufGeometry.mappedVertices, indices: bufGeometry.mappedIndices };
  };

  VisualWorld.prototype.oneNodePositionCallback = function oneNodePositionCallback(p, q) {
    this.position.set(p.x, p.y, p.z);
    this.quaternion.set(q.x, q.y, q.z, q.w);
  };

  VisualWorld.prototype.multyNodePositionCallback = function multyNodePositionCallback(node, p, n) {
    var geometry = this.geometry;
    var volumePositions = geometry.attributes.position.array;
    var volumeNormals = geometry.attributes.normal.array;
    var assocVertex = geometry.mappedAssociation[node];

    for (var k = 0; k < assocVertex.length; k++) {
      var indexVertex = assocVertex[k];
      volumePositions[indexVertex] = p.x;
      volumeNormals[indexVertex] = n.x;
      ++indexVertex;
      volumePositions[indexVertex] = p.y;
      volumeNormals[indexVertex] = n.y;
      ++indexVertex;
      volumePositions[indexVertex] = p.z;
      volumeNormals[indexVertex] = n.z;
    }
  };

  VisualWorld.prototype.multyNodePositionPostCallback = function multyNodePositionPostCallback() {
    var geometry = this.geometry;
    geometry.attributes.position.needsUpdate = true;
    geometry.attributes.normal.needsUpdate = true;
  };

  VisualWorld.prototype.pathPositionCallback = function pathPositionCallback(node, p) {
    var positions = this.geometry.attributes.position.array;
    var i = 3 * node;
    positions[i++] = p.x;
    positions[i++] = p.y;
    positions[i] = p.z;
  };

  VisualWorld.prototype.pathPositionPostCallback = function pathPositionPostCallback() {
    var geometry = this.geometry;
    geometry.computeVertexNormals();
    geometry.attributes.position.needsUpdate = true;
    geometry.attributes.normal.needsUpdate = true;
  };

  return VisualWorld;
}();

exports.default = VisualWorld;

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _Controller2 = __webpack_require__(13);

var _Controller3 = _interopRequireDefault(_Controller2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var WidgetController = function (_Controller) {
  _inherits(WidgetController, _Controller);

  function WidgetController(view) {
    _classCallCheck(this, WidgetController);

    var _this = _possibleConstructorReturn(this, _Controller.call(this));

    _this.view = view;
    _this.visible = false;
    return _this;
  }

  WidgetController.prototype.togle = function togle() {
    this.visible = !this.visible;
    this.fireChange();
  };

  WidgetController.prototype.hide = function hide() {
    this.visible = false;
    this.fireChange();
  };

  WidgetController.prototype.fireChange = function fireChange() {
    if (this.onChange) {
      this.onChange();
    }
    this.updateView();
  };

  WidgetController.prototype.updateView = function updateView() {
    if (this.view) {
      this.view.setState('widFloatWnd', {
        enable: true,
        visible: this.visible,
        active: false
      });
    }
  };

  return WidgetController;
}(_Controller3.default);

exports.default = WidgetController;

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _Target2 = __webpack_require__(19);

var _Target3 = _interopRequireDefault(_Target2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CircleTarget = function (_Target) {
  _inherits(CircleTarget, _Target);

  function CircleTarget(x, y, r) {
    _classCallCheck(this, CircleTarget);

    var _this = _possibleConstructorReturn(this, _Target.call(this));

    _this.p = {
      x: x,
      y: y,
      r: r
    };
    return _this;
  }

  CircleTarget.prototype.testIntersection = function testIntersection(e, data) {
    var res = void 0;
    var x = data.x,
        y = data.y,
        p = this.p;

    if ((x - p.x) * (x - p.x) + (y - p.y) * (y - p.y) <= p.r * p.r) {
      res = {
        target: this,
        data: data
      };
    }
    return res;
  };

  return CircleTarget;
}(_Target3.default);

exports.default = CircleTarget;

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

exports.__esModule = true;

var _Target2 = __webpack_require__(19);

var _Target3 = _interopRequireDefault(_Target2);

var _BaseMathUtils = __webpack_require__(2);

var _BaseMathUtils2 = _interopRequireDefault(_BaseMathUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PolyTarget = function (_Target) {
  _inherits(PolyTarget, _Target);

  function PolyTarget(poly) {
    _classCallCheck(this, PolyTarget);

    var _this = _possibleConstructorReturn(this, _Target.call(this));

    _this.poly = poly;
    return _this;
  }

  PolyTarget.prototype.testIntersection = function testIntersection(e, p) {
    return _BaseMathUtils2.default.isInsidePoly(this.poly, p) ? {
      target: this,
      data: p
    } : undefined;
  };

  return PolyTarget;
}(_Target3.default);

exports.default = PolyTarget;

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

// stats.js - http://github.com/mrdoob/stats.js
(function(f,e){ true?module.exports=e():"function"===typeof define&&define.amd?define(e):f.Stats=e()})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?"block":"none";l=a}var l=0,c=document.createElement("div");c.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000";c.addEventListener("click",function(a){a.preventDefault();
u(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel("FPS","#0ff","#002")),h=e(new f.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var t=e(new f.Panel("MB","#f08","#201"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/
1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement("canvas");q.width=r;q.height=h;q.style.cssText="width:80px;height:48px";var b=q.getContext("2d");b.font="bold "+9*a+"px Helvetica,Arial,sans-serif";b.textBaseline="top";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);
b.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+" "+e+" ("+g(c)+"-"+g(k)+")",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});


/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var define = false;

/*!
 * jQuery Mousewheel 3.1.13
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 */

(function (factory) {
    if ( typeof define === 'function' && define.amd ) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
    } else if (true) {
        // Node/CommonJS style for Browserify
        module.exports = factory;
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {

    var toFix  = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],
        toBind = ( 'onwheel' in document || document.documentMode >= 9 ) ?
                    ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
        slice  = Array.prototype.slice,
        nullLowestDeltaTimeout, lowestDelta;

    if ( $.event.fixHooks ) {
        for ( var i = toFix.length; i; ) {
            $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;
        }
    }

    var special = $.event.special.mousewheel = {
        version: '3.1.12',

        setup: function() {
            if ( this.addEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.addEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = handler;
            }
            // Store the line height and page height for this particular element
            $.data(this, 'mousewheel-line-height', special.getLineHeight(this));
            $.data(this, 'mousewheel-page-height', special.getPageHeight(this));
        },

        teardown: function() {
            if ( this.removeEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.removeEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = null;
            }
            // Clean up the data we added to the element
            $.removeData(this, 'mousewheel-line-height');
            $.removeData(this, 'mousewheel-page-height');
        },

        getLineHeight: function(elem) {
            var $elem = $(elem),
                $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();
            if (!$parent.length) {
                $parent = $('body');
            }
            return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;
        },

        getPageHeight: function(elem) {
            return $(elem).height();
        },

        settings: {
            adjustOldDeltas: true, // see shouldAdjustOldDeltas() below
            normalizeOffset: true  // calls getBoundingClientRect for each event
        }
    };

    $.fn.extend({
        mousewheel: function(fn) {
            return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
        },

        unmousewheel: function(fn) {
            return this.unbind('mousewheel', fn);
        }
    });


    function handler(event) {
        var orgEvent   = event || window.event,
            args       = slice.call(arguments, 1),
            delta      = 0,
            deltaX     = 0,
            deltaY     = 0,
            absDelta   = 0,
            offsetX    = 0,
            offsetY    = 0;
        event = $.event.fix(orgEvent);
        event.type = 'mousewheel';

        // Old school scrollwheel delta
        if ( 'detail'      in orgEvent ) { deltaY = orgEvent.detail * -1;      }
        if ( 'wheelDelta'  in orgEvent ) { deltaY = orgEvent.wheelDelta;       }
        if ( 'wheelDeltaY' in orgEvent ) { deltaY = orgEvent.wheelDeltaY;      }
        if ( 'wheelDeltaX' in orgEvent ) { deltaX = orgEvent.wheelDeltaX * -1; }

        // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
        if ( 'axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {
            deltaX = deltaY * -1;
            deltaY = 0;
        }

        // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
        delta = deltaY === 0 ? deltaX : deltaY;

        // New school wheel delta (wheel event)
        if ( 'deltaY' in orgEvent ) {
            deltaY = orgEvent.deltaY * -1;
            delta  = deltaY;
        }
        if ( 'deltaX' in orgEvent ) {
            deltaX = orgEvent.deltaX;
            if ( deltaY === 0 ) { delta  = deltaX * -1; }
        }

        // No change actually happened, no reason to go any further
        if ( deltaY === 0 && deltaX === 0 ) { return; }

        // Need to convert lines and pages to pixels if we aren't already in pixels
        // There are three delta modes:
        //   * deltaMode 0 is by pixels, nothing to do
        //   * deltaMode 1 is by lines
        //   * deltaMode 2 is by pages
        if ( orgEvent.deltaMode === 1 ) {
            var lineHeight = $.data(this, 'mousewheel-line-height');
            delta  *= lineHeight;
            deltaY *= lineHeight;
            deltaX *= lineHeight;
        } else if ( orgEvent.deltaMode === 2 ) {
            var pageHeight = $.data(this, 'mousewheel-page-height');
            delta  *= pageHeight;
            deltaY *= pageHeight;
            deltaX *= pageHeight;
        }

        // Store lowest absolute delta to normalize the delta values
        absDelta = Math.max( Math.abs(deltaY), Math.abs(deltaX) );

        if ( !lowestDelta || absDelta < lowestDelta ) {
            lowestDelta = absDelta;

            // Adjust older deltas if necessary
            if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
                lowestDelta /= 40;
            }
        }

        // Adjust older deltas if necessary
        if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
            // Divide all the things by 40!
            delta  /= 40;
            deltaX /= 40;
            deltaY /= 40;
        }

        // Get a whole, normalized value for the deltas
        delta  = Math[ delta  >= 1 ? 'floor' : 'ceil' ](delta  / lowestDelta);
        deltaX = Math[ deltaX >= 1 ? 'floor' : 'ceil' ](deltaX / lowestDelta);
        deltaY = Math[ deltaY >= 1 ? 'floor' : 'ceil' ](deltaY / lowestDelta);

        // Normalise offsetX and offsetY properties
        if ( special.settings.normalizeOffset && this.getBoundingClientRect ) {
            var boundingRect = this.getBoundingClientRect();
            offsetX = event.clientX - boundingRect.left;
            offsetY = event.clientY - boundingRect.top;
        }

        // Add information to the event object
        event.deltaX = deltaX;
        event.deltaY = deltaY;
        event.deltaFactor = lowestDelta;
        event.offsetX = offsetX;
        event.offsetY = offsetY;
        // Go ahead and set deltaMode to 0 since we converted to pixels
        // Although this is a little odd since we overwrite the deltaX/Y
        // properties with normalized deltas.
        event.deltaMode = 0;

        // Add event and delta to the front of the arguments
        args.unshift(event, delta, deltaX, deltaY);

        // Clearout lowestDelta after sometime to better
        // handle multiple device types that give different
        // a different lowestDelta
        // Ex: trackpad = 3 and mouse wheel = 120
        if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }
        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);

        return ($.event.dispatch || $.event.handle).apply(this, args);
    }

    function nullLowestDelta() {
        lowestDelta = null;
    }

    function shouldAdjustOldDeltas(orgEvent, absDelta) {
        // If this is an older event and the delta is divisable by 120,
        // then we are assuming that the browser is treating this as an
        // older mouse wheel event and that we should divide the deltas
        // by 40 to try and get a more usable deltaFactor.
        // Side note, this actually impacts the reported scroll distance
        // in older browsers and can cause scrolling to be slower than native.
        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
        return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
    }

}));



/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

__webpack_require__(21);
module.exports = __webpack_require__(20);


/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgMjU4Yzg0YTdjYjRiOWU5YTc2NDMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2xpYnMuanMiLCJ3ZWJwYWNrOi8vLy4vanMvbGlicy5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9CYXNlTWF0aFV0aWxzLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL01hdGhVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9JbWFnZUJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvR3JhcGhVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9JbWFnZUZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9Cb29rUHJvcHNCdWlsZGVyLmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvU2hlZXRCbG9jay5qcyIsIndlYnBhY2s6Ly8vLi9qcy9wcm9wcy9ib29rLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL0NTUzNEUmVuZGVyZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvQ1NTTGF5ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9DdXN0b21FdmVudENvbnZlcnRlci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9FdmVudENvbnZlcnRlci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9GaW5kZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvUGRmLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL1RocmVlVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvdGFyZ2V0cy9UYXJnZXQuanMiLCJ3ZWJwYWNrOi8vLy4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL3BvbHlmaWxsLmpzIiwid2VicGFjazovLy8uL2pzL1RIUkVFeC9GdWxsU2NyZWVuLmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvQXV0b05hdmlnYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL0JpbmRlci5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL0Jvb2suanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9Cb29rQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL0Jvb2tQcmludGVyLmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvQm9va1ZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9DbGJCb29rUHJvcHNCdWlsZGVyLmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvQ292ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9Dc3NMYXllcnNNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvUGFnZU1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9QZGZCb29rUHJvcHNCdWlsZGVyLmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvUGRmTGlua3NIYW5kbGVyLmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvU2VhcmNoRW5naW5lLmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvU2hlZXRDc3NMYXllci5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL1NoZWV0UGh5c2ljcy5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL1NvdW5kc0Vudmlyb21lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9Ub2NDb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL2pzL21vZGVscy9zaGVldEJsb2NrLmpzIiwid2VicGFjazovLy8uL2pzL3Byb3BzL2Jvb2tDb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL0JsYW5rSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvQm9va21hcmtzLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL0RldGVjdG9yLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL0RvY01vdXNlU2ltdWxhdG9yLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL0RvbTJJbWFnZS5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9EcmFnLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL0V2ZW50c1RvQWN0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9JbnRlcmFjdGl2ZUltYWdlLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL0xvYWRpbmdBbmltYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvTG9hZGluZ0NvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvTW91c2VFdmVudENvbnZlcnRlci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9PYmplY3QzRFdhdGNoZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvT3JiaXQuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvUGRmSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvU2VhcmNoLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL1N0YXRpY0ltYWdlLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL1RleHR1cmVBbmltYXRvci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9UaHJlZU1vdXNlRXZlbnRDb252ZXJ0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvVGh1bWJuYWlscy5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9WaWV3LmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL1Zpc3VhbFdvcmxkLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL1dpZGdldENvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvdGFyZ2V0cy9DaXJjbGVUYXJnZXQuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvdGFyZ2V0cy9Qb2x5VGFyZ2V0LmpzIiwid2VicGFjazovLy8uL34vc3RhdHMuanMvYnVpbGQvc3RhdHMubWluLmpzIiwid2VicGFjazovLy8uL34vanF1ZXJ5LW1vdXNld2hlZWwvanF1ZXJ5Lm1vdXNld2hlZWwuanMiXSwibmFtZXMiOlsiXyQiLCJ3aW5kb3ciLCJqUXVlcnkiLCJyZXF1aXJlIiwiX2h0bWwyY2FudmFzIiwiaHRtbDJjYW52YXMiLCJfVEhSRUUiLCJUSFJFRSIsIl9QREZKUyIsIlBERkpTIiwiJCIsIkJhc2VNYXRoVXRpbHMiLCJzdW0xIiwia2EiLCJhIiwia2IiLCJiIiwic3VtMiIsInN1bTMiLCJzdW00Iiwicms0IiwiZHkiLCJ0IiwiZHQiLCJ5Iiwic3VtIiwibGVuZ3RoIiwiazEiLCJrMiIsImszIiwiazQiLCJleHRyYXBvbGF0ZUxpbmVhciIsIngiLCJ4aSIsImludGVycG9sYXRlTGluZWFyIiwieWkiLCJyZXZlcnNlIiwiY2FsY1NjYWxlIiwic3JjVyIsInNyY0giLCJkc3RXIiwiZHN0SCIsIk1hdGgiLCJtaW4iLCJtdWxNIiwiciIsImkiLCJwdXNoIiwiaiIsImsiLCJ0cmFuc00iLCJtIiwibWF0IiwiZGF0YSIsInMiLCJkaXNwIiwiTSIsInByZWRpY3QiLCJudW0iLCJsIiwiRCIsImFtIiwiYm0iLCJ0YSIsImQiLCJwIiwidiIsInJvdW5kIiwiaW5kZXhPZiIsImdldFVuaXF1ZSIsImNlaWwiLCJyYW5kb20iLCJzZXRTcGxpbmVQb2ludHMiLCJzcGxpbmUiLCJwcyIsInBvaW50cyIsImNvbnNvbGUiLCJ3YXJuIiwic2V0IiwieiIsIm1hcGwyTCIsImxzIiwibGVuIiwibiIsImYiLCJkTCIsIkwiLCJhYnMiLCJkZXQyIiwiYyIsInNvbHZlMkxpbiIsImExIiwiYjEiLCJhMiIsImIyIiwicmVzIiwiZXBzIiwiZHgiLCJpc0luc2lkZVBvbHkiLCJkb25lIiwiY3QiLCJ2MmRpc3QiLCJucCIsInJuIiwicDAiLCJwMSIsImlwIiwibWF4IiwidG4iLCJpc0luc2lkZUNvbnZQb2x5Iiwic2ciLCJ2MmxlbiIsInYyIiwic3FydCIsInYyMSIsInYyMiIsImNvbXB1dGVTcXVhcmUiLCJjb21wdXRlSW50ZXJwQ29lZnMiLCJ0cmkiLCJjb2VmcyIsIk1hdGhVdGlscyIsInNwbGl0U3BsaW5lIiwiTiIsIm8iLCJkbCIsImdldFBvaW50IiwidjEiLCJkaXN0YW5jZVRvIiwiY29weSIsImdldExpbmVhckluZGVjZXMiLCJkZWwiLCJkRGVsIiwicmVmaW5lUG9seSIsInBvbHkiLCJtYXhEbCIsIlZlY3RvcjIiLCJWZWN0b3IzIiwiSW1hZ2VCYXNlIiwiY29udGV4dCIsIndpZHRoIiwiaGVpZ2h0IiwiY29sb3IiLCJ3bmQiLCJkb2MiLCJlbGVtZW50IiwiYm9keSIsInJlbmRlckNhbnZhcyIsImN0eCIsInJlbmRlckNhbnZhc0N0eCIsInJlc1ciLCJyZXNIIiwiZGlzcG9zZSIsInJlbmRlckJsYW5rUGFnZSIsImJlZ2luUGF0aCIsImZpbGxTdHlsZSIsImNvbG9yMlJnYmEiLCJyZWN0IiwiZmlsbCIsInJlbmRlckltYWdlIiwiaW1hZ2UiLCJwdXNoQ3R4IiwiZHJhd0ltYWdlIiwicG9wQ3R4Iiwibm9ybVRvQ29udiIsInJlbmRlckhpdCIsIm1vdmVUbyIsImxpbmVUbyIsImNsb3NlUGF0aCIsInNhdmUiLCJzY2FsZSIsInJlc3RvcmUiLCJyZW5kZXJOb3RGb3VuZFBhZ2UiLCJmaW5pc2hSZW5kZXIiLCJvbkNoYW5nZSIsImZpbmlzaExvYWQiLCJvbkxvYWQiLCJzdGFydFJlbmRlciIsImdldFNpbXVsYXRlZERvYyIsInVuZGVmaW5lZCIsImdldENvbnRleHQiLCJHcmFwaFV0aWxzIiwiaW50ZXJwb2xhdGUwMSIsInkxIiwieTIiLCJnZXRDb2xvckJ5dGVzIiwiaW52ZXJzZUNvbG9yIiwiYnMiLCJpYnMiLCJuYnMiLCJieXRlczJDb2xvciIsImJ5dGVzMlJnYmEiLCJqb2luIiwiSW1hZ2VGYWN0b3J5IiwiY2FjaGUiLCJidWlsZCIsImluZm8iLCJ3aWR0aFRleGVscyIsImhlaWdodFRleGVscyIsImluamVjdG9yIiwidHlwZSIsInNyYyIsIkJvb2tQcm9wc0J1aWxkZXIiLCJvblJlYWR5IiwiZGVmYXVsdHMiLCJjYWxjU2l6ZSIsImNhbGNUZXhlbHMiLCJzaGVldCIsImNhbGNQcm9wcyIsInByb3BzIiwiY292ZXIiLCJwYWdlIiwiY2FsY1NoZWV0cyIsInBhZ2VzIiwic2hlZXRzIiwiZ2V0U2hlZXRzIiwiZ2V0UHJvcHMiLCJnZXRQYWdlQ2FsbGJhY2siLCJiaW5kcyIsInBhZ2VDYWxsYmFjayIsInJlYWR5IiwiU2hlZXRCbG9jayIsInZpc3VhbCIsImZpcnN0IiwibGFzdCIsImFuZ2xlIiwic3RhdGUiLCJsb2FkZWRQb2ludHMiLCJsb2FkUG9pbnRzIiwiT2JqZWN0Iiwia2V5cyIsIm1hcCIsInNoYXBlIiwicFNwbGluZSIsIlNwbGluZSIsImludGVycG9sYXRpb25Qb2ludHMiLCJpU3BsaW5lIiwicmVzWCIsImFTcGxpbmVzIiwiZ2VvbWV0cnkiLCJjbG9uZSIsInNpZGVGYWNlcyIsImZhY2VzIiwic2lkZVRleHR1cmUiLCJUZXh0dXJlIiwid3JhcFQiLCJSZXBlYXRXcmFwcGluZyIsInJlcGVhdCIsIm5lZWRzVXBkYXRlIiwibWF0ZXJpYWxzIiwiTWVzaFBob25nTWF0ZXJpYWwiLCJzZXRUZXh0dXJlIiwibWVzaCIsIk1lc2giLCJNZXNoRmFjZU1hdGVyaWFsIiwiY2FzdFNoYWRvdyIsInJlY2VpdmVTaGFkb3ciLCJ0aHJlZSIsInVzZXJEYXRhIiwic2VsZiIsIm1hcmtlcnMiLCJtYXJrZXIiLCJ1c2UiLCJ2ZXJ0aWNlcyIsImlzIiwiQXJyYXkiLCJhcHBseSIsIl8iLCJjcmVhdGVNYXJrZXIiLCJzaXplIiwidmVydGV4IiwiYWRkIiwiY29ybmVyIiwibWF4RGlzdGFuY2UiLCJPWiIsImF4aXMiLCJnZXRTaXplIiwiZ2V0VG9wQ2VybmVycyIsIm9mZiIsIlBJIiwicmVzWiIsImdldFRvcFNpemUiLCJ2cyIsImdldFRvcFdvcmxkUm90YXRpb24iLCJxIiwiZ2V0VG9wV29ybGRQb3NpdGlvbiIsInZpIiwibG9jYWxUb1dvcmxkIiwiZ2V0SW50ZXJwb2xhdGlvblBvaW50cyIsImluZHMiLCJtb2QiLCJLIiwid2F2ZSIsImNsb3NlZEFuZ2xlIiwiYmluZGVyVHVybiIsIm9wZW5lZEFuZ2xlIiwiY2xvc2VkSW50ZXJwb2xhdGlvbkluZGVjZXMiLCJmbGF0SW50ZXJwb2xhdGlvbkluZGVjZXMiLCJnZXRQb2ludHNBdEFuZ2xlIiwib3BlbmVkSW50ZXJwb2xhdGlvbkluZGVjZXMiLCJobCIsImhyIiwib2Zmc2V0IiwiZGVwdGgiLCJpbkFuZ2xlIiwiaEFuZ2xlIiwiZ2V0UG9pbnRzQXRBbmdsZUFuZEhzIiwibGVmdCIsInJpZ2h0IiwiaW52ZXJzZSIsInNldFBvaW50cyIsInlzIiwicmVzWSIsInBsYW5lIiwiUGxhbmUiLCJub3JtYWwiLCJwbGFuZU9mZnNldCIsImZsZXhpYmxlQ29ybmVyIiwicHJvaiIsInNldEZyb21Ob3JtYWxBbmRDb3BsYW5hclBvaW50Iiwibm9ybWFsaXplIiwicHJvamVjdFBvaW50Iiwic3ViIiwiZGlzdGFuY2UiLCJkMkFuZ2xlIiwiY29ybmVyRGV2aWF0aW9uIiwiZXhwIiwiYmVuZGluZyIsImFwcGx5QXhpc0FuZ2xlIiwicG9pbnQiLCJwb3NpdGlvbiIsImNvbXB1dGVWZXJ0ZXhOb3JtYWxzIiwiY29tcHV0ZUJvdW5kaW5nU3BoZXJlIiwidmVydGljZXNOZWVkVXBkYXRlIiwibWFya3VwIiwiY29tcHV0ZVZlcnRpY2VzIiwiZ2V0UG9pbnRzQXRIcyIsImhzIiwiYmwiLCJwMiIsImRwIiwibG4iLCJzcCIsInNpbiIsImNvcyIsIm5wcyIsImFuZ2xlcyIsInhwcyIsInlwcyIsImludGVycG9sYXRlIiwiZ3Jhdml0eSIsImNhY2hlZFBhZ2VzIiwicmVuZGVySW5hY3RpdmVQYWdlcyIsInJlbmRlcldoaWxlRmxpcHBpbmciLCJwYWdlc0ZvclByZWRpY3RpbmciLCJwcmVsb2FkUGFnZXMiLCJzdGFydFZlbG9jaXR5IiwiZmxleGliaWxpdHkiLCJiaW5kZXJUZXh0dXJlIiwicGFkZGluZyIsIm1hc3MiLCJDU1MzRE9iamVjdCIsInN0eWxlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsIk9iamVjdDNEIiwiQ1NTM0RTcHJpdGUiLCJDU1MzRFJlbmRlcmVyIiwiX3dpZHRoIiwiX2hlaWdodCIsIl93aWR0aEhhbGYiLCJfaGVpZ2h0SGFsZiIsIm1hdHJpeCIsIk1hdHJpeDQiLCJjYW1lcmEiLCJmb3YiLCJvYmplY3RzIiwiZG9tRWxlbWVudCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsIm92ZXJmbG93IiwiY2FtZXJhRWxlbWVudCIsIldlYmtpdFRyYW5zZm9ybVN0eWxlIiwiTW96VHJhbnNmb3JtU3R5bGUiLCJ0cmFuc2Zvcm1TdHlsZSIsImFwcGVuZENoaWxkIiwiaXNJRSIsInRlc3QiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJzZXRDbGVhckNvbG9yIiwic2V0U2l6ZSIsImVwc2lsb24iLCJ2YWx1ZSIsImdldENhbWVyYUNTU01hdHJpeCIsImVsZW1lbnRzIiwiZ2V0T2JqZWN0Q1NTTWF0cml4IiwiY2FtZXJhQ1NTTWF0cml4IiwibWF0cml4M2QiLCJyZW5kZXJPYmplY3QiLCJvYmplY3QiLCJtYXRyaXhXb3JsZEludmVyc2UiLCJ0cmFuc3Bvc2UiLCJjb3B5UG9zaXRpb24iLCJtYXRyaXhXb3JsZCIsImNhY2hlZFN0eWxlIiwiaWQiLCJXZWJraXRUcmFuc2Zvcm0iLCJNb3pUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm0iLCJkaXN0YW5jZVRvQ2FtZXJhU3F1YXJlZCIsImdldERpc3RhbmNlVG9TcXVhcmVkIiwiY2hpbGRyZW4iLCJvYmplY3QxIiwib2JqZWN0MiIsInNldEZyb21NYXRyaXhQb3NpdGlvbiIsImRpc3RhbmNlVG9TcXVhcmVkIiwiek9yZGVyIiwic2NlbmUiLCJvcmRlciIsInNvcnQiLCJ6TWF4IiwidHJhdmVyc2UiLCJpbmRleCIsInpJbmRleCIsInJlbmRlciIsInByb2plY3Rpb25NYXRyaXgiLCJXZWJraXRQZXJzcGVjdGl2ZSIsIk1velBlcnNwZWN0aXZlIiwicGVyc3BlY3RpdmUiLCJ1cGRhdGVNYXRyaXhXb3JsZCIsInBhcmVudCIsIl9DU1MzRE9iamVjdCIsIl9DU1MzRFNwcml0ZSIsIkNTU0xheWVyIiwiaW5pdCIsImRlbGF5IiwiYXBwZW5kVG8iLCJoZWFkIiwicmVtb3ZlIiwid2lkdGhQeHMiLCJqQ29udGFpbmVyIiwiaGVpZ2h0UHhzIiwic2V0RGF0YSIsImNhbGxJbnRlcm5hbCIsIm5hbWUiLCJlIiwiZXJyb3IiLCJjbGVhckludGVybmFscyIsImNzcyIsImh0bWwiLCJqcyIsImV2YWwiLCJwZW5kZWRDYWxsIiwiY2xiIiwidGltZXN0YW1wIiwiRGF0ZSIsIm5vdyIsInNldFRpbWVvdXQiLCJpc0hpZGRlbiIsImhhc0NsYXNzIiwiaGlkZSIsImFkZENsYXNzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzaG93IiwicmVtb3ZlQ2xhc3MiLCJDYWNoZSIsIm1heFNpemUiLCJJbmZpbml0eSIsInNpemVvZiIsImNvdW50U2l6ZW9mIiwib3MiLCJNYXAiLCJmb3JFYWNoIiwiZ2V0IiwibG9ja2VkIiwiZGVsZXRlIiwiZnJlZVNwYWNlIiwiYXJyIiwia2V5IiwicmVjdXJzaW9uU2l6ZW9mIiwiaGFzT3duUHJvcGVydHkiLCJnZXRUaW1lc3RhbXAiLCJwdXQiLCJDb250cm9sbGVyIiwiaGFuZGxlRGVmYXVsdCIsImRpc3BhdGNoQXN5bmMiLCJ0aGVuIiwiZGlzcGF0Y2hFdmVudCIsIkV2ZW50RGlzcGF0Y2hlciIsIkN1c3RvbUV2ZW50Q29udmVydGVyIiwiY3VzdG9tVGVzdCIsImVEb2MiLCJjdXN0b21zIiwiZ2V0Q2FsbGJhY2siLCJ0YXJnZXQiLCJjYWxsYmFjayIsImFkZEN1c3RvbSIsImN1c3RvbSIsImdldE9iamVjdCIsInRlc3RJbnRlcnNlY3Rpb24iLCJFdmVudENvbnZlcnRlciIsImVuYWJsZWQiLCJzZXRFbmFibGUiLCJ2bCIsImNhcE9iamVjdCIsIm5vdGlmeSIsIkV2ZW50IiwiaG92T2JqZWN0IiwidmlldyIsImpFIiwidGltZVN0YW1wIiwiY29udmVydCIsIkZpbmRlciIsImlzRGVsaW1ldHIiLCJERUxJTUlURVIiLCJtZXJnZSIsImFzIiwic3RycyIsImJhc2UiLCJjaGFyQXQiLCJzdHIiLCJhZGRIaXRzIiwibG93ZXJCb3VuZCIsImNoYXJzIiwicGF0dGVybiIsImRlbGltZXRlciIsImhpdHMiLCJhZGRDb250ZXh0IiwiZGVscyIsImNvbnRleHRMZW5ndGgiLCJwcmV2RGVscyIsImNvbnRleHRzIiwic3Vic3RyIiwiZ2V0SGl0cyIsImdldENvbnRleHRzIiwidG9Mb3dlckNhc2UiLCJsc3RyIiwid29ya2VyU3JjIiwiUERGSlNfTE9DQUxFIiwicGRmSnNXb3JrZXIiLCJQZGYiLCJub3JtYWxpemVVcmwiLCJ1cmwiLCJzcGxpdCIsInJlcGxhY2UiLCJsb2NhdGlvbiIsImhyZWYiLCJsb2FkaW5nUHJvZ3Jlc3MiLCJoYW5kbGVyUXVldWUiLCJwcm9ncmVzRGF0YSIsImxvYWRlZCIsInRvdGFsIiwiZ2V0RG9jdW1lbnQiLCJjdXIiLCJmbG9vciIsIm9sZCIsImlzTmFOIiwiaGFuZGxlciIsInNwbGljZSIsInNldExvYWRpbmdQcm9ncmVzc0NsYiIsImdldFBhZ2VzTnVtIiwibnVtUGFnZXMiLCJnZXRQYWdlU2l6ZSIsImdldEhhbmRsZXIiLCJUaHJlZVV0aWxzIiwidmVydGljZXMyVVZzIiwiaW5kZWNlcyIsImNvbnZlckNsYiIsInZpcyIsImNvbXB1dGVGYWNlVmVydGV4VXZzIiwidXZzIiwidXZzaSIsIm1hdGVyaWFsSW5kZXgiLCJmYWNlVmVydGV4VXZzIiwiU3BoZXJlR2VvbWV0cnkiLCJmaW5kVXZUcmlzIiwiZm91bmQiLCJmaW5kSW50ZXJuYWxWZXJ0aWNlcyIsInZlcnRleE5vcm1hbHMiLCJ2YWx1ZXMiLCJUYXJnZXQiLCJmbiIsIkZsaXBCb29rIiwib3B0aW9ucyIsInBkZkxpbmtzSGFuZGxlciIsInNvdW5kcyIsInRvY0N0cmwiLCJ0aHVtYm5haWxzIiwiYm9va21hcmtzIiwiY3RybCIsImJvb2tQcmludGVyIiwiYm9vayIsInByb3BzQnVpbGRlciIsImJvb2tCdWlsZGVyIiwicGVuZGluZ0Rpc3Bvc2UiLCJ3ZWJnbCIsImFkZEdldFdlYkdMTWVzc2FnZSIsImdldFZpZXciLCJsb2FkaW5nQ3RybCIsInByb2dyZXNzIiwiZ2V0Q29udGFpbmVyIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwicHJvcGVydGllc0NhbGxiYWNrIiwidGVtcGxhdGUiLCJwcmludFN0eWxlIiwiY29udHJvbHNQcm9wcyIsInNldEluamVjdG9yIiwidyIsImJvb2tDdHJsIiwiYWRkSGFuZGxlciIsInNldFByaW50ZXIiLCJzZWFyY2giLCJnZXRTZWFyY2hWaWV3IiwiZ2V0UGFnZXMiLCJvblF1ZXJ5Iiwic2V0UXVlcnkiLCJiaW5kIiwic2V0UmVzdWx0cyIsInJlc3VsdHMiLCJsYXN0UGFnZSIsImdldFRodW1ibmFpbHNWaWV3Iiwia1d0b0giLCJzZXRUaHVtYm5haWxzIiwic2V0U2VhcmNoIiwic2V0VG9jQ3RybCIsImhhbmRsZUV2ZW50IiwiZ2V0T3V0bGluZSIsIm91dGxpbmUiLCJnZXRCb29rbWFya3NWaWV3Iiwic2V0Qm9va21hcmtzIiwicGRmTGlua3MiLCJzZXRIYW5kbGVyIiwic2V0U291bmRzIiwic3Vic2NyaWJlRmxpcHMiLCJhdXRvTmF2aWdhdGlvbiIsInBkZiIsInNldFByb2dyZXNzIiwiY29udGFpbmVycyIsImF0dHIiLCJwcm90b3R5cGUiLCJUeXBlRXJyb3IiLCJPIiwic3RhcnQiLCJhcmd1bWVudHMiLCJyZWxhdGl2ZVN0YXJ0IiwiZW5kIiwicmVsYXRpdmVFbmQiLCJmaW5hbCIsImZpbmQiLCJkZWZpbmVQcm9wZXJ0eSIsInByZWRpY2F0ZSIsImxpc3QiLCJ0aGlzQXJnIiwiY2FsbCIsImZpbmRJbmRleCIsIlRIUkVFeCIsIkZ1bGxTY3JlZW4iLCJhdmFpbGFibGUiLCJfaGFzV2Via2l0RnVsbFNjcmVlbiIsIl9oYXNNb3pGdWxsU2NyZWVuIiwiYWN0aXZhdGVkIiwid2Via2l0SXNGdWxsU2NyZWVuIiwibW96RnVsbFNjcmVlbiIsImFzc2VydCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJleGl0SGFuZGxlciIsIm1zRnVsbHNjcmVlbkVsZW1lbnQiLCJyZXF1ZXN0Iiwid2Via2l0UmVxdWVzdEZ1bGxTY3JlZW4iLCJtb3pSZXF1ZXN0RnVsbFNjcmVlbiIsImNhbmNlbCIsIndlYmtpdENhbmNlbEZ1bGxTY3JlZW4iLCJtb3pDYW5jZWxGdWxsU2NyZWVuIiwiQXV0b05hdmlnYXRvciIsInVybFBhcmFtIiwibmF2aWdhdGVzIiwiZmIzZCIsImluc3RhbmNlcyIsImdvVG9QYWdlIiwiZ2V0UGFnZU51bWJlciIsImdldFBhcmFtZXRlckJ5TmFtZSIsInJlZ2V4IiwiUmVnRXhwIiwiZXhlYyIsImRlY29kZVVSSUNvbXBvbmVudCIsIm51bWJlciIsInBhcnNlSW50IiwiQmluZGVyIiwiYmFja1NpemUiLCJiYWNrRyIsIkJveEdlb21ldHJ5IiwiYmFja00iLCJ0ZXh0dXJlTG9hZGVyIiwibG9hZCIsInRleHR1cmUiLCJzZXRIZXgiLCJtaW5GaWx0ZXIiLCJMaW5lYXJGaWx0ZXIiLCJiYWNrIiwiYmFja1JUIiwiYmFja1JSIiwiYmFja0xUIiwiYmFja0xSIiwibGVmdFBpdm90IiwicmlnaHRQaXZvdCIsInRyMSIsInF1YXRlcm5pb24iLCJzZXRGcm9tQXhpc0FuZ2xlIiwidHIyIiwic2V0TGVmdCIsInNldFJpZ2h0Iiwiam9pbkxlZnRDb3ZlciIsImRpc2Nvbm5lY3RMZWZ0Q292ZXIiLCJqb2luUmlnaHRDb3ZlciIsImRpc2Nvbm5lY3RSaWdodENvdmVyIiwiQm9vayIsInByZXBhcmVQcm9wcyIsInBhZ2VNYW5hZ2VyIiwibGF5ZXJNYW5hZ2VyIiwic2VhcmNoRW5naW5lIiwib25QYWdlSGl0c0NoYW5nZWQiLCJxdWVyeSIsInJlZnJlc2hQYWdlUXVlcnkiLCJiaW5kZXIiLCJsZWZ0Q292ZXIiLCJzZXRMZWZ0Q292ZXJUZXh0dXJlIiwic3Vic2NyaWJlU2hlZXRCbG9jayIsInJpZ2h0Q292ZXIiLCJzZXRSaWdodENvdmVyVGV4dHVyZSIsInRocmVlU2hlZXRCbG9ja3MiLCJzaGVldEJsb2NrcyIsImFkZFNoZWV0QmxvY2siLCJzZXRQYWdlVGV4dHVyZSIsInNoZWV0UGh5c2ljcyIsInVwZGF0ZSIsImFkZFJlbmRlckNhbGxiYWNrIiwib25QaWNrQ2FsbGJhY2siLCJkcmFnIiwib25EcmFnQ2FsbGJhY2siLCJvblJlbGVhc2VDYWxsYmFjayIsImRyYWdBbmdsZSIsInRtcCIsImJveHMiLCJCb3gzIiwiYWRkT2JqZWN0Iiwibm90aWZ5QmVmb3JlQW5pbWF0aW9uIiwibm90aWZ5QWZ0ZXJBbmltYXRpb24iLCJyZW1vdmVPYmplY3QiLCJyZW1vdmVSZW5kZXJDYWxsYmFjayIsInJlbW92ZVNoZWV0QmxvY2tzIiwicmVtb3ZlU2hlZXRCbG9jayIsImlzUHJvY2Vzc2luZyIsInNldEZsaXBQcm9ncmVzc0NsYiIsImZsaXBQcm9ncmVzc0NsYiIsImlzQWN0aXZlUGFnZSIsImdldEJsb2NrQnlQYWdlIiwiYmxvY2siLCJnZXRCbG9ja1BhZ2VzIiwicmFuZ2UiLCJnZXRQYWdlIiwiZ2V0TGVmdEZsaXBwaW5nIiwiZ2V0UmlnaHRGbGlwcGluZyIsImdldENsb3NlZEJsb2NrQW5nbGUiLCJwaHlzaWNJZCIsImdldFBhcmFtZXRyIiwiZmxpcExlZnQiLCJwcm9ncmVzc0NsYiIsImNvbm5lY3RQaHlzaWNzIiwic2V0U2hlZXRCbG9ja3MiLCJzcGxpdFNoZWV0QmxvY2siLCJmaW5pc2hBbmltYXRpb25DbGIiLCJmbGlwUmlnaHQiLCJjbGVhckhvdmVySW5mbyIsInR1cm5PbkV2ZW50cyIsImhvdmVySW5mbyIsImZvcmNlIiwiY29ybmVyRm9yY2UiLCJ4U2VnbWVudCIsInNldEZyb21PYmplY3QiLCJ1bmlvbiIsImNvbXB1dGVUYXJnZXQiLCJzZWciLCJ1diIsImZhY2UiLCJjb3JuZXJUYXJnZXQiLCJkcmFnRm9yY2VDbGIiLCJnZXREcmFnQ29ybmVyRm9yY2VDbGIiLCJkcmFnSW5mbyIsInR1cm5PZmZFdmVudHMiLCJnZXRGbGlwcGluZyIsImZsaXAiLCJjb3JuZXJDYWxsYmFjayIsInBlbmRpbmdzIiwiaG92ZXJBbmdsZSIsImhvdmVyIiwicG9zc2libGUiLCJuZXh0QmxvY2siLCJzZXRQYXJhbWV0ciIsImdldFRhcmdldEZvcmNlQ2xiIiwiaG92ZXJDb3JuZXJGb3JjZUNsYiIsImV2ZW50Q29udmVydGVyIiwibW91c2VDYWxsYmFjayIsInRyYW5zZmVyRXZlbnRUb1RleHR1cmUiLCJhZGRUaHJlZSIsIm1vdXNlRXZlbnRzIiwicmVtb3ZlVGhyZWUiLCJibG9ja3MiLCJtYXRlcmlhbCIsIm1lcmdlU2hlZXRCbG9ja3MiLCJjYWxjQmxvY2tGb3JjZSIsInZlbG9jaXR5IiwiY29ybmVySGVpZ2h0IiwiY2FsY0Jsb2NrQ29ybmVyRm9yY2UiLCJhbmltYXRpb25Ob3RpZmljYXRpb24iLCJyZWplY3QiLCJjb3ZlckhlaWdodCIsInNpbXVsYXRlQ2xiIiwicmVtb3ZlQ2xiIiwiYW5nbCIsImNoIiwiY2F0Y2giLCJzaW11bGF0ZSIsImxlZnRTaXplIiwibmV3QmxvY2siLCJmaXJzdEJsb2NrIiwibGFzdEJsb2NrIiwiY3JlYXRlU2lkZVRleHR1cmUiLCJqQyIsIm1lcmdlUHJvcHMiLCJzZWNvbmQiLCJCb29rQ29udHJvbGxlciIsImRldmljZVBpeGVsUmF0aW8iLCJvcmJpdCIsImdldE9yYml0IiwidXBkYXRlVmlld0lmU3RhdGUiLCJiaW5kQWN0aW9ucyIsInNtYXJ0UGFuIiwiYWN0aW9ucyIsImFjdGl2ZSIsInNpbmdsZVBhZ2UiLCJhY3RpdmVGb3JNb2JpbGUiLCJzdGF0cyIsImxpZ2h0aW5nIiwiZGVmYXVsdCIsImFjdGl2ZVNpZGUiLCJib29rV2F0Y2hlciIsIlN0YXRzIiwidG9wIiwic2V0RXh0cmFMaWdodGluZyIsIm9uU2NyZWVuTW9kZUNoYW5nZWQiLCJvblVwZGF0ZVZpZXciLCJ1cGRhdGVWaWV3IiwiZ2V0UGFyZW50Q29udGFpbmVyIiwiY21kU21hcnRQYW4iLCJwcmludGVyIiwic2V0RW5hYmxlZCIsImNhblpvb21JbiIsImNhblpvb21PdXQiLCJjYW5EZWZhdWx0Wm9vbSIsImNtZFpvb21JbiIsImRlbHRhIiwiem9vbUluIiwiY21kWm9vbU91dCIsInpvb21PdXQiLCJjbWREZWZhdWx0Wm9vbSIsImNtZFRvYyIsInRvZ2xlIiwiY21kRmFzdEJhY2t3YXJkIiwic3RhcnRGbGlwIiwiY21kQmFja3dhcmQiLCJjbWRGb3J3YXJkIiwiY21kRmFzdEZvcndhcmQiLCJjbWRTYXZlIiwib3BlbiIsImRvd25sb2FkVVJMIiwiY21kUHJpbnQiLCJwcmludCIsImNtZEZ1bGxTY3JlZW4iLCJtaW5BemltdXRoQW5nbGUiLCJtYXhBemltdXRoQW5nbGUiLCJtaW5Qb2xhckFuZ2xlIiwibWF4UG9sYXJBbmdsZSIsImNtZFNpbmdsZVBhZ2UiLCJjbWRTb3VuZHMiLCJjbWRTdGF0cyIsImFwcGVuZCIsImNtZExpZ2h0aW5nVXAiLCJjbWRMaWdodGluZ0Rvd24iLCJwYWdlTnVtIiwiY3VycmVudCIsImZsaXBzIiwiY292cyIsImN2Iiwic2V0Q2xiIiwiZmwiLCJ0aW1lIiwiZmxpcFJlcyIsImVuZEZsaXAiLCJnZXRQYWdlRm9yR1VJIiwiaW5wUGFnZSIsInNldFN0YXRlIiwiZW5hYmxlIiwidmlzaWJsZSIsImZsaXBwZXJzRW5hYmxlIiwiZ2V0QWN0aW9ucyIsImFjdGl2YXRlIiwiY21kUGFuTGVmdCIsInBhbiIsInNwZWVkIiwiY21kUGFuUmlnaHQiLCJjbWRQYW5VcCIsImNtZFBhbkRvd24iLCJtb3VzZUNtZFJvdGF0ZSIsInJvdGF0ZSIsIm1vdXNlQ21kRHJhZ1pvb20iLCJtb3VzZUNtZFBhbiIsIm1vdXNlQ21kV2hlZWxab29tIiwicHJldmVudERlZmF1bHQiLCJkZWx0YVkiLCJ0b3VjaENtZFJvdGF0ZSIsInRvdWNoQ21kWm9vbSIsInRvdWNoQ21kUGFuIiwid2lkU2V0dGluZ3MiLCJlVG9BIiwiYWRkQWN0aW9uIiwibW91c2VCdXR0b25zIiwiUmlnaHQiLCJhY3Rpb24iLCJmbGFncyIsImNvZGUiLCJzZXRBY3Rpb25zIiwibGV2ZWxzIiwiQm9va1ByaW50ZXIiLCJzdHlsZVNoZWV0IiwicGRmU3JjIiwiY2FuY2VsZWQiLCJmcmFtZSIsInByaW50V25kIiwiY2FsbE1hbnVhbGx5IiwidXNlSUZyYW1lIiwiY29udGVudFdpbmRvdyIsIm9uIiwicmVuZGVyQ29udGVudCIsImNvbnRlbnQiLCJwcmludERvYyIsIndyaXRlIiwiY2xvc2UiLCJvblByb2dyZXNzIiwiU2V0IiwicmVuZGVySHRtbCIsInJlbmRlckhlYWQiLCJ3cmFwIiwibGlua3MiLCJtYXRjaCIsImxpbmsiLCJmYWlsIiwicmVzcG9uc2VUZXh0IiwiZGVmYXVsdFN0eWxlU2hlZXQiLCJpc0Nocm9taXVtIiwiY2hyb21lIiwid2luTmF2IiwidmVuZG9yTmFtZSIsInZlbmRvciIsImlzSUVlZGdlIiwiaXNJT1NDaHJvbWUiLCJCb29rVmlldyIsImNvbnRhaW5lciIsImluaXRWaWV3IiwiYm9va21hcmtzVmlldyIsInRodW1ibmFpbHNWaWV3Iiwic2VhcmNoVmlldyIsImdldEhhbmRsZXJzIiwiaGFuZGxlcnMiLCJjYWxsTGF0ZXIiLCJQQUdFX0hBTkRMRVJfREVMQVkiLCJvbkl0ZW1TdGF0ZUNoYW5nZWQiLCJwYXJlbnRDb250YWluZXIiLCJnZXRGb3JtcyIsImdldExpbmtzIiwiZ2V0V2lkZ2V0cyIsImdldElucHV0cyIsImdldFRleHRzIiwiZ2V0VGVtcGxhdGUiLCJzdHlsZXMiLCJyZWwiLCJzY3JpcHQiLCJDbGJCb29rUHJvcHNCdWlsZGVyIiwiaW1hZ2VGYWN0b3J5IiwiQ292ZXIiLCJDc3NMYXllcnNNYW5hZ2VyIiwid3JhcHBlcnMiLCJnZXRBY3RpdmVzIiwibGF5ZXJzIiwiaGlkZGVuIiwiZ2V0TGF5ZXJzIiwic2wiLCJ3YWl0IiwiYWxsIiwiUGFnZU1hbmFnZXIiLCJwYWdlUXVlcnkiLCJwYWdlQ2FjaGUiLCJyZXNvdXJjZXNDYWNoZSIsImNhbnZhcyIsImxvYWRpbmdzIiwicmVuZGVyUXVldWUiLCJwYWdlUmVxdWVzdHMiLCJwcmVkaWN0ZWRSZXF1ZXN0cyIsInRtcE1hdGVyaWFsIiwiTWVzaEJhc2ljTWF0ZXJpYWwiLCJQbGFuZUdlb21ldHJ5IiwibG9hZGluZyIsImNyZWF0ZUxvYWRpbmdUZXh0dXJlIiwic2V0SW50ZXJ2YWwiLCJ1cGRhdGVSZW5kZXJRdWV1ZSIsInNwcml0ZVRpbGVzIiwiYW5pbWF0aW9uIiwiYW5pbWF0b3IiLCJjcmVhdGVTcHJpdGUiLCJpc0NvdmVyIiwiaXNBY3RpdmUiLCJyZW1vdmVGcm9tTG9hZGluZ3MiLCJyZW1vdmVGcm9tUmVuZGVyUXVldWUiLCJ3cmFwcGVyIiwiY3NzTGF5ZXJzTG9hZGVyIiwiYXJncyIsInJlc29sdmVQZW5kaW5ncyIsInBpIiwic2V0TWF0ZXJpYWwiLCJpbnRlcmFjdGl2ZSIsIm9uVXBkYXRlIiwicmVuZGVyaW5nIiwidHJhbnNmZXJFdmVudHMiLCJtb3VzZXVwIiwibW91c2VvdXQiLCJlbnQiLCJnZXRPckxvYWRUZXh0dXJlT2JqZWN0IiwidG9Eb2MiLCJ0b09iamVjdCIsImxvYWRQcmVkaWN0ZWRQYWdlcyIsImFkZFBhZ2VSZXF1ZXN0Iiwic2hpZnQiLCJvYiIsIlBkZkJvb2tQcm9wc0J1aWxkZXIiLCJwYWdlRGVzY3JpcHRpb24iLCJQZGZMaW5rc0hhbmRsZXIiLCJjdXJzb3JzIiwiZGVmYXVsdEhhbmRsZXIiLCJkZXN0aW5hdGlvbiIsImNhbGxIYW5kbGVycyIsImV2ZW50IiwiYW5ubyIsImFubm90YXRpb24iLCJwb3AiLCJkZXN0IiwiZGVzdFByb21pc2UiLCJnZXREZXN0aW5hdGlvbiIsImdldFBhZ2VJbmRleCIsIlNlYXJjaEVuZ2luZSIsInByb2Nlc3MiLCJzdGFtcCIsIm5leHQiLCJnZXRUZXh0Q29udGVudCIsInRleHRDb250ZW50IiwiaXRlbXMiLCJpdGVtIiwiU2hlZXRDc3NMYXllciIsImxheWVyIiwiYWRkQ3NzT2JqZWN0IiwicmVtb3ZlQ3NzT2JqZWN0Iiwicm90YXRpb24iLCJTaGVldFBoeXNpY3MiLCJ0YXJnZXRGb3JjZUNsYiIsImciLCJ0bCIsInRhcmdldEFuZ2xlIiwiZmxidCIsImRyYWdDb3JuZXJGb3JjZUNsYiIsImZwcyIsInN0YXJ0RHQiLCJtYXJnaW4iLCJpbmZNIiwiYXR0ZW1wdHMiLCJtYXhJdGVyYXRpb25zIiwiZm9yY2VDbGIiLCJjb3JuZXJGb3JjZUNsYiIsIm5vIiwiY2YiLCJnZXRQYXJhbWV0ck1hcCIsIlQiLCJhdHRlbXB0IiwiaXQiLCJub3MiLCJpbnRlZ3JhdGUiLCJjaSIsImZpbmRDb2xsaXNpb25zIiwic2NvcyIsInNvbHZlQ29sbGlzaW9uIiwiZ3MiLCJpMCIsImZpbmRBbmRTb2x2ZUNvcm5lckNvbGxpc2lvbnMiLCJyZW1vdmVTdGF0aWNzIiwiYWwiLCJkQ2giLCJkdiIsIm1tIiwiYXYiLCJidiIsImlzQ29sbGlzaW9uIiwiU291bmRzRW52aXJvbWVudCIsImF1ZGlvIiwiQXVkaW8iLCJwbGF5IiwicGF1c2UiLCJjdXJyZW50VGltZSIsImVtaXR0ZXIiLCJUb2NDb250cm9sbGVyIiwidGFiIiwib25OYXZpZ2F0ZSIsIm5hdmlnYXRlVGh1bWJuYWlscyIsImZpcmVDaGFuZ2UiLCJuYXZpZ2F0ZVNlYXJjaCIsIm5hdmlnYXRlQm9va21hcmtzIiwiaXNCb29rbWFya3MiLCJjbWRCb29rbWFya3MiLCJjbWRUaHVtYm5haWxzIiwiY21kU2VhcmNoIiwiY21kQ2xvc2VUb2MiLCJmcm9udEdlb21ldHJ5IiwidHJhbnNsYXRlIiwiYmFja0dlb21ldHJ5Iiwicm90YXRlWSIsImxlZnRHZW9tZXRyeSIsInJpZ2h0R2VvbWV0cnkiLCJ0b3BHZW9tZXRyeSIsInJvdGF0ZVgiLCJib3R0b21HZW9tZXRyeSIsIkdlb21ldHJ5IiwiYWRkRmFjZXMiLCJmcyIsIkZhY2UzIiwibWFwVmVydGljZXMiLCJkc3QiLCJlcSIsImZyb250TWFwIiwiYmFja01hcCIsImxlZnRNYXAiLCJyaWdodE1hcCIsIkxlZnQiLCJNaWRkbGUiLCJCbGFua0ltYWdlIiwiQm9va21hcmtzIiwiZ2V0VGl0bGUiLCJ0aXRsZSIsImdldEl0ZW1zIiwibm9kZXMiLCJtYXBOb2RlcyIsImxpIiwiY21kIiwibm9kZSIsIm1pbmltaXplZCIsInJlbmRlck5vZGUiLCJyZW5kZXJOb2RlcyIsImV4cGFuZCIsIm1pbmltaXplIiwibGV2ZWwiLCJEZXRlY3RvciIsImdldFdlYkdMRXJyb3JNZXNzYWdlIiwiZm9udEZhbWlseSIsImZvbnRTaXplIiwiZm9udFdlaWdodCIsInRleHRBbGlnbiIsImJhY2tncm91bmQiLCJpbm5lckhUTUwiLCJXZWJHTFJlbmRlcmluZ0NvbnRleHQiLCJwYXJhbWV0ZXJzIiwiQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEIiwid29ya2VycyIsIldvcmtlciIsImZpbGVhcGkiLCJGaWxlIiwiRmlsZVJlYWRlciIsIkZpbGVMaXN0IiwiQmxvYiIsIkRvY01vdXNlU2ltdWxhdG9yIiwiakZyYW1lIiwiYkVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJyZXNlbmRQcm9wZXJ0aWVzIiwiZ2V0RGVmYXVsdFJlc2VuZFByb3BlcnRpZXMiLCJ1bmRlZmluZWRQcm9wZXJ0aWVzIiwiZ2V0RGVmYXVsdFVuZGVmaW5lZFByb3BlcnRpZXMiLCJvbkRvY0NoYW5nZUNsYnMiLCJ0ZXJtcyIsIkhPVkVSIiwiQUNUSVZFIiwic3R5bGVTaGVldHMiLCJzcyIsImNzc1J1bGVzIiwiY3NzVGV4dCIsInRlcm0iLCJzZWxlY3RvclRleHQiLCJjb252ZXJ0Q29vcmRzIiwiakVsZW1lbnQiLCJ0cmlnZ2VyRXZlbnQiLCJhZHZhbmNlZFByb3BzIiwicGFnZVgiLCJwYWdlWSIsInRyaWdnZXIiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImVudGVyRWxlbWVudCIsImxlYXZlRWxlbWVudCIsImFjdGl2YXRlRWxlbWVudCIsImRlYWN0aXZhdGVFbGVtZW50IiwiYWRkRG9jQ2hhbmdlQ2xiIiwiZWxlbWVudEZyb21Qb2ludCIsImNoaWxkTm9kZXMiLCJjaGlsZCIsIkVsZW1lbnQiLCJnZXRFbGVtZW50Iiwib2ZmMCIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImNhcEVsZW1lbnQiLCJsZWF2ZWQiLCJob3ZFbGVtZW50IiwicmVsYXRlZFRhcmdldCIsIkRvbTJJbWFnZSIsInV0aWwiLCJuZXdVdGlsIiwiaW5saW5lciIsIm5ld0lubGluZXIiLCJmb250RmFjZXMiLCJuZXdGb250RmFjZXMiLCJpbWFnZXMiLCJuZXdJbWFnZXMiLCJ0b1N2ZyIsInRvUG5nIiwidG9KcGVnIiwidG9CbG9iIiwidG9QaXhlbERhdGEiLCJpbXBsIiwiY2xvbmVOb2RlIiwiZmlsdGVyIiwiZW1iZWRGb250cyIsImlubGluZUltYWdlcyIsImFwcGx5T3B0aW9ucyIsIm1ha2VTdmdEYXRhVXJpIiwiYmdjb2xvciIsImJhY2tncm91bmRDb2xvciIsInByb3BlcnR5IiwiZHJhdyIsImdldEltYWdlRGF0YSIsInRvRGF0YVVSTCIsInF1YWxpdHkiLCJjYW52YXNUb0Jsb2IiLCJkb21Ob2RlIiwibWFrZUltYWdlIiwibmV3Q2FudmFzIiwiZmlsbFJlY3QiLCJyb290IiwibWFrZU5vZGVDb3B5IiwiY2xvbmVDaGlsZHJlbiIsInByb2Nlc3NDbG9uZSIsImlzQ2FudmFzIiwib3JpZ2luYWwiLCJjbG9uZUNoaWxkcmVuSW5PcmRlciIsImFzQXJyYXkiLCJjaGlsZENsb25lIiwiaXNFbGVtZW50IiwiY2xvbmVTdHlsZSIsImNsb25lUHNldWRvRWxlbWVudHMiLCJjb3B5VXNlcklucHV0IiwiZml4U3ZnIiwiY29weVN0eWxlIiwic291cmNlIiwiY29weVByb3BlcnRpZXMiLCJzZXRQcm9wZXJ0eSIsImdldFByb3BlcnR5UHJpb3JpdHkiLCJjbG9uZVBzZXVkb0VsZW1lbnQiLCJjbGFzc05hbWUiLCJ1aWQiLCJzdHlsZUVsZW1lbnQiLCJmb3JtYXRQc2V1ZG9FbGVtZW50U3R5bGUiLCJzZWxlY3RvciIsImZvcm1hdENzc1RleHQiLCJmb3JtYXRDc3NQcm9wZXJ0aWVzIiwiY3JlYXRlVGV4dE5vZGUiLCJmb3JtYXRQcm9wZXJ0eSIsImlzVGV4dEFyZWEiLCJpc0lucHV0Iiwic2V0QXR0cmlidXRlIiwiaXNTVkciLCJpc1NWR1JlY3QiLCJhdHRyaWJ1dGUiLCJnZXRBdHRyaWJ1dGUiLCJyZXNvbHZlQWxsIiwic3R5bGVOb2RlIiwiaW5saW5lQWxsIiwiWE1MU2VyaWFsaXplciIsInNlcmlhbGl6ZVRvU3RyaW5nIiwiZXNjYXBlWGh0bWwiLCJ4aHRtbCIsImVzY2FwZSIsInBhcnNlRXh0ZW5zaW9uIiwibWltZVR5cGUiLCJkYXRhQXNVcmwiLCJpc0RhdGFVcmwiLCJyZXNvbHZlVXJsIiwiZ2V0QW5kRW5jb2RlIiwiaXNJbWFnZSIsIm1pbWVzIiwiV09GRiIsIkpQRUciLCJleHRlbnNpb24iLCJiaW5hcnlTdHJpbmciLCJhdG9iIiwiYmluYXJ5QXJyYXkiLCJVaW50OEFycmF5IiwiY2hhckNvZGVBdCIsImJhc2VVcmwiLCJpbXBsZW1lbnRhdGlvbiIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImZvdXJSYW5kb21DaGFycyIsInBvdyIsInRvU3RyaW5nIiwic2xpY2UiLCJ1cmkiLCJJbWFnZSIsIm9ubG9hZCIsIm9uZXJyb3IiLCJUSU1FT1VUIiwiWE1MSHR0cFJlcXVlc3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJvbnRpbWVvdXQiLCJ0aW1lb3V0IiwicmVzcG9uc2VUeXBlIiwic2VuZCIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJlbmNvZGVyIiwib25sb2FkZW5kIiwicmVzdWx0IiwicmVhZEFzRGF0YVVSTCIsInJlc3BvbnNlIiwibWVzc2FnZSIsInN0cmluZyIsIm1zIiwiYXJnIiwiYXJyYXlMaWtlIiwiYXJyYXkiLCJsZWZ0Qm9yZGVyIiwicHgiLCJyaWdodEJvcmRlciIsInNjcm9sbFdpZHRoIiwidG9wQm9yZGVyIiwiYm90dG9tQm9yZGVyIiwic2Nyb2xsSGVpZ2h0Iiwic3R5bGVQcm9wZXJ0eSIsInBhcnNlRmxvYXQiLCJIVE1MQ2FudmFzRWxlbWVudCIsIkhUTUxUZXh0QXJlYUVsZW1lbnQiLCJIVE1MSW5wdXRFbGVtZW50IiwiU1ZHRWxlbWVudCIsIlNWR1JlY3RFbGVtZW50IiwiSFRNTEltYWdlRWxlbWVudCIsIlVSTF9SRUdFWCIsInNob3VsZFByb2Nlc3MiLCJyZWFkVXJscyIsImlubGluZSIsImRhdGFVcmwiLCJ1cmxBc1JlZ2V4Iiwibm90aGluZ1RvSW5saW5lIiwidXJscyIsInJlYWRBbGwiLCJ3ZWJGb250cyIsIndlYkZvbnQiLCJjc3NTdHJpbmdzIiwiZ2V0Q3NzUnVsZXMiLCJzZWxlY3RXZWJGb250UnVsZXMiLCJydWxlcyIsIm5ld1dlYkZvbnQiLCJydWxlIiwiQ1NTUnVsZSIsIkZPTlRfRkFDRV9SVUxFIiwibG9nIiwid2ViRm9udFJ1bGUiLCJwYXJlbnRTdHlsZVNoZWV0IiwibmV3SW1hZ2UiLCJpbmxpbmVCYWNrZ3JvdW5kIiwiaW5saW5lZCIsIkRyYWciLCJ2aXN1YWxXb3JsZCIsImNvb3JkcyIsImludGVyc2VjdGlvbiIsInJheWNhc3RlciIsInRocmVlcyIsInNlbGVjdGVkIiwiY29udHJvbHNTdGF0ZSIsImdldENvbnRyb2xzU3RhdGUiLCJvbk1vdXNlTW92ZSIsIm9uTW91c2VEb3duIiwib25Nb3VzZVVwIiwic2V0Q29vcmRzRnJvbUV2ZW50Iiwic2V0RnJvbUNhbWVyYSIsImludGVyc2VjdHMiLCJpbnRlcnNlY3RPYmplY3RzIiwicmF5Iiwib3JpZ2luIiwic2V0Q29udHJvbHNTdGF0ZSIsImdldFdvcmxkRGlyZWN0aW9uIiwiaW50ZXJzZWN0UGxhbmUiLCJFdmVudHNUb0FjdGlvbnMiLCJnZXRFdmVudEZsYWdzIiwiY3RybEtleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwiZ2V0UG9zaXRpb24iLCJ0b3VjaGVzIiwiY29udGV4dE1lbnUiLCJtb3VzZURvd24iLCJtb3VzZU1vdmUiLCJtb3VzZVVwIiwibW91c2VXaGVlbCIsIm1vdXNlTW92ZURvYyIsIm1vdXNlVXBEb2MiLCJjbGljayIsImRibGNsaWNrIiwidG91Y2hTdGFydCIsInRvdWNoTW92ZSIsInRvdWNoRW5kIiwia2V5RG93biIsImtleVByZXNzIiwia2V5VXAiLCJmaXJlQWN0aW9ucyIsImJ1dHRvbiIsInBpY2tlZCIsImNsaWNrcyIsInRvdWNoUGljayIsIm9yaWdpbmFsRXZlbnQiLCJwb3MiLCJrZXlDb2RlIiwibW9kS2V5cyIsIkN0cmwiLCJTaGlmdCIsIkFsdCIsIkludGVyYWN0aXZlSW1hZ2UiLCJpSWQiLCJoYXNGZWF0dXJlIiwiaW1hZ2VMb2FkIiwic3ZnUmVuZGVyIiwiZnJhbWVMb2FkIiwic2ltdWxhdG9yIiwiTG9hZGluZ0FuaW1hdGlvbiIsImNhbGNUaW1lVG8iLCJ1cGRhdGVJbnRlcnZhbCIsIngwIiwieTAiLCJjbGVhclJlY3QiLCJzaGFkb3dCbHVyIiwic2hhZG93Q29sb3IiLCJzaGFkb3dPZmZzZXRYIiwic2hhZG93T2Zmc2V0WSIsImZvbnQiLCJ0ZXh0QmFzZWxpbmUiLCJmaWxsVGV4dCIsImRhIiwiX2EiLCJfciIsImN4IiwiY3kiLCJueCIsIm55IiwiYXJjIiwiZ2V0SW1hZ2UiLCJzaWduIiwiTG9hZGluZ0NvbnRyb2xsZXIiLCJzaG93UHJvZ3Jlc3MiLCJsb2FkaW5nTXNnIiwiZ2V0TG9hZGluZ01zZyIsImRlZmF1bHRMb2FkaW5nTXNnIiwiTW91c2VFdmVudENvbnZlcnRlciIsIk9iamVjdDNEV2F0Y2hlciIsImJvdW5kQm94Q2xiIiwidGVzdFNjYWxlIiwiZWxlbWVudFNpemUiLCJoIiwidngiLCJ2eSIsImJveCIsImNvbXB1dGVDbGllbnRCb3VuZEJveCIsIm1vdmVQYW4iLCJtaWQiLCJ2VG9DYW1lcmEiLCJwcm9qZWN0IiwieHMiLCJ6cyIsInNldE9iamVjdCIsImNvbXB1dGVDb3JyIiwiY29yciIsImdldFNjYWxlIiwiS3giLCJLeSIsImNlbnRlclZpZXciLCJzZXRTY2FsZSIsInRmIiwiWSIsInZkIiwiT3JiaXQiLCJtaW5EaXN0YW5jZSIsIm1pblpvb20iLCJtYXhab29tIiwiZW5hYmxlRGFtcGluZyIsImRhbXBpbmdGYWN0b3IiLCJlbmFibGVab29tIiwiem9vbVNwZWVkIiwiZW5hYmxlUm90YXRlIiwicm90YXRlU3BlZWQiLCJlbmFibGVQYW4iLCJhdXRvUm90YXRlIiwiYXV0b1JvdGF0ZVNwZWVkIiwidGFyZ2V0MCIsInBvc2l0aW9uMCIsInpvb20wIiwiem9vbSIsImdldFBvbGFyQW5nbGUiLCJzcGhlcmljYWwiLCJwaGkiLCJnZXRBemltdXRoYWxBbmdsZSIsInRoZXRhIiwicmVzZXQiLCJzY29wZSIsInVwZGF0ZVByb2plY3Rpb25NYXRyaXgiLCJjaGFuZ2VFdmVudCIsIl9zcGVlZCIsImRvbGx5SW4iLCJnZXRab29tU2NhbGUiLCJkb2xseU91dCIsIm5ld1NjYWxlIiwicXVhdCIsIlF1YXRlcm5pb24iLCJzZXRGcm9tVW5pdFZlY3RvcnMiLCJ1cCIsInF1YXRJbnZlcnNlIiwibGFzdFBvc2l0aW9uIiwibGFzdFF1YXRlcm5pb24iLCJhcHBseVF1YXRlcm5pb24iLCJzZXRGcm9tVmVjdG9yMyIsInJvdGF0ZUxlZnQiLCJnZXRBdXRvUm90YXRpb25BbmdsZSIsInNwaGVyaWNhbERlbHRhIiwibWFrZVNhZmUiLCJyYWRpdXMiLCJwYW5PZmZzZXQiLCJzZXRGcm9tU3BoZXJpY2FsIiwibG9va0F0Iiwiem9vbUNoYW5nZWQiLCJFUFMiLCJkb3QiLCJTcGhlcmljYWwiLCJyb3RhdGVVcCIsInBhbkxlZnQiLCJvYmplY3RNYXRyaXgiLCJzZXRGcm9tTWF0cml4Q29sdW1uIiwibXVsdGlwbHlTY2FsYXIiLCJwYW5VcCIsImRlbHRhWCIsIlBlcnNwZWN0aXZlQ2FtZXJhIiwidGFyZ2V0RGlzdGFuY2UiLCJ0YW4iLCJjbGllbnRIZWlnaHQiLCJPcnRob2dyYXBoaWNDYW1lcmEiLCJjbGllbnRXaWR0aCIsImJvdHRvbSIsImRvbGx5U2NhbGUiLCJvZmZzZXREb2xseSIsIndoZWVsRG9sbHkiLCJQZGZJbWFnZSIsIm0wMCIsIm0wMSIsIm0wMiIsIm0xMCIsIm0xMSIsIm0xMiIsIm0yMCIsIm0yMSIsIm0yMiIsInRyaW0iLCJzZXRIaXRzIiwicmVjdFNpemUiLCJjcmVhdGVQb2x5Iiwic2V0QW5ub3RhdGlvbnMiLCJhbm5vcyIsInZTeiIsInZpZXdwb3J0IiwiZG9udEZsaXAiLCJ0YXJnZXRzIiwic3VidHlwZSIsImFQb3MiLCJhU3oiLCJhbm5vQ2xiIiwiZmluZGVyIiwicmVuZGVySGl0cyIsInRlc3RTeiIsImJhc2VPZmZzZXQiLCJoaXQiLCJmb250TmFtZSIsInRlc3RTcGFuIiwiYmFzZVdpZHRoIiwicmVsYXRpdmVPZmZzZXQiLCJyZWxhdGl2ZVdpZHRoIiwiZ2V0QW5ub3RhdGlvbnMiLCJnZXRWaWV3cG9ydCIsImNhbnZhc0NvbnRleHQiLCJTZWFyY2giLCJwcmV2UmVzdWx0cyIsIm5hdmlnYXRlIiwiZG9RdWVyeSIsInF1ZXJ5U3RhbXAiLCJodG1scyIsIlN0YXRpY0ltYWdlIiwiY3Jvc3NPcmlnaW4iLCJpbWFnZUVycm9yIiwiVGV4dHVyZUFuaW1hdG9yIiwiaW1nIiwidGlsZXNIb3JpeiIsInRpbGVzVmVydCIsIm51bVRpbGVzIiwidGlsZURpc3BEdXJhdGlvbiIsInRpbGVzSG9yaXpvbnRhbCIsInRpbGVzVmVydGljYWwiLCJudW1iZXJPZlRpbGVzIiwidGlsZURpc3BsYXlEdXJhdGlvbiIsImN1cnJlbnREaXNwbGF5VGltZSIsImN1cnJlbnRUaWxlIiwibWlsbGlTZWMiLCJjdXJyZW50Q29sdW1uIiwiY3VycmVudFJvdyIsIlRocmVlTW91c2VFdmVudENvbnZlcnRlciIsIm9iamVjdHNUZXN0Iiwib2JqZWN0c0FuZEZhY2VzVGVzdCIsIlRodW1ibmFpbHMiLCJ0aHVtYm5haWxzQ2xiIiwiaGVhZGluZyIsInRodW1ibmFpbCIsImRhdGFUaHVtYm5haWwiLCJzZXRJbWFnZSIsImdldEFjdGl2ZSIsInNjcm9sbFRvcCIsImJ1aWx0IiwiVXRpbHMiLCJkZWZhdWx0Q21wIiwiY21wIiwiVmlldyIsImNsYXNzUHJvcGVydHkiLCJhdHRyaWJ1dGVQcm9wZXJ0eSIsImF0dHJpYnV0ZU5hbWUiLCJyZW1vdmVBdHRyIiwiaGFuZGxlTGlua0V2ZW50IiwiaGFuZGxlSW5wdXRFdmVudCIsImhhbmRsZUZvcm1FdmVudCIsImdldFRpbWUiLCJwZW5kaW5nIiwibG9hZEZpbGVzIiwiZmlsZXMiLCJ0YXNrcyIsInVybFJlc29sdmVyIiwibGFzdEluZGV4T2YiLCJwYXJ0cyIsInBhcnQiLCJvYmpUb0F0dHJzU3RyIiwic3RvcCIsInRleHRDc3MiLCJyMSIsInRlbXBsYXRlT2JqZWN0IiwibGlua0NvbnRyb2xzIiwid2lkZ2V0Q29udHJvbHMiLCJpbnB1dENvbnRyb2xzIiwiZm9ybUNvbnRyb2xzIiwidGV4dENvbnRyb2xzIiwic3RhdGVTZXR0ZXJzIiwic2V0dGVyIiwic2V0TGlua0NvbnRyb2xTdGF0ZSIsInNldFdpZGdldENvbnRyb2xTdGF0ZSIsInNldElucHV0Q29udHJvbFN0YXRlIiwic2V0VGV4dENvbnRyb2xTdGF0ZSIsInNldENvbnRyb2xTdGF0ZSIsInN0YXRlSGFuZGxlcnMiLCJzdCIsImxpbmtTdGF0ZUhhbmRsZXJzIiwid2lkZ2V0U3RhdGVIYW5kbGVycyIsImlucHV0U3RhdGVIYW5kbGVycyIsInRleHRTdGF0ZUhhbmRsZXJzIiwidGV4dCIsIlZpc3VhbFdvcmxkIiwidXNlSGVscGVycyIsInJlbmRlckNhbGxiYWNrcyIsImNsb2NrIiwiQ2xvY2siLCJSYXljYXN0ZXIiLCJTY2VuZSIsImNzc1NjZW5lIiwicmVuZGVyZXIiLCJXZWJHTFJlbmRlcmVyIiwiYWxwaGEiLCJzZXRQaXhlbFJhdGlvIiwiY3NzUmVuZGVyZXIiLCJjb250cm9scyIsInRtcFZlY3RvciIsIlRleHR1cmVMb2FkZXIiLCJBbWJpZW50TGlnaHQiLCJsaWdodCIsIkRpcmVjdGlvbmFsTGlnaHQiLCJBeGlzSGVscGVyIiwib25XaW5kb3dSZXNpemUiLCJhbmltYXRlIiwiZmlsdGVyRGF0YSIsInR5cGVzIiwiY29udGFpbnMiLCJpbnRlbnNpdHkiLCJ1cGRhdGVDYW1lcmEiLCJhc3BlY3QiLCJ1cGRhdGVSZW5kZXJlciIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImRlbHRhVGltZSIsImdldERlbHRhIiwicHJvY2Vzc0dlb21ldHJ5IiwiYnVmR2VvbWV0cnkiLCJmcm9tQnVmZmVyR2VvbWV0cnkiLCJtZXJnZVZlcnRpY2VzIiwiaW5kZXhlZEJ1ZmZlckdlb20iLCJjcmVhdGVJbmRleGVkQnVmZmVyR2VvbWV0cnlGcm9tR2VvbWV0cnkiLCJtYXBJbmRpY2VzIiwibnVtVmVydGljZXMiLCJudW1GYWNlcyIsImJ1ZmZlckdlb20iLCJCdWZmZXJHZW9tZXRyeSIsIkZsb2F0MzJBcnJheSIsImluZGljZXMiLCJVaW50MzJBcnJheSIsIlVpbnQxNkFycmF5IiwiaTMiLCJzZXRJbmRleCIsIkJ1ZmZlckF0dHJpYnV0ZSIsImFkZEF0dHJpYnV0ZSIsImlzRXF1YWwiLCJ4MSIsInoxIiwieDIiLCJ6MiIsImF0dHJpYnV0ZXMiLCJpZHhWZXJ0aWNlcyIsIm51bUlkeFZlcnRpY2VzIiwibWFwcGVkVmVydGljZXMiLCJtYXBwZWRJbmRpY2VzIiwibWFwcGVkQXNzb2NpYXRpb24iLCJhc3NvY2lhdGlvbiIsImozIiwib25lTm9kZVBvc2l0aW9uQ2FsbGJhY2siLCJtdWx0eU5vZGVQb3NpdGlvbkNhbGxiYWNrIiwidm9sdW1lUG9zaXRpb25zIiwidm9sdW1lTm9ybWFscyIsImFzc29jVmVydGV4IiwiaW5kZXhWZXJ0ZXgiLCJtdWx0eU5vZGVQb3NpdGlvblBvc3RDYWxsYmFjayIsInBhdGhQb3NpdGlvbkNhbGxiYWNrIiwicG9zaXRpb25zIiwicGF0aFBvc2l0aW9uUG9zdENhbGxiYWNrIiwiV2lkZ2V0Q29udHJvbGxlciIsIkNpcmNsZVRhcmdldCIsIlBvbHlUYXJnZXQiXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxtREFBMkMsY0FBYzs7QUFFekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBMkIsMEJBQTBCLEVBQUU7QUFDdkQseUNBQWlDLGVBQWU7QUFDaEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOERBQXNELCtEQUErRDs7QUFFckg7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7Ozs7OztBQ2hFQSxJQUFNQSxLQUFLLFFBQW9CQyxPQUFPQyxNQUEzQixHQUFtQ0MsUUFBUSxRQUFSLENBQTlDO0FBQUEsSUFDTUMsZUFBZSxRQUF5QkgsT0FBT0ksV0FBaEMsR0FBNkNGLFFBQVEsYUFBUixDQURsRTtBQUFBLElBRU1HLFNBQVMsUUFBbUJMLE9BQU9NLEtBQTFCLEdBQWlDSixRQUFRLE9BQVIsQ0FGaEQ7QUFBQSxJQUdNSyxTQUFTLFFBQW1CUCxPQUFPUSxLQUExQixHQUFpQ04sUUFBUSxPQUFSLENBSGhEOztRQU1RTyxDLEdBQU5WLEU7UUFDZ0JLLFcsR0FBaEJELFk7UUFDVUcsSyxHQUFWRCxNO1FBQ1VHLEssR0FBVkQsTTs7Ozs7Ozs7OztBQ1RGLElBQU1SLEtBQUssUUFBb0JDLE9BQU9DLE1BQTNCLEdBQW1DQyxRQUFRLFFBQVIsQ0FBOUM7QUFBQSxJQUNNQyxlQUFlLFFBQXlCSCxPQUFPSSxXQUFoQyxHQUE2Q0YsUUFBUSxhQUFSLENBRGxFO0FBQUEsSUFFTUcsU0FBUyxR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MENBQTBDLCtCQUErQjtBQUN6RSwwQ0FBMEMsOEJBQThCO0FBQ3hFLDBDQUEwQywrQkFBK0I7QUFDekUsMENBQTBDLG9DQUFvQzs7QUFFOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLHNCQUFzQjtBQUN2RDs7QUFFQTtBQUNBLDZDQUE2QyxRQUFROztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLHNDQUFzQztBQUMzRTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxDQUFDIiwiZmlsZSI6ImpzL2Rpc3QvM2RmbGlwYm9vay5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBpZGVudGl0eSBmdW5jdGlvbiBmb3IgY2FsbGluZyBoYXJtb255IGltcG9ydHMgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0XG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDY5KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCAyNThjODRhN2NiNGI5ZTlhNzY0MyIsImNvbnN0IF8kID0gR0xPQkFMX0xJQlMualF1ZXJ5PyB3aW5kb3cualF1ZXJ5OiByZXF1aXJlKCdqcXVlcnknKSxcclxuICAgICAgX2h0bWwyY2FudmFzID0gR0xPQkFMX0xJQlMuaHRtbDJjYW52YXM/IHdpbmRvdy5odG1sMmNhbnZhczogcmVxdWlyZSgnaHRtbDJjYW52YXMnKSxcclxuICAgICAgX1RIUkVFID0gR0xPQkFMX0xJQlMuVEhSRUU/IHdpbmRvdy5USFJFRTogcmVxdWlyZSgndGhyZWUnKSxcclxuICAgICAgX1BERkpTID0gR0xPQkFMX0xJQlMuUERGSlM/IHdpbmRvdy5QREZKUzogcmVxdWlyZSgncGRmanMnKTtcclxuXHJcbmV4cG9ydCB7XHJcbiAgXyQgYXMgJCxcclxuICBfaHRtbDJjYW52YXMgYXMgaHRtbDJjYW52YXMsXHJcbiAgX1RIUkVFIGFzIFRIUkVFLFxyXG4gIF9QREZKUyBhcyBQREZKU1xyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vbGlicy5qcyIsImNvbnN0IF8kID0gR0xPQkFMX0xJQlMualF1ZXJ5PyB3aW5kb3cualF1ZXJ5OiByZXF1aXJlKCdqcXVlcnknKSxcclxuICAgICAgX2h0bWwyY2FudmFzID0gR0xPQkFMX0xJQlMuaHRtbDJjYW52YXM/IHdpbmRvdy5odG1sMmNhbnZhczogcmVxdWlyZSgnaHRtbDJjYW52YXMnKSxcclxuICAgICAgX1RIUkVFID0gR0xPQkFMX0xJQlMuVEhSRUU/IHdpbmRvdy5USFJFRTogcmVxdWlyZSgndGhyZWUnKSxcclxuICAgICAgX1BERkpTID0gR0xPQkFMX0xJQlMuUERGSlM/IHdpbmRvdy5QREZKUzogcmVxdWlyZSgncGRmanMnKTtcclxuXHJcbmV4cG9ydCB7XHJcbiAgXyQgYXMgJCxcclxuICBfaHRtbDJjYW52YXMgYXMgaHRtbDJjYW52YXMsXHJcbiAgX1RIUkVFIGFzIFRIUkVFLFxyXG4gIF9QREZKUyBhcyBQREZKU1xyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9saWJzLmpzIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFzZU1hdGhVdGlscyB7XHJcbiAgc3RhdGljIHN1bSA9IFtCYXNlTWF0aFV0aWxzLnN1bTEsIEJhc2VNYXRoVXRpbHMuc3VtMiwgQmFzZU1hdGhVdGlscy5zdW0zLCBCYXNlTWF0aFV0aWxzLnN1bTRdO1xyXG4gIHN0YXRpYyBlcHMgPSAxZS00O1xyXG5cclxuICBzdGF0aWMgc3VtMShrYSxhLGtiLGIpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIGthKmFbMF0ra2IqYlswXVxyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzdW0yKGthLGEsa2IsYikge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAga2EqYVswXStrYipiWzBdLFxyXG4gICAgICBrYSphWzFdK2tiKmJbMV1cclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc3VtMyhrYSxhLGtiLGIpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIGthKmFbMF0ra2IqYlswXSxcclxuICAgICAga2EqYVsxXStrYipiWzFdLFxyXG4gICAgICBrYSphWzJdK2tiKmJbMl1cclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc3VtNChrYSxhLGtiLGIpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIGthKmFbMF0ra2IqYlswXSxcclxuICAgICAga2EqYVsxXStrYipiWzFdLFxyXG4gICAgICBrYSphWzJdK2tiKmJbMl0sXHJcbiAgICAgIGthKmFbM10ra2IqYlszXVxyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyByazQoZHksIHQsIGR0LCB5LCBzdW09QmFzZU1hdGhVdGlscy5zdW1beS5sZW5ndGgtMV0pIHtcclxuICAgIGNvbnN0IGsxPWR5KHQseSksXHJcbiAgICAgICAgICBrMj1keSh0K2R0LzIsc3VtKDEseSxkdC8yLGsxKSksXHJcbiAgICAgICAgICBrMz1keSh0K2R0LzIsc3VtKDEseSxkdC8yLGsyKSksXHJcbiAgICAgICAgICBrND1keSh0K2R0LHN1bSgxLHksZHQsazMpKTtcclxuICAgIHJldHVybiBzdW0oMSx5LGR0LzYsc3VtKDEsc3VtKDEsazEsMixrMiksMSxzdW0oMixrMywxLGs0KSkpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGV4dHJhcG9sYXRlTGluZWFyKHgseSx4aSkge1xyXG4gICAgcmV0dXJuIHlbMF0rKHlbMV0teVswXSkvKHhbMV0teFswXSkqKHhpLXhbMF0pO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGludGVycG9sYXRlTGluZWFyKHgseSx4aSkge1xyXG4gICAgbGV0IHlpO1xyXG4gICAgaWYoeFswXT54WzFdKSB7XHJcbiAgICAgIHg9eC5yZXZlcnNlKCk7XHJcbiAgICAgIHk9eS5yZXZlcnNlKCk7XHJcbiAgICB9XHJcbiAgICBpZih4aTx4WzBdKSB7XHJcbiAgICAgIHlpPXlbMF07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKHhpPnhbMV0pIHtcclxuICAgICAgeWk9eVsxXTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB5aT1CYXNlTWF0aFV0aWxzLmV4dHJhcG9sYXRlTGluZWFyKHgseSx4aSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4geWk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY2FsY1NjYWxlKHNyY1csIHNyY0gsIGRzdFcsIGRzdEgpIHtcclxuICAgIHJldHVybiBNYXRoLm1pbihkc3RXL3NyY1csIGRzdEgvc3JjSCk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbXVsTShhLCBiKSB7XHJcbiAgICBjb25zdCByPVtdO1xyXG4gICAgZm9yKGxldCBpPTA7aTxhLmxlbmd0aDsrK2kpIHtcclxuICAgICAgci5wdXNoKFtdKTtcclxuICAgICAgZm9yKGxldCBqPTA7ajxiWzBdLmxlbmd0aDsrK2opIHtcclxuICAgICAgICByW2ldW2pdID0gMDtcclxuICAgICAgICBmb3IobGV0IGs9MDtrPGIubGVuZ3RoOysraykge1xyXG4gICAgICAgICAgcltpXVtqXSs9YVtpXVtrXSpiW2tdW2pdO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHI7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgdHJhbnNNKG0pIHtcclxuICAgIGNvbnN0IHI9W107XHJcbiAgICBmb3IobGV0IGk9MDtpPG0ubGVuZ3RoOysraSkge1xyXG4gICAgICBmb3IobGV0IGo9MDtqPG1bMF0ubGVuZ3RoOysraikge1xyXG4gICAgICAgIGlmKCFyW2pdKSB7XHJcbiAgICAgICAgICByW2pdPVtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByW2pdW2ldPW1baV1bal07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG1hdChkYXRhKSB7XHJcbiAgICBsZXQgcz0wO1xyXG4gICAgZm9yKGxldCB4IG9mIGRhdGEpIHtcclxuICAgICAgcys9eDtcclxuICAgIH1cclxuICAgIHJldHVybiBzL2RhdGEubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGRpc3AoZGF0YSkge1xyXG4gICAgY29uc3QgTT1CYXNlTWF0aFV0aWxzLm1hdChkYXRhKTtcclxuICAgIGxldCBzPTA7XHJcbiAgICBmb3IobGV0IHggb2YgZGF0YSkge1xyXG4gICAgICBzKz0oeC1NKSooeC1NKTtcclxuICAgIH1cclxuICAgIHJldHVybiBzL2RhdGEubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHByZWRpY3QoZGF0YSwgbnVtKSB7XHJcbiAgICBjb25zdCByPVtdLCBsPWRhdGEubGVuZ3RoLCBEPUJhc2VNYXRoVXRpbHMuZGlzcChkYXRhKTtcclxuICAgIGlmKEQ8bCAmJiBsPjEpIHtcclxuICAgICAgY29uc3QgYW09W10sIGJtPVtdO1xyXG4gICAgICBmb3IobGV0IGk9MDtpPGw7KytpKSB7XHJcbiAgICAgICAgYW0ucHVzaChbaSwxXSk7XHJcbiAgICAgICAgYm0ucHVzaChbZGF0YVtpXV0pO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IHRhPUJhc2VNYXRoVXRpbHMudHJhbnNNKGFtKSwgYT1CYXNlTWF0aFV0aWxzLm11bE0odGEsYW0pLCBiPUJhc2VNYXRoVXRpbHMubXVsTSh0YSxibSksXHJcbiAgICAgIGQ9KGFbMF1bMF0qYVsxXVsxXS1hWzFdWzBdKmFbMF1bMV0pLFxyXG4gICAgICBwPVtcclxuICAgICAgICAtKGFbMF1bMV0qYlsxXVswXS1iWzBdWzBdKmFbMV1bMV0pL2QsXHJcbiAgICAgICAgKGFbMF1bMF0qYlsxXVswXS1hWzFdWzBdKmJbMF1bMF0pL2RcclxuICAgICAgXTtcclxuICAgICAgZm9yKGxldCBpPTA7aTxudW07KytpKSB7XHJcbiAgICAgICAgY29uc3QgdiA9IE1hdGgucm91bmQocFswXSooaStsKStwWzFdKTtcclxuICAgICAgICBpZihyLmluZGV4T2Yodik9PT0tMSkge1xyXG4gICAgICAgICAgci5wdXNoKHYpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHI7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0VW5pcXVlKCkge1xyXG4gICAgcmV0dXJuIE1hdGguY2VpbCgxZTkqTWF0aC5yYW5kb20oKSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc2V0U3BsaW5lUG9pbnRzKHNwbGluZSwgcHMpIHtcclxuICAgIGlmKHNwbGluZS5wb2ludHMubGVuZ3RoIT09cHMueC5sZW5ndGgpIHtcclxuICAgICAgY29uc29sZS53YXJuKCdzZXRTcGxpbmVQb2ludHM6IGJhZCBwb2ludHMnKTtcclxuICAgIH1cclxuICAgIGZvcihsZXQgaT0wOyBpPHNwbGluZS5wb2ludHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgc3BsaW5lLnBvaW50c1tpXS5zZXQocHMueFtpXSwgcHMueVtpXSwgcHMuej8gcHMueltpXTogMCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbWFwbDJMKGxzLCBsZW4sIG4sIGYpIHtcclxuICAgIGNvbnN0IGRMID0gbGVuLyhuLTEpO1xyXG4gICAgbGV0IEw9MDtcclxuICAgIGZvcihsZXQgaT0wLCBkPWxzWzBdOyBpPGxzLmxlbmd0aC0xICYmIEw8bGVuKzAuMSpkTDsgKytpLCBkKz1sc1tpXSkge1xyXG4gICAgICBpZihNYXRoLmFicyhMLWQpPE1hdGguYWJzKEwtZC1sc1tpKzFdKSkge1xyXG4gICAgICAgIGYoaSwgTCk7XHJcbiAgICAgICAgTCs9ZEw7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmKEw8bGVuKzAuMSpkTCkge1xyXG4gICAgICBjb25zb2xlLndhcm4oJ21hcGwyTDogbHMgaXMgbm90IGVub3VnaHQnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBkZXQyKGEsYixjLGQpIHtcclxuICAgIHJldHVybiBhKmQtYipjO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHNvbHZlMkxpbihhMSxiMSxhMixiMikge1xyXG4gICAgbGV0IHJlcztcclxuICAgIGNvbnN0IGQ9QmFzZU1hdGhVdGlscy5kZXQyKGExWzBdLGExWzFdLGEyWzBdLGEyWzFdKTtcclxuICAgIGlmKE1hdGguYWJzKGQpPkJhc2VNYXRoVXRpbHMuZXBzKSB7XHJcbiAgICAgIGNvbnN0IGR4PUJhc2VNYXRoVXRpbHMuZGV0MihiMSxhMVsxXSxiMixhMlsxXSksIGR5PUJhc2VNYXRoVXRpbHMuZGV0MihhMVswXSxiMSxhMlswXSxiMik7XHJcbiAgICAgIHJlcyA9IHtcclxuICAgICAgICB4OiBkeC9kLFxyXG4gICAgICAgIHk6IGR5L2RcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaXNJbnNpZGVQb2x5KHBzLCBwKSB7XHJcbiAgICBsZXQgZG9uZSA9IGZhbHNlLCBjdDtcclxuICAgIGZvcihsZXQgaT0wOyBpPHBzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIGlmKEJhc2VNYXRoVXRpbHMudjJkaXN0KHAsIHBzW2ldKTxCYXNlTWF0aFV0aWxzLmVwcykge1xyXG4gICAgICAgIGN0PTE7XHJcbiAgICAgICAgZG9uZSA9IHRydWU7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHdoaWxlKCFkb25lKSB7XHJcbiAgICAgIGRvbmUgPSB0cnVlO1xyXG4gICAgICBjdCA9IDA7XHJcbiAgICAgIGxldCBucCA9IHt4OiBwLngrTWF0aC5yYW5kb20oKS0wLjUsIHk6IHAueStNYXRoLnJhbmRvbSgpLTAuNX0sIHJuID0ge3g6IG5wLngtcC54LCB5OiBucC55LXAueX0sIGExPVtybi55LCAtcm4ueF0sIGIxPXAueCpybi55LXAueSpybi54O1xyXG4gICAgICBmb3IobGV0IGk9MDsgaTxwcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIGNvbnN0IHAwPXBzW2ldLCBwMT1wc1soaSsxKSVwcy5sZW5ndGhdLCBuID0ge3g6IHAxLngtcDAueCwgeTogcDEueS1wMC55fSwgYTI9W24ueSwgLW4ueF0sIGIyPXAwLngqbi55LXAwLnkqbi54LFxyXG4gICAgICAgICAgaXAgPSBCYXNlTWF0aFV0aWxzLnNvbHZlMkxpbihhMSxiMSxhMixiMik7XHJcbiAgICAgICAgaWYoaXApIHtcclxuICAgICAgICAgIGlmKEJhc2VNYXRoVXRpbHMudjJkaXN0KGlwLCBwMCk8QmFzZU1hdGhVdGlscy5lcHMgfHwgQmFzZU1hdGhVdGlscy52MmRpc3QoaXAsIHAxKTxCYXNlTWF0aFV0aWxzLmVwcykge1xyXG4gICAgICAgICAgICBkb25lID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSBpZihpcC54Pk1hdGgubWluKHAwLngscDEueCktQmFzZU1hdGhVdGlscy5lcHMmJmlwLng8TWF0aC5tYXgocDAueCxwMS54KStCYXNlTWF0aFV0aWxzLmVwcyAmJlxyXG4gICAgICAgICAgICAgICAgICBpcC55Pk1hdGgubWluKHAwLnkscDEueSktQmFzZU1hdGhVdGlscy5lcHMmJmlwLnk8TWF0aC5tYXgocDAueSxwMS55KStCYXNlTWF0aFV0aWxzLmVwcykge1xyXG4gICAgICAgICAgICBpZihCYXNlTWF0aFV0aWxzLnYyZGlzdChpcCwgcCk8QmFzZU1hdGhVdGlscy5lcHMpIHtcclxuICAgICAgICAgICAgICBjdD0xO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgIGNvbnN0IHRuPXt4OiBpcC54LXAueCwgeTogaXAueS1wLnl9O1xyXG4gICAgICAgICAgICAgIGN0ICs9IHRuLngqcm4ueCt0bi55KnJuLnk+MDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGN0JTI7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaXNJbnNpZGVDb252UG9seShwcywgcCkge1xyXG4gICAgbGV0IHNnID0gWzAsIDBdO1xyXG4gICAgZm9yKGxldCBpPTA7IGk8cHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgY29uc3QgcDA9cHNbaV0sIHAxPXBzWyhpKzEpJXBzLmxlbmd0aF0sIGE9e3g6IHAwLngtcC54LCB5OiBwMC55LXAueX0sIGI9e3g6IHAxLngtcC54LCB5OiBwMS55LXAueX07XHJcbiAgICAgICsrc2dbKGEueCpiLnktYS55KmIueDwwKSswXTtcclxuICAgIH1cclxuICAgIHJldHVybiB+c2cuaW5kZXhPZihwcy5sZW5ndGgpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHYybGVuKHYyKSB7XHJcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHYyLngqdjIueCt2Mi55KnYyLnkpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHYyZGlzdCh2MjEsIHYyMikge1xyXG4gICAgcmV0dXJuIEJhc2VNYXRoVXRpbHMudjJsZW4oe1xyXG4gICAgICB4OiB2MjIueC12MjEueCxcclxuICAgICAgeTogdjIyLnktdjIxLnlcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNvbXB1dGVTcXVhcmUocHMpIHtcclxuICAgIGNvbnN0IGEgPSBbXTtcclxuICAgIGxldCBwID0gMDtcclxuICAgIGZvcihsZXQgaT0wOyBpPHBzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIGEucHVzaChCYXNlTWF0aFV0aWxzLnYyZGlzdChwc1tpXSwgcHNbKGkrMSklcHMubGVuZ3RoXSkpO1xyXG4gICAgICBwICs9IDAuNSphW2ldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIE1hdGguc3FydChwKihwLWFbMF0pKihwLWFbMV0pKihwLWFbMl0pKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjb21wdXRlSW50ZXJwQ29lZnModHJpLCBwKSB7XHJcbiAgICBjb25zdCBzID0gQmFzZU1hdGhVdGlscy5jb21wdXRlU3F1YXJlKHRyaSksIGNvZWZzPVtdLCBsID0gdHJpLmxlbmd0aDtcclxuICAgIGZvcihsZXQgaT0wOyBpPGw7ICsraSkge1xyXG4gICAgICBjb2Vmc1tpXSA9IEJhc2VNYXRoVXRpbHMuY29tcHV0ZVNxdWFyZShbcCwgdHJpWyhpKzEpJWxdLCB0cmlbKGkrMiklbF1dKS9zO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvZWZzO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvQmFzZU1hdGhVdGlscy5qcyIsImltcG9ydCB7VEhSRUV9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgQmFzZU1hdGhVdGlscyBmcm9tICcuL0Jhc2VNYXRoVXRpbHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWF0aFV0aWxzIGV4dGVuZHMgQmFzZU1hdGhVdGlscyB7XHJcbiAgc3RhdGljIHYxID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuXHJcbiAgc3RhdGljIHNwbGl0U3BsaW5lKHNwbGluZSwgTikge1xyXG4gICAgY29uc3QgbyA9IHtsZW46IDAsIGxzOiBbMF19LCBkbD0xL047XHJcbiAgICBmb3IobGV0IGk9MDsgaTw9TjsgKytpKSB7XHJcbiAgICAgIGNvbnN0IHAgPSBzcGxpbmUuZ2V0UG9pbnQoaSpkbCk7XHJcbiAgICAgIGlmKGkpIHtcclxuICAgICAgICBjb25zdCBkID0gTWF0aFV0aWxzLnYxLmRpc3RhbmNlVG8ocCk7XHJcbiAgICAgICAgby5sZW4gKz0gZDtcclxuICAgICAgICBvLmxzLnB1c2goZCk7XHJcbiAgICAgIH1cclxuICAgICAgTWF0aFV0aWxzLnYxLmNvcHkocCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbztcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXRMaW5lYXJJbmRlY2VzKHNwbGluZSwgbikge1xyXG4gICAgY29uc3QgZGVsID0gNTAwMCwgZERlbCA9IDEvZGVsO1xyXG4gICAgY29uc3QgbHM9WzBdO1xyXG4gICAgbGV0IGwgPSAwO1xyXG4gICAgZm9yKGxldCBpPTA7IGk8PWRlbDsgKytpKSB7XHJcbiAgICAgIGNvbnN0IHAgPSBzcGxpbmUuZ2V0UG9pbnQoaSpkRGVsKTtcclxuICAgICAgaWYoaSkge1xyXG4gICAgICAgIGNvbnN0IGQ9TWF0aFV0aWxzLnYxLmRpc3RhbmNlVG8ocCk7XHJcbiAgICAgICAgbCArPSBkO1xyXG4gICAgICAgIGxzLnB1c2goZCk7XHJcbiAgICAgIH1cclxuICAgICAgTWF0aFV0aWxzLnYxLmNvcHkocCk7XHJcbiAgICB9XHJcbiAgICBscy5wdXNoKDFlNyk7XHJcblxyXG4gICAgY29uc3QgcmVzID0gW10sIGRsID0gbC8obi0xKTtcclxuICAgIGZvcihsZXQgaT0wLCBMPTAsIGQ9bHNbMF07IGk8bHMubGVuZ3RoLTE7ICsraSwgZCs9bHNbaV0pIHtcclxuICAgICAgaWYoTWF0aC5hYnMoTC1kKTxNYXRoLmFicyhMLWQtbHNbaSsxXSkpIHtcclxuICAgICAgICByZXMucHVzaChpKmREZWwpO1xyXG4gICAgICAgIEwrPWRsO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIHN0YXRpYyByZWZpbmVQb2x5KHBvbHksIG1heERsKSB7XHJcbiAgICBjb25zdCByZXMgPSBbXTtcclxuICAgIGZvcihsZXQgaT0wOyBpPHBvbHkubGVuZ3RoOyArK2kpIHtcclxuICAgICAgY29uc3QgcDAgPSBwb2x5W2ldLCBwMSA9IHBvbHlbKGkrMSklcG9seS5sZW5ndGhdLCBsID0gQmFzZU1hdGhVdGlscy52MmRpc3QocDAsIHAxKSwgbiA9IE1hdGguY2VpbChsL21heERsKSwgZGwgPSBsL247XHJcbiAgICAgIHJlcy5wdXNoKHAwKTtcclxuICAgICAgZm9yKGxldCBqPTE7IGo8bjsgKytqKSB7XHJcbiAgICAgICAgcmVzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjIoXHJcbiAgICAgICAgICBwMC54K2oqZGwqKHAxLngtcDAueCkvbCxcclxuICAgICAgICAgIHAwLnkraipkbCoocDEueS1wMC55KS9sXHJcbiAgICAgICAgKSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9NYXRoVXRpbHMuanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgR3JhcGhVdGlscyBmcm9tICcuL0dyYXBoVXRpbHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW1hZ2VCYXNlIHtcclxuXHJcbiAgc3RhdGljIHJlbmRlckNhbnZhcyA9ICAkKCc8Y2FudmFzPicpWzBdO1xyXG4gIHN0YXRpYyByZW5kZXJDYW52YXNDdHggPSBJbWFnZUJhc2UucmVuZGVyQ2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsIGNvbG9yKSB7XHJcbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgdGhpcy53bmQgPSBjb250ZXh0LnduZDtcclxuICAgIHRoaXMuZG9jID0gY29udGV4dC5kb2M7XHJcbiAgICB0aGlzLmVsZW1lbnQgPSBjb250ZXh0LmVsZW1lbnQgfHwgY29udGV4dC5kb2MuYm9keTtcclxuICAgIHRoaXMuYyA9IGNvbnRleHQucmVuZGVyQ2FudmFzIHx8IEltYWdlQmFzZS5yZW5kZXJDYW52YXM7XHJcbiAgICB0aGlzLmN0eCA9IGNvbnRleHQucmVuZGVyQ2FudmFzQ3R4IHx8IEltYWdlQmFzZS5yZW5kZXJDYW52YXNDdHg7XHJcbiAgICB0aGlzLnJlc1cgPSB0aGlzLndpZHRoID0gd2lkdGg7XHJcbiAgICB0aGlzLnJlc0ggPSB0aGlzLmhlaWdodCA9IGhlaWdodDtcclxuICAgIHRoaXMuY29sb3IgPSBjb2xvcjtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcblxyXG4gIH1cclxuXHJcbiAgcmVuZGVyQmxhbmtQYWdlKCkge1xyXG4gICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XHJcbiAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBHcmFwaFV0aWxzLmNvbG9yMlJnYmEodGhpcy5jb2xvciwgMSk7XHJcbiAgICB0aGlzLmN0eC5yZWN0KDAsIDAsIHRoaXMuYy53aWR0aCwgdGhpcy5jLmhlaWdodCk7XHJcbiAgICB0aGlzLmN0eC5maWxsKCk7XHJcbiAgfVxyXG5cclxuICByZW5kZXJJbWFnZShpbWFnZSkge1xyXG4gICAgdGhpcy5wdXNoQ3R4KCk7XHJcbiAgICB0aGlzLmN0eC5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDApO1xyXG4gICAgdGhpcy5wb3BDdHgoKTtcclxuICB9XHJcblxyXG4gIG5vcm1Ub0NvbnYocCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgeDogcC54KnRoaXMuYy53aWR0aCxcclxuICAgICAgeTogKDEtcC55KSp0aGlzLmMuaGVpZ2h0XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcmVuZGVySGl0KHBvbHkpIHtcclxuICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xyXG4gICAgY3R4LmZpbGxTdHlsZSA9ICdyZ2JhKDI1NSwyNTUsMCwwLjQpJztcclxuICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgIGxldCBwID0gdGhpcy5ub3JtVG9Db252KHBvbHlbMF0pO1xyXG4gICAgY3R4Lm1vdmVUbyhwLngsIHAueSk7XHJcbiAgICBmb3IobGV0IGk9MTsgaTxwb2x5Lmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIHAgPSB0aGlzLm5vcm1Ub0NvbnYocG9seVtpXSk7XHJcbiAgICAgIGN0eC5saW5lVG8ocC54LCBwLnkpO1xyXG4gICAgfVxyXG4gICAgY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgY3R4LmZpbGwoKTtcclxuICB9XHJcblxyXG4gIHB1c2hDdHgoKSB7XHJcbiAgICBpZih0aGlzLnJlc1chPXRoaXMuYy53aWR0aCkge1xyXG4gICAgICB0aGlzLmMud2lkdGggPSB0aGlzLnJlc1c7XHJcbiAgICB9XHJcbiAgICBpZih0aGlzLnJlc0ghPXRoaXMuYy5oZWlnaHQpIHtcclxuICAgICAgdGhpcy5jLmhlaWdodCA9IHRoaXMucmVzSDtcclxuICAgIH1cclxuICAgIHRoaXMuY3R4LnNhdmUoKTtcclxuICAgIHRoaXMuY3R4LnNjYWxlKHRoaXMuYy53aWR0aC90aGlzLndpZHRoLCB0aGlzLmMuaGVpZ2h0L3RoaXMuaGVpZ2h0KTtcclxuICAgIHJldHVybiB0aGlzLmN0eDtcclxuICB9XHJcblxyXG4gIHBvcEN0eCgpIHtcclxuICAgIHRoaXMuY3R4LnJlc3RvcmUoKTtcclxuICB9XHJcblxyXG4gIHJlbmRlck5vdEZvdW5kUGFnZSgpIHtcclxuICAgIHRoaXMucmVuZGVyQmxhbmtQYWdlKCk7XHJcbiAgfVxyXG5cclxuICBmaW5pc2hSZW5kZXIoKSB7XHJcbiAgICBpZih0aGlzLm9uQ2hhbmdlKSB7XHJcbiAgICAgIHRoaXMub25DaGFuZ2UodGhpcy5jKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZpbmlzaExvYWQoKSB7XHJcbiAgICBpZih0aGlzLm9uTG9hZCkge1xyXG4gICAgICB0aGlzLm9uTG9hZCgpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMuc3RhcnRSZW5kZXIoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFNpbXVsYXRlZERvYygpIHtcclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9JbWFnZUJhc2UuanMiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBHcmFwaFV0aWxzIHtcclxuXHJcbiAgc3RhdGljIGV4dHJhcG9sYXRlTGluZWFyKHgseSx4aSkge1xyXG4gICAgcmV0dXJuIHlbMF0rKHlbMV0teVswXSkvKHhbMV0teFswXSkqKHhpLXhbMF0pO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGludGVycG9sYXRlMDEoeTEseTIsdCkge1xyXG4gICAgcmV0dXJuIEdyYXBoVXRpbHMuZXh0cmFwb2xhdGVMaW5lYXIoWzAsMV0sW3kxLHkyXSx0KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXRDb2xvckJ5dGVzKGNvbG9yKSB7XHJcbiAgICByZXR1cm4gWyhjb2xvcj4+MTYpJjB4RkYsIChjb2xvcj4+OCkmMHhGRiwgY29sb3ImMHhGRl07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaW52ZXJzZUNvbG9yKGNvbG9yLCB0PTEpIHtcclxuICAgIGNvbnN0IGJzPUdyYXBoVXRpbHMuZ2V0Q29sb3JCeXRlcyhjb2xvciksXHJcbiAgICAgICAgICBpYnM9WzB4RkYtYnNbMF0sMHhGRi1ic1sxXSwweEZGLWJzWzJdXSxcclxuICAgICAgICAgIG5icz1bTWF0aC5yb3VuZChHcmFwaFV0aWxzLmludGVycG9sYXRlMDEoYnNbMF0saWJzWzBdLHQpKSxNYXRoLnJvdW5kKEdyYXBoVXRpbHMuaW50ZXJwb2xhdGUwMShic1sxXSxpYnNbMV0sdCkpLE1hdGgucm91bmQoR3JhcGhVdGlscy5pbnRlcnBvbGF0ZTAxKGJzWzJdLGlic1syXSx0KSldO1xyXG4gICAgcmV0dXJuIEdyYXBoVXRpbHMuYnl0ZXMyQ29sb3IobmJzKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjb2xvcjJSZ2JhKGNvbG9yLCBhKSB7XHJcbiAgICByZXR1cm4gR3JhcGhVdGlscy5ieXRlczJSZ2JhKEdyYXBoVXRpbHMuZ2V0Q29sb3JCeXRlcyhjb2xvciksIGEpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGJ5dGVzMlJnYmEoYnMsIGEpIHtcclxuICAgIHJldHVybiAncmdiYSgnK2JzLmpvaW4oJywnKSsnLCcrYSsnKSc7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYnl0ZXMyQ29sb3IoYnMpIHtcclxuICAgIHJldHVybiBic1syXXwoYnNbMV08PDgpfChic1swXTw8MTYpXHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0dyYXBoVXRpbHMuanMiLCJpbXBvcnQgQ2FjaGUgZnJvbSAnLi9DYWNoZSc7XHJcbmltcG9ydCBCbGFua0ltYWdlIGZyb20gJy4vQmxhbmtJbWFnZSc7XHJcbmltcG9ydCBTdGF0aWNJbWFnZSBmcm9tICcuL1N0YXRpY0ltYWdlJztcclxuaW1wb3J0IFBkZkltYWdlIGZyb20gJy4vUGRmSW1hZ2UnO1xyXG5pbXBvcnQgSW50ZXJhY3RpdmVJbWFnZSBmcm9tICcuL0ludGVyYWN0aXZlSW1hZ2UnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW1hZ2VGYWN0b3J5IHtcclxuXHJcbiAgY29uc3RydWN0b3IoY29udGV4dCwgY2FjaGUpIHtcclxuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICB0aGlzLmNhY2hlID0gY2FjaGUgfHwgbmV3IENhY2hlKCk7XHJcbiAgfVxyXG5cclxuICBidWlsZChpbmZvLCBuPTAsIHdpZHRoVGV4ZWxzPTIxMCwgaGVpZ2h0VGV4ZWxzPTI5NywgY29sb3I9MHhGRkZGRkYsIGluamVjdG9yPXVuZGVmaW5lZCkge1xyXG4gICAgbGV0IGltYWdlO1xyXG4gICAgc3dpdGNoKGluZm8udHlwZSkge1xyXG4gICAgICBjYXNlICdodG1sJzoge1xyXG4gICAgICAgIGltYWdlID0gbmV3IEludGVyYWN0aXZlSW1hZ2UodGhpcy5jb250ZXh0LCB3aWR0aFRleGVscywgaGVpZ2h0VGV4ZWxzLCBjb2xvciwgaW5mby5zcmMsIHRoaXMuY2FjaGUsIGluamVjdG9yKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdpbWFnZSc6IHtcclxuICAgICAgICBpbWFnZSA9IG5ldyBTdGF0aWNJbWFnZSh0aGlzLmNvbnRleHQsIHdpZHRoVGV4ZWxzLCBoZWlnaHRUZXhlbHMsIGNvbG9yLCBpbmZvLnNyYyk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAncGRmJzoge1xyXG4gICAgICAgIGltYWdlID0gbmV3IFBkZkltYWdlKHRoaXMuY29udGV4dCwgd2lkdGhUZXhlbHMsIGhlaWdodFRleGVscywgY29sb3IsIGluZm8uc3JjLCBuKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdibGFuayc6XHJcbiAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICBpbWFnZSA9IG5ldyBCbGFua0ltYWdlKHRoaXMuY29udGV4dCwgd2lkdGhUZXhlbHMsIGhlaWdodFRleGVscywgY29sb3IpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaW1hZ2U7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0ltYWdlRmFjdG9yeS5qcyIsImltcG9ydCB7cHJvcHMgYXMgIGJvb2tQcm9wc30gZnJvbSAnLi4vcHJvcHMvYm9vayc7XHJcbmltcG9ydCBCYXNlTWF0aFV0aWxzIGZyb20gJ0Jhc2VNYXRoVXRpbHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm9va1Byb3BzQnVpbGRlciB7XHJcbiAgY29uc3RydWN0b3Iob25SZWFkeSkge1xyXG4gICAgdGhpcy5vblJlYWR5ID0gb25SZWFkeTtcclxuICAgIHRoaXMuZGVmYXVsdHMgPSBib29rUHJvcHMoKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcblxyXG4gIH1cclxuXHJcbiAgY2FsY1NpemUod2lkdGgsIGhlaWdodCkge1xyXG4gICAgY29uc3Qgc2NhbGUgPSBCYXNlTWF0aFV0aWxzLmNhbGNTY2FsZSh3aWR0aCwgaGVpZ2h0LCB0aGlzLmRlZmF1bHRzLndpZHRoLCB0aGlzLmRlZmF1bHRzLmhlaWdodCk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB3aWR0aDogc2NhbGUqd2lkdGgsXHJcbiAgICAgIGhlaWdodDogc2NhbGUqaGVpZ2h0XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY2FsY1RleGVscyh3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICBjb25zdCBzaGVldCA9IHRoaXMuZGVmYXVsdHMuc2hlZXQsIHNjYWxlID0gQmFzZU1hdGhVdGlscy5jYWxjU2NhbGUod2lkdGgsIGhlaWdodCwgc2hlZXQud2lkdGhUZXhlbHMsIHNoZWV0LmhlaWdodFRleGVscyk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB3aWR0aFRleGVsczogc2NhbGUqd2lkdGgsXHJcbiAgICAgIGhlaWdodFRleGVsczogc2NhbGUqaGVpZ2h0XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY2FsY1Byb3BzKHdpZHRoLCBoZWlnaHQpIHtcclxuICAgIHRoaXMucHJvcHMgPSB7XHJcbiAgICAgIC4uLnRoaXMuZGVmYXVsdHMsXHJcbiAgICAgIC4uLnRoaXMuY2FsY1NpemUod2lkdGgsIGhlaWdodCksXHJcbiAgICAgIHNoZWV0OiB7XHJcbiAgICAgICAgLi4udGhpcy5kZWZhdWx0cy5zaGVldCxcclxuICAgICAgICAuLi50aGlzLmNhbGNUZXhlbHMod2lkdGgsIGhlaWdodClcclxuICAgICAgfSxcclxuICAgICAgY292ZXI6IHtcclxuICAgICAgICAuLi50aGlzLmRlZmF1bHRzLmNvdmVyLFxyXG4gICAgICB9LFxyXG4gICAgICBwYWdlOiB7XHJcbiAgICAgICAgLi4udGhpcy5kZWZhdWx0cy5wYWdlLFxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY2FsY1NoZWV0cyhwYWdlcykge1xyXG4gICAgcmV0dXJuIHRoaXMuc2hlZXRzID0gTWF0aC5jZWlsKE1hdGgubWF4KDAsIHBhZ2VzLTQpLzIpO1xyXG4gIH1cclxuXHJcbiAgZ2V0U2hlZXRzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuc2hlZXRzO1xyXG4gIH1cclxuXHJcbiAgZ2V0UHJvcHMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wcm9wcztcclxuICB9XHJcblxyXG4gIGdldFBhZ2VDYWxsYmFjaygpIHtcclxuICAgIHJldHVybiB0aGlzLmJpbmRzLnBhZ2VDYWxsYmFjaztcclxuICB9XHJcblxyXG4gIHJlYWR5KCkge1xyXG4gICAgaWYodGhpcy5vblJlYWR5KSB7XHJcbiAgICAgIHRoaXMub25SZWFkeSh0aGlzLmdldFByb3BzKCksIHRoaXMuZ2V0U2hlZXRzKCksIHRoaXMuZ2V0UGFnZUNhbGxiYWNrKCkpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL0Jvb2tQcm9wc0J1aWxkZXIuanMiLCJpbXBvcnQge1RIUkVFfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IHNoZWV0QmxvY2sgZnJvbSAnLi4vbW9kZWxzL3NoZWV0QmxvY2snO1xyXG5pbXBvcnQgTWF0aFV0aWxzIGZyb20gJ01hdGhVdGlscyc7XHJcbmltcG9ydCBUaHJlZVV0aWxzIGZyb20gJ1RocmVlVXRpbHMnO1xyXG4vLyBpbXBvcnQgVGhyZWVNYXJrdXAgZnJvbSAnLi9UaHJlZU1hcmt1cCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaGVldEJsb2NrIHtcclxuXHJcbiAgY29uc3RydWN0b3IodmlzdWFsLCBwLCBmaXJzdCwgbGFzdCwgYW5nbGU9MCwgc3RhdGU9J2Nsb3NlZCcsIGhlaWdodD0wKSB7XHJcbiAgICB0aGlzLnZpc3VhbCA9IHZpc3VhbDtcclxuICAgIHRoaXMucCA9IHtcclxuICAgICAgLi4ucCxcclxuICAgICAgZmlyc3QsXHJcbiAgICAgIGxhc3RcclxuICAgIH07XHJcbiAgICBjb25zdCBwcm9wcyA9IHRoaXMuZ2V0UHJvcHMoKTtcclxuXHJcbiAgICBjb25zdCBsb2FkZWRQb2ludHMgPSB0aGlzLmxvYWRQb2ludHMoKTtcclxuICAgIE9iamVjdC5rZXlzKGxvYWRlZFBvaW50cykubWFwKChrKT0+IHtcclxuICAgICAgdGhpc1trXSA9IGxvYWRlZFBvaW50c1trXVtwcm9wcy5zaGFwZV0gfHwgbG9hZGVkUG9pbnRzW2tdWzBdO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5wU3BsaW5lID0gbmV3IFRIUkVFLlNwbGluZShbXSk7XHJcbiAgICBmb3IobGV0IGk9MDsgaTx0aGlzLmludGVycG9sYXRpb25Qb2ludHMueFswXS5sZW5ndGg7ICsraSkge1xyXG4gICAgXHR0aGlzLnBTcGxpbmUucG9pbnRzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5pU3BsaW5lID0gbmV3IFRIUkVFLlNwbGluZShbXSk7XHJcbiAgICBmb3IobGV0IGk9MDsgaTxzaGVldEJsb2NrLnJlc1g7ICsraSkge1xyXG4gICAgXHR0aGlzLmlTcGxpbmUucG9pbnRzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5hU3BsaW5lcyA9IFtdO1xyXG5cclxuICAgIC8vdGhpcy50aHJlZSA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xyXG5cclxuICAgIHRoaXMuZ2VvbWV0cnkgPSBzaGVldEJsb2NrLmdlb21ldHJ5LmNsb25lKCk7XHJcblxyXG4gICAgdGhpcy5wLnNpZGVGYWNlcyA9IFt7XHJcbiAgICAgICAgZmlyc3Q6IDAsXHJcbiAgICAgICAgbGFzdDogc2hlZXRCbG9jay5mYWNlc1swXVxyXG4gICAgICB9LCB7XHJcbiAgICAgICAgZmlyc3Q6IHNoZWV0QmxvY2suZmFjZXNbMF0sXHJcbiAgICAgICAgbGFzdDogc2hlZXRCbG9jay5mYWNlc1sxXVxyXG4gICAgICB9XHJcbiAgICBdO1xyXG5cclxuICAgIHRoaXMuc2lkZVRleHR1cmUgPSBuZXcgVEhSRUUuVGV4dHVyZSgpO1xyXG4gICAgdGhpcy5zaWRlVGV4dHVyZS53cmFwVCA9IFRIUkVFLlJlcGVhdFdyYXBwaW5nO1xyXG4gICAgdGhpcy5zaWRlVGV4dHVyZS5yZXBlYXQuc2V0KDAsIGxhc3QtZmlyc3QpO1xyXG4gICAgdGhpcy5zaWRlVGV4dHVyZS5pbWFnZSA9IHByb3BzLnNpZGVUZXh0dXJlO1xyXG4gICAgdGhpcy5zaWRlVGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG4gICAgdGhpcy5tYXRlcmlhbHMgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKCksXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKCksXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHttYXA6IHRoaXMuc2lkZVRleHR1cmV9KSxcclxuICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe21hcDogdGhpcy5zaWRlVGV4dHVyZX0pLFxyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7bWFwOiB0aGlzLnNpZGVUZXh0dXJlfSksXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHttYXA6IHRoaXMuc2lkZVRleHR1cmV9KVxyXG4gICAgICAgICAgICAgICAgICBdO1xyXG5cclxuICAgIHRoaXMucC5zZXRUZXh0dXJlKHRoaXMubWF0ZXJpYWxzWzBdLCAyKmZpcnN0KTtcclxuICAgIHRoaXMucC5zZXRUZXh0dXJlKHRoaXMubWF0ZXJpYWxzWzFdLCAyKmxhc3QtMSk7XHJcblxyXG4gICAgdGhpcy5tZXNoID0gbmV3IFRIUkVFLk1lc2godGhpcy5nZW9tZXRyeSwgbmV3IFRIUkVFLk1lc2hGYWNlTWF0ZXJpYWwodGhpcy5tYXRlcmlhbHMpKTtcclxuICAgIHRoaXMubWVzaC5jYXN0U2hhZG93ID0gZmFsc2U7XHJcbiAgICB0aGlzLm1lc2gucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xyXG4gICAgLy8gdGhpcy5tZXNoLmZydXN0dW1DdWxsZWQgPSB0cnVlO1xyXG5cclxuICAgIC8vdGhpcy50aHJlZS5hZGQodGhpcy5tZXNoKTtcclxuICAgIHRoaXMudGhyZWUgPSB0aGlzLm1lc2g7XHJcbiAgICB0aGlzLnRocmVlLnVzZXJEYXRhLnNlbGYgPSB0aGlzO1xyXG5cclxuICAgIHRoaXMubWFya2VycyA9IFtdO1xyXG4gICAgaWYodGhpcy5wLm1hcmtlci51c2UpIHtcclxuICAgICAgY29uc3QgbD10aGlzLmdlb21ldHJ5LnZlcnRpY2VzLmxlbmd0aDtcclxuICAgICAgbGV0IGlzO1xyXG4gICAgICAvLyBpcyA9IFswLCBzaGVldEJsb2NrLnJlc1gtMSwgKHNoZWV0QmxvY2sucmVzWi0xKSpzaGVldEJsb2NrLnJlc1gsIHNoZWV0QmxvY2sucmVzWipzaGVldEJsb2NrLnJlc1gtMV07XHJcbiAgICAgIGlzID0gQXJyYXkuYXBwbHkoMCwgQXJyYXkobCkpLm1hcCgoXywgaSk9PiBpKTtcclxuXHJcbiAgICAgIGZvcihsZXQgaSBvZiBpcykge1xyXG4gICAgICAgIGNvbnN0IG1hcmtlciA9IFRocmVlVXRpbHMuY3JlYXRlTWFya2VyKHRoaXMuZ2VvbWV0cnkudmVydGljZXNbaV0sIGk8bC8yPzB4RkYwMDAwOjB4MDBGRjAwLCB0aGlzLnAubWFya2VyLnNpemUpO1xyXG4gICAgICAgIHRoaXMubWFya2Vycy5wdXNoKHtcclxuICAgICAgICAgIG1hcmtlcixcclxuICAgICAgICAgIHZlcnRleDogaVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudGhyZWUuYWRkKG1hcmtlcik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmNvcm5lciA9IHtcclxuICAgICAgdXNlOiB0cnVlLFxyXG4gICAgICBoZWlnaHQ6IDAsXHJcbiAgICAgIG1heERpc3RhbmNlOiAwLFxyXG4gICAgICBwb2ludHM6IFtdLFxyXG4gICAgICBPWjogbmV3IFRIUkVFLlZlY3RvcjMoMCwwLDEpLFxyXG4gICAgICBheGlzOiBuZXcgVEhSRUUuVmVjdG9yMygpXHJcbiAgICB9O1xyXG4gICAgdGhpcy5zZXQoMCwgJ2Nsb3NlZCcsIGhlaWdodCwgZmlyc3QsIGxhc3QpOyAvLyBjYWxjdWxhdGUgY29ybmVyIHBvaW50c1xyXG5cclxuICAgIHRoaXMuc2V0KGFuZ2xlLCBzdGF0ZSwgaGVpZ2h0LCBmaXJzdCwgbGFzdCk7IC8vIGluaXQgcG9zaXRpb25cclxuXHJcbiAgICAvLyBpZighU2hlZXRCbG9jay5tYXJrdXApIHtcclxuICAgIC8vICAgU2hlZXRCbG9jay5tYXJrdXA9dHJ1ZTtcclxuICAgIC8vICAgdGhpcy5tYXJrdXAgPSBuZXcgVGhyZWVNYXJrdXAodGhpcywgMCwgW3tcclxuICAgIC8vICAgICB4OiAwLFxyXG4gICAgLy8gICAgIHk6IDAsXHJcbiAgICAvLyAgIH0sIHtcclxuICAgIC8vICAgICB4OiAwLjUsXHJcbiAgICAvLyAgICAgeTogMVxyXG4gICAgLy8gICB9LCB7XHJcbiAgICAvLyAgICAgeDogMSxcclxuICAgIC8vICAgICB5OiAwXHJcbiAgICAvLyAgIH1dLm1hcCgocCk9Pm5ldyBUSFJFRS5WZWN0b3IyKHAueCwgcC55KSksIHt9KTtcclxuICAgIC8vIH1cclxuXHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgZm9yKGxldCBtIG9mIHRoaXMubWF0ZXJpYWxzKSB7XHJcbiAgICAgIGlmKG0ubWFwKSB7XHJcbiAgICAgICAgbS5tYXAgPSBudWxsO1xyXG4gICAgICAgIG0ubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICAgIG0uZGlzcG9zZSgpO1xyXG4gICAgfVxyXG4gICAgZGVsZXRlIHRoaXMubWF0ZXJpYWxzO1xyXG4gICAgdGhpcy5nZW9tZXRyeS5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICBnZXRTaXplKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucC5sYXN0LXRoaXMucC5maXJzdDtcclxuICB9XHJcblxyXG4gIGdldFByb3BzKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgLi4udGhpcy5wLnBhZ2UsXHJcbiAgICAgIHNoZWV0czogdGhpcy5wLnNoZWV0c1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGdldFRvcENlcm5lcnMoKSB7XHJcbiAgICBjb25zdCBvZmYgPSB0aGlzLmFuZ2xlPk1hdGguUEkvMj8gdGhpcy5nZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGgvMjogMDtcclxuICAgIHJldHVybiBbXHJcbiAgICAgICAgdGhpcy5nZW9tZXRyeS52ZXJ0aWNlc1tvZmZdLFxyXG4gICAgICAgIHRoaXMuZ2VvbWV0cnkudmVydGljZXNbc2hlZXRCbG9jay5yZXNYLTErb2ZmXSxcclxuICAgICAgICB0aGlzLmdlb21ldHJ5LnZlcnRpY2VzWyhzaGVldEJsb2NrLnJlc1otMSkqc2hlZXRCbG9jay5yZXNYK29mZl0sXHJcbiAgICAgICAgdGhpcy5nZW9tZXRyeS52ZXJ0aWNlc1tzaGVldEJsb2NrLnJlc1oqc2hlZXRCbG9jay5yZXNYLTErb2ZmXVxyXG4gICAgICBdO1xyXG4gIH1cclxuXHJcbiAgZ2V0VG9wU2l6ZSgpIHtcclxuICAgIC8vIGNvbnN0IGw9dGhpcy5nZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGgsIG9mZiA9IHRoaXMuYW5nbGU+TWF0aC5QSS8yPyBsLzI6IDAsXHJcbiAgICAvLyAgIHYwID0gdGhpcy5nZW9tZXRyeS52ZXJ0aWNlc1tvZmZdLCB2MSA9IHRoaXMuZ2VvbWV0cnkudmVydGljZXNbc2hlZXRCbG9jay5yZXNaKnNoZWV0QmxvY2sucmVzWC0xK29mZl07XHJcbiAgICAvLyAvLyBpcyA9IFswLCBzaGVldEJsb2NrLnJlc1gtMSwgKHNoZWV0QmxvY2sucmVzWi0xKSpzaGVldEJsb2NrLnJlc1gsIHNoZWV0QmxvY2sucmVzWipzaGVldEJsb2NrLnJlc1gtMV07XHJcbiAgICAvLyByZXR1cm4ge1xyXG4gICAgLy8gICB3aWR0aDogTWF0aC5hYnModjEueC12MC54KSxcclxuICAgIC8vICAgaGVpZ2h0OiBNYXRoLmFicyh2MS56LXYwLnopXHJcbiAgICAvLyB9O1xyXG4gICAgY29uc3QgdnMgPSB0aGlzLmdldFRvcENlcm5lcnMoKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHdpZHRoOiB2c1swXS5kaXN0YW5jZVRvKHZzWzFdKSxcclxuICAgICAgaGVpZ2h0OiB2c1swXS5kaXN0YW5jZVRvKHZzWzJdKVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGdldFRvcFdvcmxkUm90YXRpb24ocSkge1xyXG4gICAgcS54ID0gLU1hdGguUEkvMjtcclxuICAgIHJldHVybiBxO1xyXG4gIH1cclxuXHJcbiAgZ2V0VG9wV29ybGRQb3NpdGlvbih2KSB7XHJcbiAgICBjb25zdCBsPXRoaXMuZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoLCBvZmYgPSB0aGlzLmFuZ2xlPk1hdGguUEkvMj8gbC8yOiAwLCB2cyA9IFtcclxuICAgICAgICB0aGlzLmdlb21ldHJ5LnZlcnRpY2VzW29mZl0sXHJcbiAgICAgICAgdGhpcy5nZW9tZXRyeS52ZXJ0aWNlc1tzaGVldEJsb2NrLnJlc1gtMStvZmZdLFxyXG4gICAgICAgIHRoaXMuZ2VvbWV0cnkudmVydGljZXNbKHNoZWV0QmxvY2sucmVzWi0xKSpzaGVldEJsb2NrLnJlc1grb2ZmXSxcclxuICAgICAgICB0aGlzLmdlb21ldHJ5LnZlcnRpY2VzW3NoZWV0QmxvY2sucmVzWipzaGVldEJsb2NrLnJlc1gtMStvZmZdXHJcbiAgICAgIF07XHJcbiAgICB2LnNldCgwLCAwLCAwKTtcclxuICAgIGZvcihsZXQgdmkgb2YgdnMpIHtcclxuICAgICAgdi54ICs9IDAuMjUqdmkueDtcclxuICAgICAgdi55ICs9IDAuMjUqdmkueTtcclxuICAgICAgdi56ICs9IDAuMjUqdmkuejtcclxuICAgIH1cclxuICAgIHRoaXMudGhyZWUubG9jYWxUb1dvcmxkKHYpO1xyXG4gICAgcmV0dXJuIHY7XHJcbiAgfVxyXG5cclxuICBnZXRJbnRlcnBvbGF0aW9uUG9pbnRzKGluZHMsIG1vZCkge1xyXG4gICAgY29uc3QgcHMgPSB7eDogW10sIHk6IFtdfSwgSyA9IHRoaXMuZ2V0UHJvcHMoKS53YXZlO1xyXG4gICAgZm9yKGxldCBpIG9mIGluZHMpIHtcclxuICAgICAgcHMueC5wdXNoKFsuLi50aGlzLmludGVycG9sYXRpb25Qb2ludHMueFtpXV0pO1xyXG4gICAgICBwcy55LnB1c2gofm1vZC5pbmRleE9mKGkpPyB0aGlzLmludGVycG9sYXRpb25Qb2ludHMueVtpXS5tYXAoKG4pPT4gSypuKTogWy4uLnRoaXMuaW50ZXJwb2xhdGlvblBvaW50cy55W2ldXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHM7XHJcbiAgfVxyXG5cclxuICBzZXQoYW5nbGUsIHN0YXRlPXRoaXMuc3RhdGUsIGhlaWdodD10aGlzLmNvcm5lci5oZWlnaHQsIGZpcnN0PXRoaXMucC5maXJzdCwgbGFzdD10aGlzLnAubGFzdCkge1xyXG4gICAgY29uc3QgUEkgPSBNYXRoLlBJO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xyXG4gICAgbGV0IGNsb3NlZEFuZ2xlLCBiaW5kZXJUdXJuO1xyXG4gICAgaWYodHlwZW9mIGFuZ2xlPT09J29iamVjdCcpIHtcclxuICAgICAgdGhpcy5hbmdsZSA9IGFuZ2xlLm9wZW5lZEFuZ2xlO1xyXG4gICAgICBjbG9zZWRBbmdsZSA9IGFuZ2xlLmNsb3NlZEFuZ2xlO1xyXG4gICAgICBiaW5kZXJUdXJuID0gYW5nbGUuYmluZGVyVHVybj5QSS8yP1BJLWFuZ2xlLmJpbmRlclR1cm46YW5nbGUuYmluZGVyVHVybjtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLmFuZ2xlID0gYW5nbGU7XHJcbiAgICB9XHJcbiAgICB0aGlzLmNvcm5lci5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICBpZih0aGlzLnAuZmlyc3QhPT1maXJzdCB8fCB0aGlzLnAubGFzdCE9PWxhc3QpIHtcclxuICAgICAgdGhpcy5zaWRlVGV4dHVyZS5yZXBlYXQuc2V0KDAsIGxhc3QtZmlyc3QpO1xyXG4gICAgICB0aGlzLnNpZGVUZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuICAgICAgaWYodGhpcy5wLmZpcnN0IT09Zmlyc3QpIHtcclxuICAgICAgICB0aGlzLnAuc2V0VGV4dHVyZSh0aGlzLm1hdGVyaWFsc1swXSwgMipmaXJzdCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYodGhpcy5wLmxhc3QhPT1sYXN0KSB7XHJcbiAgICAgICAgdGhpcy5wLnNldFRleHR1cmUodGhpcy5tYXRlcmlhbHNbMV0sIDIqbGFzdC0xKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5wLmZpcnN0ID0gZmlyc3Q7XHJcbiAgICB0aGlzLnAubGFzdCA9IGxhc3Q7XHJcbiAgICBsZXQgcG9pbnRzO1xyXG4gICAgY29uc3QgcHJvcHMgPSB0aGlzLmdldFByb3BzKCk7XHJcbiAgICBpZih0aGlzLnN0YXRlID09PSAnY2xvc2VkJykge1xyXG4gICAgICBwb2ludHMgPSB0aGlzLmdldEludGVycG9sYXRpb25Qb2ludHModGhpcy5jbG9zZWRJbnRlcnBvbGF0aW9uSW5kZWNlcywgdGhpcy5jbG9zZWRJbnRlcnBvbGF0aW9uSW5kZWNlcyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKHRoaXMuc3RhdGUgPT09ICdvcGVuZWQnKSB7XHJcbiAgICAgIGlmKGNsb3NlZEFuZ2xlIT09dW5kZWZpbmVkICYmIE1hdGguYWJzKGNsb3NlZEFuZ2xlLVBJLzIpPjFlLTIpIHtcclxuICAgICAgICBwb2ludHMgPSB0aGlzLmdldEludGVycG9sYXRpb25Qb2ludHModGhpcy5mbGF0SW50ZXJwb2xhdGlvbkluZGVjZXMsIFtdKTtcclxuICAgICAgICBjb25zdCBwcyA9IHRoaXMuZ2V0UG9pbnRzQXRBbmdsZSh0aGlzLmdldEludGVycG9sYXRpb25Qb2ludHModGhpcy5jbG9zZWRJbnRlcnBvbGF0aW9uSW5kZWNlcywgdGhpcy5jbG9zZWRJbnRlcnBvbGF0aW9uSW5kZWNlcyksIGNsb3NlZEFuZ2xlPlBJLzI/UEktY2xvc2VkQW5nbGU6Y2xvc2VkQW5nbGUpO1xyXG4gICAgICAgIHBvaW50cy54ID0gW3BzLngsLi4ucG9pbnRzLnhdO1xyXG4gICAgICAgIHBvaW50cy55ID0gW3BzLnksLi4ucG9pbnRzLnldO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHBzKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBwb2ludHMgPSB0aGlzLmdldEludGVycG9sYXRpb25Qb2ludHModGhpcy5vcGVuZWRJbnRlcnBvbGF0aW9uSW5kZWNlcywgdGhpcy5jbG9zZWRJbnRlcnBvbGF0aW9uSW5kZWNlcyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGxldCBobCwgaHIsIG9mZnNldCA9IDAuNSpwcm9wcy5zaGVldHMqcHJvcHMuZGVwdGg7XHJcbiAgICBpZih0aGlzLnN0YXRlPT09J2Nsb3NlZCcpIHtcclxuICAgICAgb2Zmc2V0IC09IDdlLTYqdGhpcy5wLnNjYWxlO1xyXG4gICAgfVxyXG4gICAgaWYodGhpcy5hbmdsZTw9UEkvMikge1xyXG4gICAgICBobCA9IChwcm9wcy5zaGVldHMtZmlyc3QpKnByb3BzLmRlcHRoO1xyXG4gICAgICBociA9IChwcm9wcy5zaGVldHMtbGFzdCkqcHJvcHMuZGVwdGg7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgaGwgPSBmaXJzdCpwcm9wcy5kZXB0aDtcclxuICAgICAgaHIgPSBsYXN0KnByb3BzLmRlcHRoO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGluQW5nbGUgPSB0aGlzLmFuZ2xlPlBJLzI/UEktdGhpcy5hbmdsZTp0aGlzLmFuZ2xlLCBoQW5nbGUgPSB0aGlzLnN0YXRlID09PSAnY2xvc2VkJz8gaW5BbmdsZTogKGJpbmRlclR1cm49PT11bmRlZmluZWQ/IFBJLzI6IGJpbmRlclR1cm4pO1xyXG4gICAgY29uc3QgW2xlZnQsIHJpZ2h0XSA9IHRoaXMuZ2V0UG9pbnRzQXRBbmdsZUFuZEhzKHBvaW50cywgaW5BbmdsZSwgaEFuZ2xlLCBbaGwvcHJvcHMud2lkdGgsIGhyL3Byb3BzLndpZHRoXSk7XHJcbiAgICBpZih0aGlzLmFuZ2xlPlBJLzIpIHtcclxuICAgICAgdGhpcy5pbnZlcnNlKGxlZnQpO1xyXG4gICAgICB0aGlzLmludmVyc2UocmlnaHQpO1xyXG4gICAgICBvZmZzZXQgPSAtb2Zmc2V0O1xyXG4gICAgfVxyXG4gICAgdGhpcy5zZXRQb2ludHMobGVmdCwgcmlnaHQsIG9mZnNldCk7XHJcbiAgfVxyXG5cclxuICBzZXRQb2ludHMobGVmdCwgcmlnaHQsIG9mZnNldCkge1xyXG4gICAgY29uc3QgcCA9IHRoaXMuZ2V0UHJvcHMoKTtcclxuICAgIGxldCBpID0gMDtcclxuXHJcbiAgICBjb25zdCB5cyA9IFtyaWdodCwgbGVmdF07XHJcbiAgICBmb3IobGV0IHkgPSAwOyB5PHNoZWV0QmxvY2sucmVzWTsgKyt5KSB7XHJcbiAgICAgIGZvcihsZXQgeiA9IDA7IHo8c2hlZXRCbG9jay5yZXNaOyArK3opIHtcclxuICAgICAgICBmb3IobGV0IHggPSAwOyB4PHNoZWV0QmxvY2sucmVzWDsgKyt4KSB7XHJcbiAgICAgICAgICB0aGlzLmdlb21ldHJ5LnZlcnRpY2VzW2krK10uc2V0KFxyXG4gICAgICAgICAgICB5c1t5XS54W3hdKnAud2lkdGgrb2Zmc2V0LFxyXG4gICAgICAgICAgICB5c1t5XS55W3hdKnAud2lkdGgsXHJcbiAgICAgICAgICAgIHoqcC5oZWlnaHQvKHNoZWV0QmxvY2sucmVzWi0xKS0wLjUqcC5oZWlnaHRcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZihpIT09dGhpcy5nZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGgpIHtcclxuICAgICAgY29uc29sZS53YXJuKCdzZXRQb2ludHM6IGJhZCBtYXBwaW5nIScpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmKHRoaXMuY29ybmVyLnVzZSAmJiAhdGhpcy5jb3JuZXIucG9pbnRzLmxlbmd0aCkge1xyXG4gICAgICBjb25zdCBwbGFuZSA9IG5ldyBUSFJFRS5QbGFuZSgpLCBub3JtYWwgPSBwbGFuZS5ub3JtYWwsIHBsYW5lT2Zmc2V0ID0gKDEtdGhpcy5nZXRQcm9wcygpLmZsZXhpYmxlQ29ybmVyKSpNYXRoLm1pbihwLndpZHRoLCBwLmhlaWdodCksIHByb2ogPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG4gICAgICBwbGFuZS5zZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludChuZXcgVEhSRUUuVmVjdG9yMygtMSwwLC0xKS5ub3JtYWxpemUoKSwgbmV3IFRIUkVFLlZlY3RvcjMocGxhbmVPZmZzZXQrb2Zmc2V0LCAwLCAwLjUqcC5oZWlnaHQpKTtcclxuICAgICAgZm9yKGxldCBpPTAsIGw9dGhpcy5nZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGg7aTxsOysraSkge1xyXG4gICAgICAgIHBsYW5lLnByb2plY3RQb2ludCh0aGlzLmdlb21ldHJ5LnZlcnRpY2VzW2ldLCBwcm9qKTtcclxuICAgICAgICBwcm9qLnN1Yih0aGlzLmdlb21ldHJ5LnZlcnRpY2VzW2ldKTtcclxuICAgICAgICBpZihwcm9qLngqbm9ybWFsLngrcHJvai55Km5vcm1hbC55K3Byb2oueipub3JtYWwuej4wKSB7XHJcbiAgICAgICAgICBjb25zdCBkID0gcHJvai5sZW5ndGgoKS9wbGFuZU9mZnNldDtcclxuICAgICAgICAgIHRoaXMuY29ybmVyLm1heERpc3RhbmNlID0gTWF0aC5tYXgodGhpcy5jb3JuZXIubWF4RGlzdGFuY2UsIGQpO1xyXG4gICAgICAgICAgdGhpcy5jb3JuZXIucG9pbnRzLnB1c2goe3ZlcnRleDogaSwgZGlzdGFuY2U6IGR9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZih0aGlzLmNvcm5lci51c2UgJiYgTWF0aC5hYnModGhpcy5jb3JuZXIuaGVpZ2h0KT4xZS0zKSB7XHJcbiAgICAgIGNvbnN0IGQyQW5nbGUgPSAoZCk9PiBwLmNvcm5lckRldmlhdGlvbip0aGlzLmNvcm5lci5oZWlnaHQvKDErTWF0aC5leHAoLXAuYmVuZGluZyooZC0wLjUqdGhpcy5jb3JuZXIubWF4RGlzdGFuY2UpKSk7XHJcbiAgICAgIHRoaXMuY29ybmVyLmF4aXMuc2V0KC0xLDAsMSkubm9ybWFsaXplKCk7XHJcbiAgICAgIHRoaXMuY29ybmVyLmF4aXMuYXBwbHlBeGlzQW5nbGUodGhpcy5jb3JuZXIuT1osIHRoaXMuYW5nbGUpO1xyXG4gICAgICBmb3IobGV0IHBvaW50IG9mIHRoaXMuY29ybmVyLnBvaW50cykge1xyXG4gICAgICAgIHRoaXMuZ2VvbWV0cnkudmVydGljZXNbcG9pbnQudmVydGV4XS5hcHBseUF4aXNBbmdsZSh0aGlzLmNvcm5lci5heGlzLCBkMkFuZ2xlKHBvaW50LmRpc3RhbmNlKSlcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZvcihsZXQgbSBvZiB0aGlzLm1hcmtlcnMpIHtcclxuICAgICAgbS5tYXJrZXIucG9zaXRpb24uY29weSh0aGlzLmdlb21ldHJ5LnZlcnRpY2VzW20udmVydGV4XSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5nZW9tZXRyeS5jb21wdXRlVmVydGV4Tm9ybWFscygpO1xyXG4gICAgLy90aGlzLmdlb21ldHJ5LmNvbXB1dGVGYWNlTm9ybWFscygpO1xyXG4gICAgdGhpcy5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcclxuICAgIC8vdGhpcy5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdCb3goKTtcclxuICAgIHRoaXMuZ2VvbWV0cnkudmVydGljZXNOZWVkVXBkYXRlID0gdHJ1ZTtcclxuXHJcbiAgICBpZih0aGlzLm1hcmt1cCkge1xyXG4gICAgICB0aGlzLm1hcmt1cC5jb21wdXRlVmVydGljZXMoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGludmVyc2UocHMpIHtcclxuICAgIGZvcihsZXQgaSA9IDA7aTxwcy54Lmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIHBzLnhbaV09LXBzLnhbaV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHM7XHJcbiAgfVxyXG5cclxuICBnZXRQb2ludHNBdEhzKHBzLCBhbmdsZSwgaHMpIHtcclxuICAgIGNvbnN0IE4gPSAxMDAwO1xyXG4gICAgTWF0aFV0aWxzLnNldFNwbGluZVBvaW50cyh0aGlzLnBTcGxpbmUsIHBzKTtcclxuICAgIGxldCBibCA9IE1hdGhVdGlscy5zcGxpdFNwbGluZSh0aGlzLnBTcGxpbmUsIE4pLCByPVtdO1xyXG4gICAge1xyXG4gICAgICBjb25zdCBwMSA9IHsuLi50aGlzLnBTcGxpbmUuZ2V0UG9pbnQoKE4tMSkvTil9LCBwMiA9IHsuLi50aGlzLnBTcGxpbmUuZ2V0UG9pbnQoMSl9LFxyXG4gICAgICAgIGRwID0ge3g6IHAyLngtcDEueCwgeTogcDIueS1wMS55fSwgbG4gPSBNYXRoLnNxcnQoZHAueCpkcC54K2RwLnkqZHAueSksXHJcbiAgICAgICAgc3AgPSB0aGlzLnBTcGxpbmUucG9pbnRzW3RoaXMucFNwbGluZS5wb2ludHMubGVuZ3RoLTFdO1xyXG4gICAgICBzcC5zZXQoc3AueCswLjEqZHAueC9sbiwgc3AueSswLjEqZHAueS9sbiwgMCk7XHJcbiAgICAgIGJsID0gTWF0aFV0aWxzLnNwbGl0U3BsaW5lKHRoaXMucFNwbGluZSwgTik7XHJcbiAgICB9XHJcbiAgICBibC5scy5wdXNoKDFlNyk7XHJcbiAgICBNYXRoVXRpbHMubWFwbDJMKGJsLmxzLCBibC5sZW4sIHNoZWV0QmxvY2sucmVzWCwgKGkpPT4ge1xyXG4gICAgICBmb3IobGV0IGo9MDsgajxocy5sZW5ndGg7ICsraikge1xyXG4gICAgICAgIGlmKCFpKSB7XHJcbiAgICAgICAgICByW2pdID0ge3g6IFstaHNbal0qTWF0aC5zaW4oYW5nbGUpXSwgeTogW2hzW2pdKk1hdGguY29zKGFuZ2xlKV19O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIGNvbnN0IHAwID0gey4uLnRoaXMucFNwbGluZS5nZXRQb2ludCgoaS0xKS9OKX0sXHJcbiAgICAgICAgICAgICAgICBwMSA9IHRoaXMucFNwbGluZS5nZXRQb2ludChpL04pLFxyXG4gICAgICAgICAgICAgICAgeD0tKHAxLnktcDAueSksIHk9KHAxLngtcDAueCksIGw9TWF0aC5zcXJ0KHgqeCt5KnkpO1xyXG4gICAgICAgICAgcltqXS54LnB1c2gocDEueCt4L2wqaHNbal0pO1xyXG4gICAgICAgICAgcltqXS55LnB1c2gocDEueSt5L2wqaHNbal0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgbnBzPVtdO1xyXG4gICAgZm9yKGxldCBqPTA7IGo8aHMubGVuZ3RoOyArK2opIHtcclxuICAgICAgbnBzW2pdPXt4OltdLHk6W119O1xyXG4gICAgICBNYXRoVXRpbHMuc2V0U3BsaW5lUG9pbnRzKHRoaXMuaVNwbGluZSwgcltqXSk7XHJcbiAgICAgIGNvbnN0IGwgPSBNYXRoVXRpbHMuc3BsaXRTcGxpbmUodGhpcy5pU3BsaW5lLCBOKTtcclxuICAgICAgbC5scy5wdXNoKDFlNyk7XHJcbiAgICAgIE1hdGhVdGlscy5tYXBsMkwobC5scywgMSwgc2hlZXRCbG9jay5yZXNYLCAoaSk9PiB7XHJcbiAgICAgICAgY29uc3QgcCA9IHRoaXMuaVNwbGluZS5nZXRQb2ludChpL04pO1xyXG4gICAgICAgIG5wc1tqXS54LnB1c2gocC54KTtcclxuICAgICAgICBucHNbal0ueS5wdXNoKHAueSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5wcztcclxuICB9XHJcblxyXG4gIGdldFBvaW50c0F0QW5nbGVBbmRIcyhwb2ludHMsIGFuZ2xlLCBoQW5nbGUsIGhzKSB7XHJcbiAgICBjb25zdCBwcyA9IHRoaXMuZ2V0UG9pbnRzQXRBbmdsZShwb2ludHMsIGFuZ2xlKTtcclxuICAgIHJldHVybiB0aGlzLmdldFBvaW50c0F0SHMocHMsIGhBbmdsZSwgaHMpO1xyXG4gIH1cclxuXHJcbiAgZ2V0UG9pbnRzQXRBbmdsZShwb2ludHMsIGFuZ2xlKSB7XHJcbiAgICBjb25zdCBwcz17eDogW10sIHk6W119LCBhbmdsZXM9W107XHJcbiAgICBhbmdsZS89TWF0aC5QSS8yO1xyXG4gICAgZm9yKGxldCBqID0gMDsgajxwb2ludHMueC5sZW5ndGg7ICsraikge1xyXG4gICAgICBhbmdsZXMucHVzaChqLyhwb2ludHMueC5sZW5ndGgtMSkpO1xyXG4gICAgfVxyXG4gICAgZm9yKGxldCBpID0gMDsgaTxwb2ludHMueFswXS5sZW5ndGg7ICsraSkge1xyXG4gICAgICBjb25zdCB4cHMgPSBbXSwgeXBzID0gW107XHJcbiAgICAgIGZvcihsZXQgaiA9IDA7IGo8cG9pbnRzLngubGVuZ3RoOyArK2opIHtcclxuICAgICAgICB4cHMucHVzaChwb2ludHMueFtqXVtpXSk7XHJcbiAgICAgICAgeXBzLnB1c2gocG9pbnRzLnlbal1baV0pO1xyXG4gICAgICB9XHJcbiAgICAgIHBzLngucHVzaCh0aGlzLmludGVycG9sYXRlKGFuZ2xlcyx4cHMsYW5nbGUpKTtcclxuICAgICAgcHMueS5wdXNoKHRoaXMuaW50ZXJwb2xhdGUoYW5nbGVzLHlwcyxhbmdsZSkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBzO1xyXG4gIH1cclxuXHJcbiAgaW50ZXJwb2xhdGUoeCx5LHhpKSB7XHJcbiAgICBpZighdGhpcy5hU3BsaW5lc1t4Lmxlbmd0aF0pIHtcclxuICAgICAgdGhpcy5hU3BsaW5lc1t4Lmxlbmd0aF0gPSBuZXcgVEhSRUUuU3BsaW5lKFtdKTtcclxuICAgICAgY29uc3QgcHMgPSB0aGlzLmFTcGxpbmVzW3gubGVuZ3RoXS5wb2ludHM7XHJcbiAgICAgIGZvcihsZXQgaT0wO2k8eC5sZW5ndGg7KytpKSB7XHJcbiAgICAgICAgcHMucHVzaChuZXcgVEhSRUUuVmVjdG9yMygpKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3Qgc3BsaW5lID0gdGhpcy5hU3BsaW5lc1t4Lmxlbmd0aF07XHJcbiAgICBmb3IobGV0IGk9MDtpPHgubGVuZ3RoOysraSkge1xyXG4gICAgICBzcGxpbmUucG9pbnRzW2ldLnNldCh4W2ldLCB5W2ldLCAwKTtcclxuICAgIH1cclxuICAgIHJldHVybiBzcGxpbmUuZ2V0UG9pbnQoTWF0aC5taW4oMSwgTWF0aC5tYXgoeGksIDApKSkueTtcclxuICB9XHJcblxyXG4gIGxvYWRQb2ludHMoKSB7XHJcbiAgICBjb25zdCB4PVtdLHk9W107XHJcbiAgICBmb3IobGV0IHIgb2YgWzAsIDAuMjg3NywgMC42MzQ3LCAwLjgxNzQsIDEuMDAwMF0pIHtcclxuICAgICAgeC5wdXNoKHIqTWF0aC5jb3MoMC45Kk1hdGguUEkvNCkpO1xyXG4gICAgICB5LnB1c2gocipNYXRoLnNpbigwLjkqTWF0aC5QSS80KSlcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBvcGVuZWRJbnRlcnBvbGF0aW9uSW5kZWNlcyA9IFtcclxuICAgICAgWzIsMyw0XSxcclxuICAgICAgWzIsMyw0LDUsNl1cclxuICAgIF0sXHJcbiAgICBjbG9zZWRJbnRlcnBvbGF0aW9uSW5kZWNlcyA9IFtcclxuICAgICAgWzAsMSwyXSxcclxuICAgICAgWzAsMSwyXVxyXG4gICAgXSxcclxuICAgIGZsYXRJbnRlcnBvbGF0aW9uSW5kZWNlcyA9IFtcclxuICAgICAgWzUsNF0sXHJcbiAgICAgIFs3LDZdXHJcbiAgICBdLFxyXG4gICAgaW50ZXJwb2xhdGlvblBvaW50cyA9IFtcclxuICAgICAge1xyXG4gICAgICAgIHg6IFtcclxuICAgICAgICAgIFswLDAuMjg3NywwLjYzNDcsMC44MTc0LDEuMDAwMF0sXHJcbiAgICAgICAgICBbMC4wMDAsMC4yODYsMC42MzIsMC44MTUsMC45OTddLFxyXG4gICAgICAgICAgWzAuMDAwLDAuMjc5LDAuNjIzLDAuODA2LDAuOTg4XSxcclxuICAgICAgICAgIFswLjAwMCwwLjEyNiwwLjQxMSwwLjU5MywwLjc3NF0sXHJcbiAgICAgICAgICBbMCwwLDAsMCwwXSxcclxuICAgICAgICAgIHhcclxuICAgICAgICBdLFxyXG4gICAgICAgIHk6IFtcclxuICAgICAgICAgIFswLDAsMCwwLDBdLFxyXG4gICAgICAgICAgWzAuMDAwLDAuMDMwLDAuMDEwLDAuMDAyLDAuMDAwXSxcclxuICAgICAgICAgIFswLjAwMCwwLjA2MCwwLjAxNywwLjAwNCwwLjAwMF0sXHJcbiAgICAgICAgICBbMC4wMDAsMC4yNTksMC40NDAsMC40NDYsMC40MjldLFxyXG4gICAgICAgICAgWzAsIDAuMjg3NywgMC42MzQ3LCAwLjgxNzQsIDEuMDAwMF0sXHJcbiAgICAgICAgICB5XHJcbiAgICAgICAgXVxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgeDogW1xyXG4gICAgICAgICAgWzAsMC4yODc3LDAuNjM0NywwLjgxNzQsMS4wMDAwXSxcclxuICAgICAgICAgIFswLjAwMCwwLjI4NiwwLjYzMiwwLjgxNSwwLjk5N10sXHJcbiAgICAgICAgICBbMC4wMDAsMC4yNzksMC42MjMsMC44MDYsMC45ODhdLFxyXG4gICAgICAgICAgWzAuMDAwLDAuMjMzLDAuNTYzLDAuNzQ2LDAuOTI3XSxcclxuICAgICAgICAgIFswLjAwMCwwLjE0NCwwLjQzMywwLjYxMywwLjc5Nl0sXHJcbiAgICAgICAgICBbMC4wMDAsMC4wNzAsMC4yODgsMC40NTUsMC42MjZdLFxyXG4gICAgICAgICAgWzAsMCwwLDAsMF0sXHJcbiAgICAgICAgICB4XHJcbiAgICAgICAgXSxcclxuICAgICAgICB5OiBbXHJcbiAgICAgICAgICBbMCwwLDAsMCwwXSxcclxuICAgICAgICAgIFswLjAwMCwwLjAzMCwwLjAxMCwwLjAwMiwwLjAwMF0sXHJcbiAgICAgICAgICBbMC4wMDAsMC4wNjAsMC4wMTcsMC4wMDQsMC4wMDBdLFxyXG4gICAgICAgICAgWzAuMDAwLDAuMTY4LDAuMjY5LDAuMjcwLDAuMjU1XSxcclxuICAgICAgICAgIFswLjAwMCwwLjI0NSwwLjQzNSwwLjQ1OCwwLjQ2MF0sXHJcbiAgICAgICAgICBbMC4wMDAsMC4yNzgsMC41NDQsMC42MTQsMC42NzNdLFxyXG4gICAgICAgICAgWzAsIDAuMjg3NywgMC42MzQ3LCAwLjgxNzQsIDEuMDAwMF0sXHJcbiAgICAgICAgICB5XHJcbiAgICAgICAgXVxyXG4gICAgICB9XHJcbiAgICBdO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGludGVycG9sYXRpb25Qb2ludHMsXHJcbiAgICAgIG9wZW5lZEludGVycG9sYXRpb25JbmRlY2VzLFxyXG4gICAgICBjbG9zZWRJbnRlcnBvbGF0aW9uSW5kZWNlcyxcclxuICAgICAgZmxhdEludGVycG9sYXRpb25JbmRlY2VzXHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL1NoZWV0QmxvY2suanMiLCJcclxuZXhwb3J0IGZ1bmN0aW9uIHByb3BzKCkge1xyXG4gIC8vIGNvbnN0IHByb3BzID0ge1xyXG4gIC8vICAgaGVpZ2h0LFxyXG4gIC8vICAgd2lkdGgsXHJcbiAgLy8gICBncmF2aXR5LFxyXG4gIC8vICAgaW5qZWN0b3IsXHJcbiAgLy8gICBjYWNoZWRQYWdlcyxcclxuICAvLyAgIHJlbmRlckluYWN0aXZlUGFnZXMsXHJcbiAgLy8gICByZW5kZXJXaGlsZUZsaXBwaW5nLFxyXG4gIC8vICAgcGFnZXNGb3JQcmVkaWN0aW5nLFxyXG4gIC8vICAgcHJlbG9hZFBhZ2VzLFxyXG4gIC8vICAgc2hlZXQ6IHtcclxuICAvLyAgICAgc3RhcnRWZWxvY2l0eSxcclxuICAvLyAgICAgY29ybmVyRGV2aWF0aW9uLFxyXG4gIC8vICAgICBmbGV4aWJpbGl0eSxcclxuICAvLyAgICAgZmxleGlibGVDb3JuZXIsXHJcbiAgLy8gICAgIGJlbmRpbmcsXHJcbiAgLy8gICAgIHdhdmUsXHJcbiAgLy8gICAgIHNoYXBlLFxyXG4gIC8vICAgICB3aWR0aFRleGVscyxcclxuICAvLyAgICAgaGVpZ2h0VGV4ZWxzLFxyXG4gIC8vICAgICBjb2xvcixcclxuICAvLyAgICAgc2lkZVRleHR1cmVcclxuICAvLyAgIH0sXHJcbiAgLy8gICBjb3Zlcjoge1xyXG4gIC8vICAgICAuLi5zaGVldCxcclxuICAvLyAgICAgcGFkZGluZyxcclxuICAvLyAgICAgYmluZGVyVGV4dHVyZSxcclxuICAvLyAgICAgZGVwdGgsXHJcbiAgLy8gICAgIG1hc3NcclxuICAvLyAgIH0sXHJcbiAgLy8gICBwYWdlOiB7XHJcbiAgLy8gICAgIC4uLnNoZWV0LFxyXG4gIC8vICAgICBkZXB0aCxcclxuICAvLyAgICAgbWFzc1xyXG4gIC8vICAgfVxyXG4gIC8vIH07XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBoZWlnaHQ6IDAuMjk3LFxyXG4gICAgd2lkdGg6IDAuMjEsXHJcbiAgICBncmF2aXR5OiAxLFxyXG4gICAgY2FjaGVkUGFnZXM6IDUwLFxyXG4gICAgcmVuZGVySW5hY3RpdmVQYWdlczogdHJ1ZSxcclxuICAgIHJlbmRlcldoaWxlRmxpcHBpbmc6IGZhbHNlLFxyXG4gICAgcGFnZXNGb3JQcmVkaWN0aW5nOiA1LFxyXG4gICAgcHJlbG9hZFBhZ2VzOiA1LFxyXG4gICAgc2hlZXQ6IHtcclxuICAgICAgc3RhcnRWZWxvY2l0eTogMC44LFxyXG4gICAgICBjb3JuZXJEZXZpYXRpb246IDAuMjUsXHJcbiAgICAgIGZsZXhpYmlsaXR5OiAxMCxcclxuICAgICAgZmxleGlibGVDb3JuZXI6IDAuNSxcclxuICAgICAgYmVuZGluZzogMTEsXHJcbiAgICAgIHdhdmU6IDAuNSxcclxuICAgICAgc2hhcGU6IDAsXHJcbiAgICAgIHdpZHRoVGV4ZWxzOiA1KjIxMCxcclxuICAgICAgaGVpZ2h0VGV4ZWxzOiA1KjI5NyxcclxuICAgICAgY29sb3I6IDB4RkZGRkZGXHJcbiAgICB9LFxyXG4gICAgY292ZXI6IHtcclxuICAgICAgYmluZGVyVGV4dHVyZTogJycsXHJcbiAgICAgIGRlcHRoOiAwLjAwMDMsXHJcbiAgICAgIHBhZGRpbmc6IDAsXHJcbiAgICAgIG1hc3M6IDAuMDAzXHJcbiAgICB9LFxyXG4gICAgcGFnZToge1xyXG4gICAgICBkZXB0aDogMC4wMDAxLFxyXG4gICAgICBtYXNzOiAwLjAwMVxyXG4gICAgfVxyXG4gIH07XHJcbn07XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL3Byb3BzL2Jvb2suanMiLCJpbXBvcnQge1RIUkVFfSBmcm9tICcuLi9saWJzJztcclxuXHJcblRIUkVFLkNTUzNET2JqZWN0ID0gY2xhc3MgQ1NTM0RPYmplY3QgZXh0ZW5kcyBUSFJFRS5PYmplY3QzRCB7XHJcbiAgY29uc3RydWN0b3IoZWxlbWVudD11bmRlZmluZWQpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICBcclxuICAgIGlmKGVsZW1lbnQpIHtcclxuICAgICAgdGhpcy5zZXQoZWxlbWVudCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXQoZWxlbWVudCkge1xyXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICBcdHRoaXMuZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcblxyXG4gIFx0dGhpcy5hZGRFdmVudExpc3RlbmVyKCdyZW1vdmVkJywgZnVuY3Rpb24oKSB7XHJcbiAgXHRcdGlmICh0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSAhPT0gbnVsbCkge1xyXG4gIFx0XHRcdHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7XHJcbiAgXHRcdH1cclxuICBcdH0pO1xyXG4gIH1cclxufTtcclxuXHJcblRIUkVFLkNTUzNEU3ByaXRlID0gY2xhc3MgQ1NTM0RTcHJpdGUgZXh0ZW5kcyBUSFJFRS5DU1MzRE9iamVjdCB7XHJcbiAgY29uc3RydWN0b3IoZWxlbWVudCkge1xyXG4gICAgc3VwZXIoZWxlbWVudCk7XHJcbiAgfVxyXG59O1xyXG5cclxuVEhSRUUuQ1NTM0RSZW5kZXJlciA9IGNsYXNzIENTUzNEUmVuZGVyZXIge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICBcdHZhciBfd2lkdGgsIF9oZWlnaHQ7XHJcbiAgXHR2YXIgX3dpZHRoSGFsZiwgX2hlaWdodEhhbGY7XHJcblxyXG4gIFx0dmFyIG1hdHJpeCA9IG5ldyBUSFJFRS5NYXRyaXg0KCk7XHJcblxyXG4gIFx0dmFyIGNhY2hlID0ge1xyXG4gIFx0XHRjYW1lcmE6IHsgZm92OiAwLCBzdHlsZTogJycgfSxcclxuICBcdFx0b2JqZWN0czoge31cclxuICBcdH07XHJcblxyXG4gIFx0dmFyIGRvbUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnZGl2Jyk7XHJcbiAgXHRkb21FbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XHJcblxyXG4gIFx0dGhpcy5kb21FbGVtZW50ID0gZG9tRWxlbWVudDtcclxuXHJcbiAgXHR2YXIgY2FtZXJhRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdkaXYnKTtcclxuXHJcbiAgXHRjYW1lcmFFbGVtZW50LnN0eWxlLldlYmtpdFRyYW5zZm9ybVN0eWxlID0gJ3ByZXNlcnZlLTNkJztcclxuICBcdGNhbWVyYUVsZW1lbnQuc3R5bGUuTW96VHJhbnNmb3JtU3R5bGUgPSAncHJlc2VydmUtM2QnO1xyXG4gIFx0Y2FtZXJhRWxlbWVudC5zdHlsZS50cmFuc2Zvcm1TdHlsZSA9ICdwcmVzZXJ2ZS0zZCc7XHJcblxyXG4gIFx0ZG9tRWxlbWVudC5hcHBlbmRDaGlsZCggY2FtZXJhRWxlbWVudCk7XHJcblxyXG4gIFx0dmFyIGlzSUUgPSAvVHJpZGVudC9pLnRlc3QoIG5hdmlnYXRvci51c2VyQWdlbnQpO1xyXG5cclxuICBcdHRoaXMuc2V0Q2xlYXJDb2xvciA9IGZ1bmN0aW9uICgpIHt9O1xyXG5cclxuICBcdHRoaXMuZ2V0U2l6ZSA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgXHRcdHJldHVybiB7XHJcbiAgXHRcdFx0d2lkdGg6IF93aWR0aCxcclxuICBcdFx0XHRoZWlnaHQ6IF9oZWlnaHRcclxuICBcdFx0fTtcclxuXHJcbiAgXHR9O1xyXG5cclxuICBcdHRoaXMuc2V0U2l6ZSA9IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQpIHtcclxuXHJcbiAgXHRcdF93aWR0aCA9IHdpZHRoO1xyXG4gIFx0XHRfaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gIFx0XHRfd2lkdGhIYWxmID0gX3dpZHRoIC8gMjtcclxuICBcdFx0X2hlaWdodEhhbGYgPSBfaGVpZ2h0IC8gMjtcclxuXHJcbiAgXHRcdGRvbUVsZW1lbnQuc3R5bGUud2lkdGggPSB3aWR0aCArICdweCc7XHJcbiAgXHRcdGRvbUVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4JztcclxuXHJcbiAgXHRcdGNhbWVyYUVsZW1lbnQuc3R5bGUud2lkdGggPSB3aWR0aCArICdweCc7XHJcbiAgXHRcdGNhbWVyYUVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4JztcclxuXHJcbiAgXHR9O1xyXG5cclxuICBcdGZ1bmN0aW9uIGVwc2lsb24oIHZhbHVlKSB7XHJcblxyXG4gIFx0XHRyZXR1cm4gTWF0aC5hYnMoIHZhbHVlKSA8IDFlLTEwID8gMCA6IHZhbHVlO1xyXG5cclxuICBcdH1cclxuXHJcbiAgXHRmdW5jdGlvbiBnZXRDYW1lcmFDU1NNYXRyaXgoIG1hdHJpeCkge1xyXG5cclxuICBcdFx0dmFyIGVsZW1lbnRzID0gbWF0cml4LmVsZW1lbnRzO1xyXG5cclxuICBcdFx0cmV0dXJuICdtYXRyaXgzZCgnICtcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMCBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggLSBlbGVtZW50c1sgMSBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDIgXSkgKyAnLCcgK1xyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAzIF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgNCBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggLSBlbGVtZW50c1sgNSBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDYgXSkgKyAnLCcgK1xyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyA3IF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgOCBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggLSBlbGVtZW50c1sgOSBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDEwIF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMTEgXSkgKyAnLCcgK1xyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAxMiBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggLSBlbGVtZW50c1sgMTMgXSkgKyAnLCcgK1xyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAxNCBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDE1IF0pICtcclxuICBcdFx0JyknO1xyXG5cclxuICBcdH1cclxuXHJcbiAgXHRmdW5jdGlvbiBnZXRPYmplY3RDU1NNYXRyaXgoIG1hdHJpeCwgY2FtZXJhQ1NTTWF0cml4KSB7XHJcblxyXG4gIFx0XHR2YXIgZWxlbWVudHMgPSBtYXRyaXguZWxlbWVudHM7XHJcbiAgXHRcdHZhciBtYXRyaXgzZCA9ICdtYXRyaXgzZCgnICtcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMCBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDEgXSkgKyAnLCcgK1xyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAyIF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMyBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggLSBlbGVtZW50c1sgNCBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggLSBlbGVtZW50c1sgNSBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggLSBlbGVtZW50c1sgNiBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggLSBlbGVtZW50c1sgNyBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDggXSkgKyAnLCcgK1xyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyA5IF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMTAgXSkgKyAnLCcgK1xyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAxMSBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDEyIF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMTMgXSkgKyAnLCcgK1xyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAxNCBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDE1IF0pICtcclxuICBcdFx0JyknO1xyXG5cclxuICBcdFx0aWYoaXNJRSkge1xyXG5cclxuICBcdFx0XHRyZXR1cm4gJ3RyYW5zbGF0ZSgtNTAlLC01MCUpJyArXHJcbiAgXHRcdFx0XHQndHJhbnNsYXRlKCcgKyBfd2lkdGhIYWxmICsgJ3B4LCcgKyBfaGVpZ2h0SGFsZiArICdweCknICtcclxuICBcdFx0XHRcdGNhbWVyYUNTU01hdHJpeCArXHJcbiAgXHRcdFx0XHRtYXRyaXgzZDtcclxuXHJcbiAgXHRcdH1cclxuXHJcbiAgXHRcdHJldHVybiAndHJhbnNsYXRlKC01MCUsLTUwJSknICsgbWF0cml4M2Q7XHJcblxyXG4gIFx0fVxyXG5cclxuICBcdGZ1bmN0aW9uIHJlbmRlck9iamVjdCggb2JqZWN0LCBjYW1lcmEsIGNhbWVyYUNTU01hdHJpeCkge1xyXG5cclxuICBcdFx0aWYob2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuQ1NTM0RPYmplY3QpIHtcclxuXHJcbiAgXHRcdFx0dmFyIHN0eWxlO1xyXG5cclxuICBcdFx0XHRpZihvYmplY3QgaW5zdGFuY2VvZiBUSFJFRS5DU1MzRFNwcml0ZSkge1xyXG4gIFx0XHRcdFx0bWF0cml4LmNvcHkoIGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UpO1xyXG4gIFx0XHRcdFx0bWF0cml4LnRyYW5zcG9zZSgpO1xyXG4gIFx0XHRcdFx0bWF0cml4LmNvcHlQb3NpdGlvbiggb2JqZWN0Lm1hdHJpeFdvcmxkKTtcclxuICBcdFx0XHRcdG1hdHJpeC5zY2FsZSggb2JqZWN0LnNjYWxlKTtcclxuXHJcbiAgXHRcdFx0XHRtYXRyaXguZWxlbWVudHNbIDMgXSA9IDA7XHJcbiAgXHRcdFx0XHRtYXRyaXguZWxlbWVudHNbIDcgXSA9IDA7XHJcbiAgXHRcdFx0XHRtYXRyaXguZWxlbWVudHNbIDExIF0gPSAwO1xyXG4gIFx0XHRcdFx0bWF0cml4LmVsZW1lbnRzWyAxNSBdID0gMTtcclxuXHJcbiAgXHRcdFx0XHRzdHlsZSA9IGdldE9iamVjdENTU01hdHJpeCggbWF0cml4LCBjYW1lcmFDU1NNYXRyaXgpO1xyXG5cclxuICBcdFx0XHR9IGVsc2Uge1xyXG5cclxuICBcdFx0XHRcdHN0eWxlID0gZ2V0T2JqZWN0Q1NTTWF0cml4KCBvYmplY3QubWF0cml4V29ybGQsIGNhbWVyYUNTU01hdHJpeCk7XHJcblxyXG4gIFx0XHRcdH1cclxuXHJcbiAgXHRcdFx0dmFyIGVsZW1lbnQgPSBvYmplY3QuZWxlbWVudDtcclxuICBcdFx0XHR2YXIgY2FjaGVkU3R5bGUgPSBjYWNoZS5vYmplY3RzWyBvYmplY3QuaWQgXSAmJiBjYWNoZS5vYmplY3RzWyBvYmplY3QuaWQgXS5zdHlsZTtcclxuXHJcbiAgXHRcdFx0aWYoY2FjaGVkU3R5bGUgPT09IHVuZGVmaW5lZCB8fCBjYWNoZWRTdHlsZSAhPT0gc3R5bGUpIHtcclxuICBcdFx0XHRcdGVsZW1lbnQuc3R5bGUuV2Via2l0VHJhbnNmb3JtID0gc3R5bGU7XHJcbiAgXHRcdFx0XHRlbGVtZW50LnN0eWxlLk1velRyYW5zZm9ybSA9IHN0eWxlO1xyXG4gIFx0XHRcdFx0ZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBzdHlsZTtcclxuXHJcbiAgXHRcdFx0XHRjYWNoZS5vYmplY3RzWyBvYmplY3QuaWQgXSA9IHsgc3R5bGU6IHN0eWxlIH07XHJcbiAgXHRcdFx0XHRpZihpc0lFKSB7XHJcbiAgXHRcdFx0XHRcdGNhY2hlLm9iamVjdHNbIG9iamVjdC5pZCBdLmRpc3RhbmNlVG9DYW1lcmFTcXVhcmVkID0gZ2V0RGlzdGFuY2VUb1NxdWFyZWQoIGNhbWVyYSwgb2JqZWN0KTtcclxuICBcdFx0XHRcdH1cclxuICBcdFx0XHR9XHJcblxyXG4gIFx0XHRcdGlmKGVsZW1lbnQucGFyZW50Tm9kZSAhPT0gY2FtZXJhRWxlbWVudCkge1xyXG4gIFx0XHRcdFx0Y2FtZXJhRWxlbWVudC5hcHBlbmRDaGlsZCggZWxlbWVudCk7XHJcbiAgXHRcdFx0fVxyXG4gIFx0XHR9XHJcblxyXG4gIFx0XHRmb3IodmFyIGkgPSAwLCBsID0gb2JqZWN0LmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKyspIHtcclxuXHJcbiAgXHRcdFx0cmVuZGVyT2JqZWN0KCBvYmplY3QuY2hpbGRyZW5bIGkgXSwgY2FtZXJhLCBjYW1lcmFDU1NNYXRyaXgpO1xyXG5cclxuICBcdFx0fVxyXG5cclxuICBcdH1cclxuXHJcbiAgXHR2YXIgZ2V0RGlzdGFuY2VUb1NxdWFyZWQgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gIFx0XHR2YXIgYSA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XHJcbiAgXHRcdHZhciBiID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuXHJcbiAgXHRcdHJldHVybiBmdW5jdGlvbihvYmplY3QxLCBvYmplY3QyKSB7XHJcblxyXG4gIFx0XHRcdGEuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBvYmplY3QxLm1hdHJpeFdvcmxkKTtcclxuICBcdFx0XHRiLnNldEZyb21NYXRyaXhQb3NpdGlvbiggb2JqZWN0Mi5tYXRyaXhXb3JsZCk7XHJcblxyXG4gIFx0XHRcdHJldHVybiBhLmRpc3RhbmNlVG9TcXVhcmVkKCBiKTtcclxuXHJcbiAgXHRcdH07XHJcblxyXG4gIFx0fSgpO1xyXG5cclxuICBcdGZ1bmN0aW9uIHpPcmRlciggc2NlbmUpIHtcclxuXHJcbiAgXHRcdHZhciBvcmRlciA9IE9iamVjdC5rZXlzKCBjYWNoZS5vYmplY3RzKS5zb3J0KCBmdW5jdGlvbihhLCBiKSB7XHJcblxyXG4gIFx0XHRcdHJldHVybiBjYWNoZS5vYmplY3RzWyBhIF0uZGlzdGFuY2VUb0NhbWVyYVNxdWFyZWQgLSBjYWNoZS5vYmplY3RzWyBiIF0uZGlzdGFuY2VUb0NhbWVyYVNxdWFyZWQ7XHJcblxyXG4gIFx0XHR9KTtcclxuICBcdFx0dmFyIHpNYXggPSBvcmRlci5sZW5ndGg7XHJcblxyXG4gIFx0XHRzY2VuZS50cmF2ZXJzZSggZnVuY3Rpb24ob2JqZWN0KSB7XHJcblxyXG4gIFx0XHRcdHZhciBpbmRleCA9IG9yZGVyLmluZGV4T2YoIG9iamVjdC5pZCArICcnKTtcclxuXHJcbiAgXHRcdFx0aWYoaW5kZXggIT09IC0gMSkge1xyXG5cclxuICBcdFx0XHRcdG9iamVjdC5lbGVtZW50LnN0eWxlLnpJbmRleCA9IHpNYXggLSBpbmRleDtcclxuXHJcbiAgXHRcdFx0fVxyXG5cclxuICBcdFx0fSk7XHJcblxyXG4gIFx0fVxyXG5cclxuICBcdHRoaXMucmVuZGVyID0gZnVuY3Rpb24oc2NlbmUsIGNhbWVyYSkge1xyXG5cclxuICBcdFx0dmFyIGZvdiA9IGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyA1IF0gKiBfaGVpZ2h0SGFsZjtcclxuXHJcbiAgXHRcdGlmKGNhY2hlLmNhbWVyYS5mb3YgIT09IGZvdikge1xyXG5cclxuICBcdFx0XHRkb21FbGVtZW50LnN0eWxlLldlYmtpdFBlcnNwZWN0aXZlID0gZm92ICsgJ3B4JztcclxuICBcdFx0XHRkb21FbGVtZW50LnN0eWxlLk1velBlcnNwZWN0aXZlID0gZm92ICsgJ3B4JztcclxuICBcdFx0XHRkb21FbGVtZW50LnN0eWxlLnBlcnNwZWN0aXZlID0gZm92ICsgJ3B4JztcclxuXHJcbiAgXHRcdFx0Y2FjaGUuY2FtZXJhLmZvdiA9IGZvdjtcclxuXHJcbiAgXHRcdH1cclxuXHJcbiAgXHRcdHNjZW5lLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XHJcblxyXG4gIFx0XHRpZihjYW1lcmEucGFyZW50ID09PSBudWxsKSBjYW1lcmEudXBkYXRlTWF0cml4V29ybGQoKTtcclxuXHJcbiAgXHRcdHZhciBjYW1lcmFDU1NNYXRyaXggPSAndHJhbnNsYXRlWignICsgZm92ICsgJ3B4KScgK1xyXG4gIFx0XHRcdGdldENhbWVyYUNTU01hdHJpeCggY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSk7XHJcblxyXG4gIFx0XHR2YXIgc3R5bGUgPSBjYW1lcmFDU1NNYXRyaXggK1xyXG4gIFx0XHRcdCd0cmFuc2xhdGUoJyArIF93aWR0aEhhbGYgKyAncHgsJyArIF9oZWlnaHRIYWxmICsgJ3B4KSc7XHJcblxyXG4gIFx0XHRpZihjYWNoZS5jYW1lcmEuc3R5bGUgIT09IHN0eWxlICYmICEgaXNJRSkge1xyXG5cclxuICBcdFx0XHRjYW1lcmFFbGVtZW50LnN0eWxlLldlYmtpdFRyYW5zZm9ybSA9IHN0eWxlO1xyXG4gIFx0XHRcdGNhbWVyYUVsZW1lbnQuc3R5bGUuTW96VHJhbnNmb3JtID0gc3R5bGU7XHJcbiAgXHRcdFx0Y2FtZXJhRWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBzdHlsZTtcclxuXHJcbiAgXHRcdFx0Y2FjaGUuY2FtZXJhLnN0eWxlID0gc3R5bGU7XHJcblxyXG4gIFx0XHR9XHJcblxyXG4gIFx0XHRyZW5kZXJPYmplY3QoIHNjZW5lLCBjYW1lcmEsIGNhbWVyYUNTU01hdHJpeCk7XHJcblxyXG4gIFx0XHRpZihpc0lFKSB7XHJcblxyXG4gIFx0XHRcdC8vIElFMTAgYW5kIDExIGRvZXMgbm90IHN1cHBvcnQgJ3ByZXNlcnZlLTNkJy5cclxuICBcdFx0XHQvLyBUaHVzLCB6LW9yZGVyIGluIDNEIHdpbGwgbm90IHdvcmsuXHJcbiAgXHRcdFx0Ly8gV2UgaGF2ZSB0byBjYWxjIHotb3JkZXIgbWFudWFsbHkgYW5kIHNldCBDU1Mgei1pbmRleCBmb3IgSUUuXHJcbiAgXHRcdFx0Ly8gRllJOiB6LWluZGV4IGNhbid0IGhhbmRsZSBvYmplY3QgaW50ZXJzZWN0aW9uXHJcbiAgXHRcdFx0ek9yZGVyKCBzY2VuZSk7XHJcblxyXG4gIFx0XHR9XHJcblxyXG4gIFx0fTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUSFJFRS5DU1MzRFJlbmRlcmVyO1xyXG5cclxuY29uc3QgX0NTUzNET2JqZWN0ID0gVEhSRUUuQ1NTM0RPYmplY3QsIF9DU1MzRFNwcml0ZSA9IFRIUkVFLkNTUzNEU3ByaXRlO1xyXG5leHBvcnQge1xyXG4gIF9DU1MzRE9iamVjdCBhcyBDU1MzRE9iamVjdCxcclxuICBfQ1NTM0RTcHJpdGUgYXMgQ1NTM0RTcHJpdGVcclxufTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvQ1NTM0RSZW5kZXJlci5qcyIsImltcG9ydCB7VEhSRUUsICR9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQge0NTUzNET2JqZWN0fSBmcm9tICcuL0NTUzNEUmVuZGVyZXInO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ1NTTGF5ZXIgZXh0ZW5kcyBDU1MzRE9iamVjdCB7XHJcblxyXG4gIHN0YXRpYyBkZWxheTtcclxuICBzdGF0aWMgc3R5bGU7XHJcbiAgc3RhdGljIGluaXQoZG9jLCBkZWxheT0xNTApIHtcclxuICAgIENTU0xheWVyLmRlbGF5ID0gZGVsYXk7XHJcbiAgICBDU1NMYXllci5zdHlsZSA9ICQoYDxzdHlsZSB0eXBlPXRleHQvY3NzPlxyXG4gICAgICAuY3NzLWxheWVyIHtcclxuICAgIFx0XHRvcGFjaXR5OiAxO1xyXG4gICAgXHRcdHRyYW5zaXRpb246IG9wYWNpdHkgJHtkZWxheX1tcyBlYXNlLW91dDtcclxuICAgICAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xyXG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICBcdH1cclxuICAgIFx0LmNzcy1sYXllci5oaWRkZW4ge1xyXG4gICAgXHRcdHRyYW5zaXRpb246IG9wYWNpdHkgJHtkZWxheX1tcyBlYXNlLWluLCB2aXNpYmlsaXR5ICR7ZGVsYXl9bXMgc3RlcC1lbmQ7XHJcbiAgICBcdFx0b3BhY2l0eTogMDtcclxuICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XHJcbiAgICAgIH1cclxuICAgIDwvc3R5bGU+YCkuYXBwZW5kVG8oZG9jLmhlYWQpO1xyXG4gIH1cclxuICBzdGF0aWMgZGlzcG9zZSgpIHtcclxuICAgIENTU0xheWVyLnN0eWxlLnJlbW92ZSgpO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3Iod2lkdGgsIGhlaWdodCwgd2lkdGhQeHM9MTAyNCkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICB0aGlzLmpDb250YWluZXIgPSAkKCc8ZGl2IGNsYXNzPVwiaGlkZGVuIGNzcy1sYXllclwiPjwvZGl2PicpO1xyXG4gIFx0Y29uc3QgaGVpZ2h0UHhzID0gaGVpZ2h0L3dpZHRoKndpZHRoUHhzO1xyXG4gICAgdGhpcy5qQ29udGFpbmVyLndpZHRoKHdpZHRoUHhzKS5oZWlnaHQoaGVpZ2h0UHhzKTtcclxuICBcdHRoaXMuc2NhbGUueCAvPSB3aWR0aFB4cy93aWR0aDtcclxuICBcdHRoaXMuc2NhbGUueSAvPSB3aWR0aFB4cy93aWR0aDtcclxuXHJcbiAgICB0aGlzLnNldERhdGEoKTtcclxuICAgIHRoaXMuc2V0KHRoaXMuakNvbnRhaW5lclswXSk7XHJcbiAgfVxyXG5cclxuICBjYWxsSW50ZXJuYWwobmFtZSkge1xyXG4gICAgaWYodGhpcy5vYmplY3QgJiYgdGhpcy5vYmplY3RbbmFtZV0pIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICB0aGlzLm9iamVjdFtuYW1lXSgpO1xyXG4gICAgICB9XHJcbiAgICAgIGNhdGNoKGUpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgdGhpcy5jbGVhckludGVybmFscygpO1xyXG4gIH1cclxuXHJcbiAgY2xlYXJJbnRlcm5hbHMoKSB7XHJcbiAgICB0aGlzLmNhbGxJbnRlcm5hbCgnZGlzcG9zZScpO1xyXG4gICAgIXRoaXMuY3NzIHx8IHRoaXMuY3NzLnJlbW92ZSgpO1xyXG4gICAgIXRoaXMuaHRtbCB8fCB0aGlzLmh0bWwucmVtb3ZlKCk7XHJcbiAgfVxyXG5cclxuICBzZXREYXRhKGNzcz0nJywgaHRtbD0nJywganM9JycpIHtcclxuICAgIHRoaXMuY2xlYXJJbnRlcm5hbHMoKTtcclxuXHJcbiAgICB0aGlzLmNzcyA9ICQoYDxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj4ke2Nzc308L3N0eWxlPmApLmFwcGVuZFRvKHRoaXMuakNvbnRhaW5lcik7XHJcbiAgICB0aGlzLmh0bWwgPSAkKGh0bWwpLmFwcGVuZFRvKHRoaXMuakNvbnRhaW5lcik7XHJcbiAgICBjb25zdCBpbml0ID0gZXZhbChqcyk7XHJcbiAgICBpZihpbml0KSB7XHJcbiAgICAgIHRoaXMub2JqZWN0ID0gaW5pdCh0aGlzLmpDb250YWluZXIpIHx8IHt9O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcGVuZGVkQ2FsbChjbGIpIHtcclxuICAgIGNvbnN0IHRpbWVzdGFtcCA9IHRoaXMudGltZXN0YW1wID0gRGF0ZS5ub3coKTtcclxuICAgIHNldFRpbWVvdXQoKCk9PiB7XHJcbiAgICAgIGlmKHRpbWVzdGFtcD09PXRoaXMudGltZXN0YW1wKSB7XHJcbiAgICAgICAgY2xiKCk7XHJcbiAgICAgIH1cclxuICAgIH0sIENTU0xheWVyLmRlbGF5KTtcclxuICB9XHJcblxyXG4gIGlzSGlkZGVuKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuakNvbnRhaW5lci5oYXNDbGFzcygnaGlkZGVuJyk7XHJcbiAgfVxyXG5cclxuICBoaWRlKCkge1xyXG4gICAgbGV0IHJlcztcclxuICAgIGlmKCF0aGlzLmlzSGlkZGVuKCkpIHtcclxuICAgICAgdGhpcy5qQ29udGFpbmVyLmFkZENsYXNzKCdoaWRkZW4nKTtcclxuICAgICAgdGhpcy5jYWxsSW50ZXJuYWwoJ2hpZGUnKTtcclxuICAgICAgcmVzID0gbmV3IFByb21pc2UoKHJlc29sdmUpPT4ge1xyXG4gICAgICAgIHRoaXMucGVuZGVkQ2FsbCgoKT0+IHtcclxuICAgICAgICAgIHRoaXMuY2FsbEludGVybmFsKCdoaWRkZW4nKTtcclxuICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgcmVzID0gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgc2hvdygpIHtcclxuICAgIGxldCByZXM7XHJcbiAgICBpZih0aGlzLmlzSGlkZGVuKCkpIHtcclxuICAgICAgdGhpcy5qQ29udGFpbmVyLnJlbW92ZUNsYXNzKCdoaWRkZW4nKTtcclxuICAgICAgdGhpcy5jYWxsSW50ZXJuYWwoJ3Nob3cnKTtcclxuICAgICAgcmVzID0gbmV3IFByb21pc2UoKHJlc29sdmUpPT4ge1xyXG4gICAgICAgIHRoaXMucGVuZGVkQ2FsbCgoKT0+IHtcclxuICAgICAgICAgIHRoaXMuY2FsbEludGVybmFsKCdzaG93bicpO1xyXG4gICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICByZXMgPSBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9DU1NMYXllci5qcyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIENhY2hlIHtcclxuXHJcbiAgY29uc3RydWN0b3IobWF4U2l6ZT1JbmZpbml0eSwgc2l6ZW9mPUNhY2hlLmNvdW50U2l6ZW9mKSB7XHJcbiAgICB0aGlzLm9zID0gbmV3IE1hcCgpO1xyXG4gICAgdGhpcy5zaXplb2YgPSBzaXplb2Y7XHJcbiAgICB0aGlzLm1heFNpemUgPSBtYXhTaXplO1xyXG4gICAgdGhpcy5zaXplID0gMDtcclxuICB9XHJcblxyXG4gIGZvckVhY2goY2xiKSB7XHJcbiAgICB0aGlzLm9zLmZvckVhY2goKHYsIGspPT4gY2xiKFtrLHZdKSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY291bnRTaXplb2YodmFsdWUpIHtcclxuICAgIHJldHVybiAxO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlKGspIHtcclxuICAgIGxldCByZXMgPSBmYWxzZTtcclxuICAgIGNvbnN0IHYgPSB0aGlzLm9zLmdldChrKTtcclxuICAgIGlmKCF2LmxvY2tlZCB8fCAhdi5sb2NrZWQoaykpIHtcclxuICAgICAgdGhpcy5zaXplIC09IHRoaXMuc2l6ZW9mKHYpO1xyXG4gICAgICBpZih2LmRpc3Bvc2UpIHtcclxuICAgICAgICB2LmRpc3Bvc2UoKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLm9zLmRlbGV0ZShrKTtcclxuICAgICAgcmVzID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxuICBmcmVlU3BhY2UoKSB7XHJcbiAgICBjb25zdCBhcnIgPSBbXTtcclxuICAgIGZvcihsZXQgcCBvZiB0aGlzLm9zKSB7XHJcbiAgICAgIGFyci5wdXNoKHt0aW1lc3RhbXA6IHBbMV0udGltZXN0YW1wLCBrZXk6IHBbMF19KTtcclxuICAgIH1cclxuICAgIGFyci5zb3J0KChhLCBiKT0+IGEudGltZXN0YW1wLWIudGltZXN0YW1wKTtcclxuICAgIGZvcihsZXQgaT0wOyBpPGFyci5sZW5ndGggJiYgdGhpcy5zaXplPjMqdGhpcy5tYXhTaXplLzQ7ICsraSkge1xyXG4gICAgICB0aGlzLnJlbW92ZShhcnJbaV0ua2V5KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICBjb25zdCBhcnIgPSBbXTtcclxuICAgIGZvcihsZXQgcCBvZiB0aGlzLm9zKSB7XHJcbiAgICAgIGFyci5wdXNoKHt2OiBwWzFdLCBrOiBwWzBdfSk7XHJcbiAgICB9XHJcbiAgICBmb3IobGV0IG8gb2YgYXJyKSB7XHJcbiAgICAgIGlmKG8udi5kaXNwb3NlKSB7XHJcbiAgICAgICAgby52LmRpc3Bvc2UoKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLm9zLmRlbGV0ZShvLmspO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIHJlY3Vyc2lvblNpemVvZih2YWx1ZSkge1xyXG4gICAgbGV0IHNpemUgPSAwO1xyXG4gICAgaWYodmFsdWUpIHtcclxuICAgICAgKytzaXplO1xyXG4gICAgICBjb25zdCBsZW4gPSB2YWx1ZS5sZW5ndGg7XHJcbiAgICAgIGlmKGxlbj09PXVuZGVmaW5lZCkge1xyXG4gICAgICAgIGZvciAobGV0IHAgaW4gdmFsdWUpIHtcclxuICAgICAgICAgIGlmKHZhbHVlLmhhc093blByb3BlcnR5KHApKSB7XHJcbiAgICAgICAgICAgIHNpemUrPUNhY2hlLnJlY3Vyc2lvblNpemVvZih2YWx1ZVtwXSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHNpemUrPWxlblxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc2l6ZTtcclxuICB9XHJcblxyXG4gIGdldFRpbWVzdGFtcCgpIHtcclxuICAgIHJldHVybiBEYXRlLm5vdygpO1xyXG4gIH1cclxuXHJcblxyXG4gIGdldChrZXkpIHtcclxuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5vcy5nZXQoa2V5KTtcclxuICAgIGlmKHZhbHVlKSB7XHJcbiAgICAgIHZhbHVlLnRpbWVzdGFtcCA9IHRoaXMuZ2V0VGltZXN0YW1wKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbiAgfVxyXG5cclxuICBwdXQoa2V5LCB2YWx1ZSkge1xyXG4gICAgdmFsdWUudGltZXN0YW1wID0gdGhpcy5nZXRUaW1lc3RhbXAoKTtcclxuICAgIHRoaXMub3Muc2V0KGtleSwgdmFsdWUpO1xyXG4gICAgdGhpcy5zaXplKz10aGlzLnNpemVvZih2YWx1ZSk7XHJcbiAgICBpZih0aGlzLnNpemU+dGhpcy5tYXhTaXplKSB7XHJcbiAgICAgIHRoaXMuZnJlZVNwYWNlKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0NhY2hlLmpzIiwiaW1wb3J0IHtUSFJFRX0gZnJvbSAnLi4vbGlicyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb250cm9sbGVyIGV4dGVuZHMgVEhSRUUuRXZlbnREaXNwYXRjaGVyIHtcclxuXHJcbiAgaGFuZGxlRGVmYXVsdChpZCwgZSwgZGF0YSkge1xyXG4gICAgLy9jb25zb2xlLmxvZyhpZCsnLScrZS50eXBlKyctJytkYXRhKTtcclxuICB9XHJcblxyXG4gIGRpc3BhdGNoQXN5bmMoZSkge1xyXG4gICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKT0+IHRoaXMuZGlzcGF0Y2hFdmVudChlKSk7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG5cclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0NvbnRyb2xsZXIuanMiLCJpbXBvcnQgRXZlbnRDb252ZXJ0ZXIgZnJvbSAnLi9FdmVudENvbnZlcnRlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDdXN0b21FdmVudENvbnZlcnRlciBleHRlbmRzIEV2ZW50Q29udmVydGVyIHtcclxuXHJcbiAgLy8gY3VzdG9tXHJcbiAgLy8gdGVzdEludGVyc2VjdGlvbihlLCBkYXRhKTtcclxuICAvLyBjdXN0b20ub2JqZWN0XHJcbiAgLy8gdGVzdChvYmplY3QpO1xyXG5cclxuICBjb25zdHJ1Y3Rvcih3bmQsIGRvYywgY3VzdG9tVGVzdD0oKT0+IGZhbHNlLCBlRG9jKSB7XHJcbiAgICBzdXBlcih3bmQsIGRvYyk7XHJcblxyXG4gICAgdGhpcy5lRG9jID0gZURvYztcclxuICAgIHRoaXMuY3VzdG9tVGVzdCA9IGN1c3RvbVRlc3Q7XHJcbiAgICB0aGlzLmN1c3RvbXMgPSBbXTtcclxuICB9XHJcblxyXG4gIHRlc3Qob2JqZWN0MSwgb2JqZWN0Mikge1xyXG4gICAgcmV0dXJuIG9iamVjdDEgJiYgb2JqZWN0Mj8gdGhpcy5jdXN0b21UZXN0KG9iamVjdDEsIG9iamVjdDIpOiBmYWxzZTtcclxuICB9XHJcblxyXG4gIGdldENhbGxiYWNrKG9iamVjdCkge1xyXG4gICAgcmV0dXJuIG9iamVjdC50YXJnZXQuY2FsbGJhY2s7XHJcbiAgfVxyXG5cclxuICBhZGRDdXN0b20oY3VzdG9tKSB7XHJcbiAgICB0aGlzLmN1c3RvbXMucHVzaChjdXN0b20pO1xyXG4gIH1cclxuXHJcbiAgZ2V0T2JqZWN0KGUsIGRhdGEpIHtcclxuICAgIGxldCBvYmplY3Q7XHJcbiAgICBpZihkYXRhLmRvYz09PXRoaXMuZURvYykge1xyXG4gICAgICBmb3IobGV0IGN1c3RvbSBvZiB0aGlzLmN1c3RvbXMpIHtcclxuICAgICAgICBvYmplY3QgPSBjdXN0b20udGVzdEludGVyc2VjdGlvbihlLCBkYXRhKTtcclxuICAgICAgICBpZihvYmplY3QpIHtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9iamVjdDtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0N1c3RvbUV2ZW50Q29udmVydGVyLmpzIiwiaW1wb3J0IHskfSBmcm9tICcuLi9saWJzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV2ZW50Q29udmVydGVyIHtcclxuXHJcbiAgLy8gdmlydHVhbHNcclxuICAvLyBnZXRPYmplY3QoZSwgZGF0YSk7XHJcbiAgLy8gZ2V0Q2FsbGJhY2sob2JqZWN0KTtcclxuICAvLyB0ZXN0KG9iamVjdDEsIG9iamVjdDEpO1xyXG5cclxuICBjb25zdHJ1Y3Rvcih3bmQsIGRvYykge1xyXG4gICAgdGhpcy53bmQgPSB3bmQ7XHJcbiAgICB0aGlzLmRvYyA9IGRvYztcclxuICAgIHRoaXMuZW5hYmxlZCA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBzZXRFbmFibGUodmwpIHtcclxuICAgIGlmKCF2bCkge1xyXG4gICAgICBpZih0aGlzLmNhcE9iamVjdCkge1xyXG4gICAgICAgIHRoaXMubm90aWZ5KHRoaXMuY2FwT2JqZWN0LCAkLkV2ZW50KCdtb3VzZXVwJyksICdtb3VzZXVwJyk7XHJcbiAgICAgICAgdGhpcy5jYXBPYmplY3QgPSB1bmRlZmluZWQ7XHJcbiAgICAgIH1cclxuICAgICAgaWYodGhpcy5ob3ZPYmplY3QpIHtcclxuICAgICAgICB0aGlzLm5vdGlmeSh0aGlzLmhvdk9iamVjdCwgJC5FdmVudCgnbW91c2VvdXQnKSwgJ21vdXNlb3V0Jyk7XHJcbiAgICAgICAgdGhpcy5ob3ZPYmplY3QgPSB1bmRlZmluZWQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMuZW5hYmxlZCA9IHZsO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q2FsbGJhY2sob2JqZWN0KSB7XHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gIH1cclxuXHJcbiAgbm90aWZ5KG9iamVjdCwgZSwgdHlwZSkge1xyXG4gICAgY29uc3QgY2FsbGJhY2sgPSB0aGlzLmdldENhbGxiYWNrKG9iamVjdCk7XHJcbiAgICBpZihjYWxsYmFjaykge1xyXG4gICAgICBjb25zdCBwcm9wcyA9IHtcclxuICAgICAgICAuLi5lLFxyXG4gICAgICAgIHR5cGUsXHJcbiAgICAgICAgdmlldzogdGhpcy53bmRcclxuICAgICAgfTtcclxuICAgICAgY29uc3QgakUgPSAkLkV2ZW50KHR5cGUsIHByb3BzKTtcclxuICAgICAgakUudGltZVN0YW1wID0gZS50aW1lU3RhbXA7XHJcbiAgICAgIGNhbGxiYWNrKGpFLCBvYmplY3QpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29udmVydChlLCBkYXRhKSB7XHJcbiAgICBpZighdGhpcy5lbmFibGVkKSByZXR1cm47XHJcblxyXG4gICAgY29uc3Qgb2JqZWN0ID0gdGhpcy5nZXRPYmplY3QoZSwgZGF0YSk7XHJcbiAgICBsZXQgbm90aWZ5ID0gdHJ1ZTtcclxuICAgIHN3aXRjaChlLnR5cGUpIHtcclxuICAgICAgY2FzZSAnbW91c2Vkb3duJzoge1xyXG4gICAgICAgIGlmKHRoaXMuY2FwT2JqZWN0KSB7XHJcbiAgICAgICAgICB0aGlzLm5vdGlmeSh0aGlzLmNhcE9iamVjdCwgZSwgJ21vdXNldXAnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jYXBPYmplY3QgPSBvYmplY3Q7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnbW91c2V1cCc6IHtcclxuICAgICAgICBpZih0aGlzLmNhcE9iamVjdCAmJiB0aGlzLmNhcE9iamVjdCAhPT0gb2JqZWN0KSB7XHJcbiAgICAgICAgICB0aGlzLm5vdGlmeSh0aGlzLmNhcE9iamVjdCwgZSwgJ21vdXNldXAnKTtcclxuICAgICAgICAgIG5vdGlmeSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnRpbWVTdGFtcCA9IGUudGltZVN0YW1wO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ2NsaWNrJzoge1xyXG4gICAgICAgIG5vdGlmeSA9IHRoaXMudGVzdCh0aGlzLmNhcE9iamVjdCwgb2JqZWN0KSAmJiBlLnRpbWVTdGFtcCA9PT0gdGhpcy50aW1lU3RhbXA7XHJcbiAgICAgICAgdGhpcy5jYXBPYmplY3QgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnbW91c2VlbnRlcic6XHJcbiAgICAgIGNhc2UgJ21vdXNlb3Zlcic6XHJcbiAgICAgIGNhc2UgJ21vdXNlbW92ZSc6IHtcclxuICAgICAgICBpZighdGhpcy50ZXN0KHRoaXMuaG92T2JqZWN0LCBvYmplY3QpICYmIHRoaXMuaG92T2JqZWN0KSB7XHJcbiAgICAgICAgICB0aGlzLm5vdGlmeSh0aGlzLmhvdk9iamVjdCwgZSwgJ21vdXNlb3V0Jyk7XHJcbiAgICAgICAgICB0aGlzLmhvdk9iamVjdCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoIXRoaXMuaG92T2JqZWN0ICYmIG9iamVjdCkge1xyXG4gICAgICAgICAgdGhpcy5ub3RpZnkob2JqZWN0LCBlLCAnbW91c2VvdmVyJyk7XHJcbiAgICAgICAgICB0aGlzLmhvdk9iamVjdCA9IG9iamVjdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbm90aWZ5ID0gZS50eXBlID09PSAnbW91c2Vtb3ZlJztcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdtb3VzZWxlYXZlJzpcclxuICAgICAgY2FzZSAnbW91c2VvdXQnOiB7XHJcbiAgICAgICAgaWYodGhpcy5ob3ZPYmplY3QpIHtcclxuICAgICAgICAgIHRoaXMubm90aWZ5KHRoaXMuaG92T2JqZWN0LCBlLCAnbW91c2VvdXQnKTtcclxuICAgICAgICAgIHRoaXMuaG92T2JqZWN0ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBub3RpZnkgPSBmYWxzZTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYobm90aWZ5ICYmIG9iamVjdCkge1xyXG4gICAgICB0aGlzLm5vdGlmeShvYmplY3QsIGUsIGUudHlwZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9FdmVudENvbnZlcnRlci5qcyIsImltcG9ydCBVdGlscyBmcm9tICcuL1V0aWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpbmRlciB7XHJcblxyXG4gIHN0YXRpYyBERUxJTUlURVIgPSAnICc7XHJcblxyXG4gIHN0YXRpYyBpc0RlbGltZXRyKHMpIHtcclxuICAgIHJldHVybiBzPT09RmluZGVyLkRFTElNSVRFUjtcclxuICB9XHJcblxyXG4gIG1lcmdlKCkge1xyXG4gICAgY29uc3QgYXMgPSBbXSwgbWFwID0gW10sIHN0cnMgPSB0aGlzLnN0cnM7XHJcbiAgICBsZXQgcCA9IDA7XHJcbiAgICBmb3IobGV0IGk9MDsgaTxzdHJzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIGlmKHN0cnNbaV0ubGVuZ3RoKSB7XHJcbiAgICAgICAgbWFwLnB1c2goe1xyXG4gICAgICAgICAgYmFzZTogaSxcclxuICAgICAgICAgIG9mZnNldDogcFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGFzLnB1c2goc3Ryc1tpXSk7XHJcbiAgICAgICAgcCArPSBzdHJzW2ldLmxlbmd0aDtcclxuICAgICAgICBpZihpPHN0cnMubGVuZ3RoLTEgJiYgIUZpbmRlci5pc0RlbGltZXRyKHN0cnNbaV0uY2hhckF0KHN0cnNbaV0ubGVuZ3RoLTEpKSAmJiAhRmluZGVyLmlzRGVsaW1ldHIoc3Ryc1tpKzFdLmNoYXJBdCgwKSkpIHtcclxuICAgICAgICAgIGFzLnB1c2goRmluZGVyLkRFTElNSVRFUik7XHJcbiAgICAgICAgICArK3A7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzLm1hcCA9IG1hcDtcclxuICAgIHRoaXMuc3RyID0gYXMuam9pbignJyk7XHJcbiAgfVxyXG5cclxuICBhZGRIaXRzKHApIHtcclxuICAgIGNvbnN0IGluZm8gPSB0aGlzLm1hcFtVdGlscy5sb3dlckJvdW5kKHRoaXMubWFwLCB7b2Zmc2V0OiBwfSwgKGEsIGIpPT4gYS5vZmZzZXQtYi5vZmZzZXQpXTtcclxuICAgIGxldCBjaGFycyA9IHRoaXMucGF0dGVybi5sZW5ndGgsIGkgPSBpbmZvLmJhc2U7XHJcbiAgICBwIC09IGluZm8ub2Zmc2V0O1xyXG4gICAgd2hpbGUoY2hhcnMpIHtcclxuICAgICAgaWYodGhpcy5zdHJzW2ldLmxlbmd0aCkge1xyXG4gICAgICAgIGNvbnN0IGRlbGltZXRlciA9IGk8dGhpcy5zdHJzLmxlbmd0aC0xICYmICFGaW5kZXIuaXNEZWxpbWV0cih0aGlzLnN0cnNbaV0uY2hhckF0KHRoaXMuc3Ryc1tpXS5sZW5ndGgtMSkpICYmICFGaW5kZXIuaXNEZWxpbWV0cih0aGlzLnN0cnNbaSsxXS5jaGFyQXQoMCkpLFxyXG4gICAgICAgICAgICAgIGxlbmd0aCA9IE1hdGgubWluKHRoaXMuc3Ryc1tpXS5sZW5ndGgrKGRlbGltZXRlcj8gMTogMCktcCwgY2hhcnMpO1xyXG4gICAgICAgIGlmKHA8dGhpcy5zdHJzW2ldLmxlbmd0aCkge1xyXG4gICAgICAgICAgdGhpcy5oaXRzLnB1c2goe1xyXG4gICAgICAgICAgICBpbmRleDogaSxcclxuICAgICAgICAgICAgb2Zmc2V0OiBwLFxyXG4gICAgICAgICAgICBsZW5ndGg6IE1hdGgubWluKGxlbmd0aCwgdGhpcy5zdHJzW2ldLmxlbmd0aC1wKSxcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjaGFycyAtPSBsZW5ndGg7XHJcbiAgICAgICAgKytpO1xyXG4gICAgICAgIHAgPSAwO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhZGRDb250ZXh0KHApIHtcclxuICAgIGxldCBmID0gcCwgbCA9IHArdGhpcy5wYXR0ZXJuLmxlbmd0aC0xLCBkZWxzID0gdGhpcy5wcm9wcy5jb250ZXh0TGVuZ3RoLCBwcmV2RGVscyA9IGRlbHMrMTtcclxuICAgIHdoaWxlKGRlbHMgJiYgcHJldkRlbHMtZGVscykge1xyXG4gICAgICBwcmV2RGVscyA9IGRlbHM7XHJcbiAgICAgIGlmKGRlbHMlMikge1xyXG4gICAgICAgIGZvcihsZXQgaT1mLTI7IGk+PTA7IC0taSkge1xyXG4gICAgICAgICAgaWYoRmluZGVyLmlzRGVsaW1ldHIodGhpcy5zdHJbaV0pIHx8IGk9PT0wKSB7XHJcbiAgICAgICAgICAgIGYgPSBpPT09MD8gMDogaSsxO1xyXG4gICAgICAgICAgICAtLWRlbHM7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBmb3IobGV0IGk9bCsyOyBpPHRoaXMuc3RyLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICBpZihGaW5kZXIuaXNEZWxpbWV0cih0aGlzLnN0cltpXSkgfHwgaT09PXRoaXMuc3RyLmxlbmd0aC0xKSB7XHJcbiAgICAgICAgICAgIGwgPSBpPT09dGhpcy5zdHIubGVuZ3RoLTE/IGk9PT10aGlzLnN0ci5sZW5ndGgtMTogaS0xO1xyXG4gICAgICAgICAgICAtLWRlbHM7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5jb250ZXh0cy5wdXNoKHRoaXMuc3RyLnN1YnN0cihmLCBsLWYrMSkpO1xyXG4gIH1cclxuXHJcbiAgZ2V0SGl0cygpIHtcclxuICAgIHJldHVybiB0aGlzLmhpdHM7XHJcbiAgfVxyXG5cclxuICBnZXRDb250ZXh0cygpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbnRleHRzO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGRlZmF1bHRzID0ge1xyXG4gICAgY29udGV4dExlbmd0aDogNyxcclxuICAgIGhpdHM6IHRydWUsXHJcbiAgICBjb250ZXh0czogdHJ1ZVxyXG4gIH07XHJcblxyXG4gIGNvbnN0cnVjdG9yKHN0cnMsIHBhdHRlcm4sIHByb3BzKSB7XHJcbiAgICB0aGlzLnByb3BzID0ge1xyXG4gICAgICAuLi5GaW5kZXIuZGVmYXVsdHMsXHJcbiAgICAgIC4uLnByb3BzXHJcbiAgICB9O1xyXG4gICAgdGhpcy5zdHJzID0gc3RycztcclxuICAgIGNvbnN0IGRhdGEgPSB0aGlzLm1lcmdlKHN0cnMpO1xyXG4gICAgdGhpcy5oaXRzID0gW107XHJcbiAgICB0aGlzLmNvbnRleHRzID0gW107XHJcbiAgICB0aGlzLnBhdHRlcm4gPSBwYXR0ZXJuLnRvTG93ZXJDYXNlKCk7XHJcbiAgICB0aGlzLmxzdHIgPSB0aGlzLnN0ci50b0xvd2VyQ2FzZSgpO1xyXG4gICAgbGV0IHAgPSAwO1xyXG4gICAgd2hpbGUodHJ1ZSkge1xyXG4gICAgICBwID0gdGhpcy5sc3RyLmluZGV4T2YodGhpcy5wYXR0ZXJuLCBwKTtcclxuICAgICAgaWYocD09PS0xKSB7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdGhpcy5hZGRIaXRzKHApO1xyXG4gICAgICAgIHRoaXMuYWRkQ29udGV4dChwKTtcclxuICAgICAgICBwICs9IHRoaXMucGF0dGVybi5sZW5ndGg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvRmluZGVyLmpzIiwiaW1wb3J0IHtQREZKU30gZnJvbSAnLi4vbGlicyc7XHJcblxyXG5QREZKUy53b3JrZXJTcmMgPSAod2luZG93LlBERkpTX0xPQ0FMRT8gUERGSlNfTE9DQUxFOiBHTE9CQUxfUEFUSFMpLnBkZkpzV29ya2VyO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGRmIHtcclxuXHJcbiAgc3RhdGljIG5vcm1hbGl6ZVVybCh1cmwpIHtcclxuICAgIGZ1bmN0aW9uIHNwbGl0KHMpIHtcclxuICAgICAgcmV0dXJuIHMucmVwbGFjZSgvXFxcXC9nLCAnLycpLnNwbGl0KCcvJyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBiYXNlID0gc3BsaXQod2luZG93LmxvY2F0aW9uLmhyZWYpO1xyXG4gICAgdXJsID0gc3BsaXQodXJsKTtcclxuICAgIGlmKGJhc2VbMl09PT11cmxbMl0pIHtcclxuICAgICAgdXJsWzBdID0gYmFzZVswXTtcclxuICAgIH1cclxuICAgIHJldHVybiB1cmwuam9pbignLycpO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3Ioc3JjLCBsb2FkaW5nUHJvZ3Jlc3MpIHtcclxuICAgIHRoaXMuc3JjID0gUGRmLm5vcm1hbGl6ZVVybChzcmMpO1xyXG4gICAgdGhpcy5oYW5kbGVyUXVldWUgPSBbXTtcclxuICAgIHRoaXMucHJvZ3Jlc0RhdGEgPSB7bG9hZGVkOiAtMSwgdG90YWw6IDF9O1xyXG4gICAgdGhpcy5sb2FkaW5nUHJvZ3Jlc3MgPSBsb2FkaW5nUHJvZ3Jlc3M7XHJcblxyXG4gICAgUERGSlMuZ2V0RG9jdW1lbnQodGhpcy5zcmMsIG51bGwsIG51bGwsIChkYXRhKT0+IHtcclxuICAgICAgaWYodGhpcy5sb2FkaW5nUHJvZ3Jlc3MpIHtcclxuICAgICAgICBsZXQgY3VyID0gTWF0aC5mbG9vcigxMDAqZGF0YS5sb2FkZWQvZGF0YS50b3RhbCksXHJcbiAgICAgICAgICAgICAgb2xkID0gTWF0aC5mbG9vcigxMDAqdGhpcy5wcm9ncmVzRGF0YS5sb2FkZWQvdGhpcy5wcm9ncmVzRGF0YS50b3RhbCk7XHJcbiAgICAgICAgaWYoY3VyIT09b2xkKSB7XHJcbiAgICAgICAgICBjdXIgPSBpc05hTihjdXIpPyAwOiBjdXI7XHJcbiAgICAgICAgICBjdXIgPSBjdXI+MTAwPyAxMDA6IGN1cjtcclxuICAgICAgICAgIHRoaXMubG9hZGluZ1Byb2dyZXNzKGN1cik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHRoaXMucHJvZ3Jlc0RhdGEgPSBkYXRhO1xyXG4gICAgfSkuXHJcbiAgICAgIHRoZW4oKGhhbmRsZXIpPT4ge1xyXG4gICAgICAgIHRoaXMuaGFuZGxlciA9IGhhbmRsZXI7XHJcbiAgICAgICAgbGV0IGRvbmUgPSBQcm9taXNlLnJlc29sdmUoaGFuZGxlcik7XHJcbiAgICAgICAgZm9yKGxldCBjbGIgb2YgdGhpcy5oYW5kbGVyUXVldWUucmV2ZXJzZSgpKSB7XHJcbiAgICAgICAgICBkb25lID0gZG9uZS50aGVuKChoYW5kbGVyKT0+IHtcclxuICAgICAgICAgICAgY2xiKGhhbmRsZXIpO1xyXG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlcjtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgdGhpcy5oYW5kbGVyUXVldWUuc3BsaWNlKDAsIHRoaXMuaGFuZGxlclF1ZXVlLmxlbmd0aCk7XHJcbiAgICBkZWxldGUgdGhpcy5oYW5kbGVyO1xyXG4gIH1cclxuXHJcbiAgc2V0TG9hZGluZ1Byb2dyZXNzQ2xiKGNsYikge1xyXG4gICAgdGhpcy5sb2FkaW5nUHJvZ3Jlc3MgPSBjbGI7XHJcbiAgfVxyXG5cclxuICBnZXRQYWdlc051bSgpIHtcclxuICAgIHJldHVybiB0aGlzLmhhbmRsZXI/IHRoaXMuaGFuZGxlci5udW1QYWdlczogdW5kZWZpbmVkO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldFBhZ2VTaXplKHBhZ2UpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHdpZHRoOiBwYWdlLnZpZXdbMl0tcGFnZS52aWV3WzBdLFxyXG4gICAgICBoZWlnaHQ6IHBhZ2Uudmlld1szXS1wYWdlLnZpZXdbMV1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBnZXRIYW5kbGVyKGNsYikge1xyXG4gICAgaWYodGhpcy5oYW5kbGVyKSB7XHJcbiAgICAgIGNsYih0aGlzLmhhbmRsZXIpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMuaGFuZGxlclF1ZXVlLnB1c2goY2xiKTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1BkZi5qcyIsImltcG9ydCBCYXNlTWF0aFV0aWxzIGZyb20gJy4vQmFzZU1hdGhVdGlscyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaHJlZVV0aWxzIHtcclxuXHJcbiAgc3RhdGljIHZlcnRpY2VzMlVWcyh2ZXJ0aWNlcywgaW5kZWNlcywgZmlyc3QsIGxhc3QsIGNvbnZlckNsYikge1xyXG4gICAgY29uc3QgciA9IFtdO1xyXG4gICAgZm9yKGxldCBpID0gZmlyc3Q7IGk8bGFzdDsgKytpKSB7XHJcbiAgICAgIGNvbnN0IHZpcyA9IFtpbmRlY2VzW2ldLmEsaW5kZWNlc1tpXS5iLGluZGVjZXNbaV0uY107XHJcbiAgICAgIGZvcihsZXQgaiA9IDA7IGo8dmlzLmxlbmd0aDsgKytqKSB7XHJcbiAgICAgICAgaWYoIXJbdmlzW2pdXSkge1xyXG4gICAgICAgICAgclt2aXNbal1dID0gY29udmVyQ2xiKHZlcnRpY2VzW3Zpc1tqXV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHI7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY29tcHV0ZUZhY2VWZXJ0ZXhVdnMoZ2VvbWV0cnksIGZhY2VzKSB7XHJcbiAgICBjb25zdCB1dnMgPSBbXHJcbiAgICAgICAgICAgICAgICBUaHJlZVV0aWxzLnZlcnRpY2VzMlVWcyhnZW9tZXRyeS52ZXJ0aWNlcywgZ2VvbWV0cnkuZmFjZXMsIDAsIGZhY2VzWzBdLCAocCk9Pm5ldyBUSFJFRS5WZWN0b3IyKHAueCwgMS1wLnopKSxcclxuICAgICAgICAgICAgICAgIFRocmVlVXRpbHMudmVydGljZXMyVVZzKGdlb21ldHJ5LnZlcnRpY2VzLCBnZW9tZXRyeS5mYWNlcywgZmFjZXNbMF0sIGZhY2VzWzFdLCAocCk9Pm5ldyBUSFJFRS5WZWN0b3IyKDEtcC54LCAxLXAueikpLFxyXG4gICAgICAgICAgICAgICAgVGhyZWVVdGlscy52ZXJ0aWNlczJVVnMoZ2VvbWV0cnkudmVydGljZXMsIGdlb21ldHJ5LmZhY2VzLCBmYWNlc1sxXSwgZmFjZXNbMl0sIChwKT0+bmV3IFRIUkVFLlZlY3RvcjIocC54LCBwLnkpKSxcclxuICAgICAgICAgICAgICAgIFRocmVlVXRpbHMudmVydGljZXMyVVZzKGdlb21ldHJ5LnZlcnRpY2VzLCBnZW9tZXRyeS5mYWNlcywgZmFjZXNbMl0sIGZhY2VzWzNdLCAocCk9Pm5ldyBUSFJFRS5WZWN0b3IyKDEtcC54LCBwLnkpKSxcclxuICAgICAgICAgICAgICAgIFRocmVlVXRpbHMudmVydGljZXMyVVZzKGdlb21ldHJ5LnZlcnRpY2VzLCBnZW9tZXRyeS5mYWNlcywgZmFjZXNbM10sIGZhY2VzWzRdLCAocCk9Pm5ldyBUSFJFRS5WZWN0b3IyKHAueiwgcC55KSksXHJcbiAgICAgICAgICAgICAgICBUaHJlZVV0aWxzLnZlcnRpY2VzMlVWcyhnZW9tZXRyeS52ZXJ0aWNlcywgZ2VvbWV0cnkuZmFjZXMsIGZhY2VzWzRdLCBnZW9tZXRyeS5mYWNlcy5sZW5ndGgsIChwKT0+bmV3IFRIUkVFLlZlY3RvcjIoMS1wLnosIHAueSkpXHJcbiAgICBdO1xyXG5cclxuICAgIGxldCB1dnNpID0gMDtcclxuICAgIGZvcihsZXQgaSA9IDA7IGk8Z2VvbWV0cnkuZmFjZXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgdXZzaSArPSBmYWNlc1t1dnNpXSA9PT0gaTtcclxuICAgICAgY29uc3QgZiA9IGdlb21ldHJ5LmZhY2VzW2ldO1xyXG4gICAgICBmLm1hdGVyaWFsSW5kZXggPSB1dnNpO1xyXG4gICAgICBnZW9tZXRyeS5mYWNlVmVydGV4VXZzWzBdW2ldID0gW3V2c1t1dnNpXVtmLmFdLCB1dnNbdXZzaV1bZi5iXSwgdXZzW3V2c2ldW2YuY11dO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNyZWF0ZU1hcmtlcihwLCBjLCBzaXplKSB7XHJcbiAgICBjb25zdCBtYXJrZXIgPSBuZXcgVEhSRUUuTWVzaChuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoc2l6ZSksIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7IGNvbG9yOiBjIH0pKTtcclxuICAgIG1hcmtlci5wb3NpdGlvbi5zZXQocC54LHAueSxwLnopO1xyXG4gICAgcmV0dXJuIG1hcmtlcjtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBmaW5kVXZUcmlzKGdlb21ldHJ5LCBwcywgZmlyc3QsIGxhc3QpIHtcclxuICAgIGNvbnN0IHJlcyA9IFtdO1xyXG4gICAgZm9yKGxldCBwIG9mIHBzKSB7XHJcbiAgICAgIGxldCBmb3VuZCA9IGZhbHNlO1xyXG4gICAgICBmb3IobGV0IGk9Zmlyc3Q7IGk8bGFzdCAmJiAhZm91bmQ7ICsraSkge1xyXG4gICAgICAgIGNvbnN0IHRyaSA9IGdlb21ldHJ5LmZhY2VWZXJ0ZXhVdnNbMF1baV07XHJcbiAgICAgICAgaWYoQmFzZU1hdGhVdGlscy5pc0luc2lkZUNvbnZQb2x5KHRyaSwgcCkpIHtcclxuICAgICAgICAgIHJlcy5wdXNoKHtcclxuICAgICAgICAgICAgY29lZnM6IEJhc2VNYXRoVXRpbHMuY29tcHV0ZUludGVycENvZWZzKHRyaSwgcCksXHJcbiAgICAgICAgICAgIGlcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgZm91bmQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZighZm91bmQpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdCYWQgcG9pbnQnKTtcclxuICAgICAgICByZXMucHVzaCh1bmRlZmluZWQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGZpbmRJbnRlcm5hbFZlcnRpY2VzKGdlb21ldHJ5LCBwcywgZmlyc3QsIGxhc3QpIHtcclxuICAgIGNvbnN0IHJlcyA9IHt9O1xyXG4gICAgZm9yKGxldCBpPWZpcnN0OyBpPGxhc3Q7ICsraSkge1xyXG4gICAgICBjb25zdCB0cmkgPSBnZW9tZXRyeS5mYWNlVmVydGV4VXZzWzBdW2ldLCBmID0gZ2VvbWV0cnkuZmFjZXNbaV0sIHZzID0gW2YuYSwgZi5iLCBmLmNdO1xyXG4gICAgICBmb3IobGV0IGo9MDsgajx0cmkubGVuZ3RoOyArK2opIHtcclxuICAgICAgICBpZihyZXNbdnNbal1dPT09dW5kZWZpbmVkICYmIEJhc2VNYXRoVXRpbHMuaXNJbnNpZGVQb2x5KHBzLCB0cmlbal0pKSB7XHJcbiAgICAgICAgICByZXNbdnNbal1dID0ge1xyXG4gICAgICAgICAgICBwOiB0cmlbal0sXHJcbiAgICAgICAgICAgIGk6IHZzW2pdLFxyXG4gICAgICAgICAgICBuOiBmLnZlcnRleE5vcm1hbHNbal1cclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhyZXMpO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvVGhyZWVVdGlscy5qcyIsIlxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUYXJnZXQge1xyXG5cclxuICBzdGF0aWMgdGVzdChvYmplY3QxLCBvYmplY3QyKSB7XHJcbiAgICByZXR1cm4gb2JqZWN0MS50YXJnZXQ9PT1vYmplY3QyLnRhcmdldDtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL3RhcmdldHMvVGFyZ2V0LmpzIiwiaW1wb3J0IHskfSBmcm9tICcuL2pzL2xpYnMnO1xyXG5pbXBvcnQgRGV0ZWN0b3IgZnJvbSAnRGV0ZWN0b3InO1xyXG5pbXBvcnQgVmlzdWFsV29ybGQgZnJvbSAnVmlzdWFsV29ybGQnO1xyXG5pbXBvcnQgUGRmTGlua3NIYW5kbGVyIGZyb20gJy4vanMvY2xhc3Nlcy9QZGZMaW5rc0hhbmRsZXInO1xyXG5pbXBvcnQgQm9vayBmcm9tICcuL2pzL2NsYXNzZXMvQm9vayc7XHJcbmltcG9ydCBCb29rVmlldyBmcm9tICcuL2pzL2NsYXNzZXMvQm9va1ZpZXcnO1xyXG5pbXBvcnQgQm9va0NvbnRyb2xsZXIgZnJvbSAnLi9qcy9jbGFzc2VzL0Jvb2tDb250cm9sbGVyJztcclxuaW1wb3J0IFBkZkJvb2tQcm9wc0J1aWxkZXIgZnJvbSAnLi9qcy9jbGFzc2VzL1BkZkJvb2tQcm9wc0J1aWxkZXInO1xyXG5pbXBvcnQgQ2xiQm9va1Byb3BzQnVpbGRlciBmcm9tICcuL2pzL2NsYXNzZXMvQ2xiQm9va1Byb3BzQnVpbGRlcic7XHJcbmltcG9ydCBMb2FkaW5nQ29udHJvbGxlciBmcm9tICdMb2FkaW5nQ29udHJvbGxlcic7XHJcbmltcG9ydCBTZWFyY2ggZnJvbSAnU2VhcmNoJztcclxuaW1wb3J0IEJvb2ttYXJrcyBmcm9tICdCb29rbWFya3MnO1xyXG5pbXBvcnQgVGh1bWJuYWlscyBmcm9tICdUaHVtYm5haWxzJztcclxuaW1wb3J0IFRvY0NvbnRyb2xsZXIgZnJvbSAnLi9qcy9jbGFzc2VzL1RvY0NvbnRyb2xsZXInO1xyXG5pbXBvcnQgQm9va1ByaW50ZXIgZnJvbSAnLi9qcy9jbGFzc2VzL0Jvb2tQcmludGVyJztcclxuaW1wb3J0IEF1dG9OYXZpZ2F0b3IgZnJvbSAnLi9qcy9jbGFzc2VzL0F1dG9OYXZpZ2F0b3InO1xyXG5pbXBvcnQgU291bmRzRW52aXJvbWVudCBmcm9tICcuL2pzL2NsYXNzZXMvU291bmRzRW52aXJvbWVudCc7XHJcblxyXG4kLmZuLkZsaXBCb29rID0gZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gIGNvbnN0IHNjZW5lID0ge1xyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgaWYodGhpcy5yZWFkeSkge1xyXG4gICAgICAgICFzY2VuZS5wZGZMaW5rc0hhbmRsZXIgfHwgc2NlbmUucGRmTGlua3NIYW5kbGVyLmRpc3Bvc2UoKTtcclxuICAgICAgICBkZWxldGUgc2NlbmUucGRmTGlua3NIYW5kbGVyO1xyXG4gICAgICAgIHNjZW5lLnNvdW5kcy5kaXNwb3NlKCk7XHJcbiAgICAgICAgZGVsZXRlIHNjZW5lLnNvdW5kcztcclxuICAgICAgICBzY2VuZS50b2NDdHJsLmRpc3Bvc2UoKTtcclxuICAgICAgICBkZWxldGUgc2NlbmUudG9jQ3RybDtcclxuICAgICAgICBzY2VuZS50aHVtYm5haWxzLmRpc3Bvc2UoKTtcclxuICAgICAgICBkZWxldGUgc2NlbmUudGh1bWJuYWlscztcclxuICAgICAgICAhc2NlbmUuYm9va21hcmtzIHx8IHNjZW5lLmJvb2ttYXJrcy5kaXNwb3NlKCk7XHJcbiAgICAgICAgZGVsZXRlIHNjZW5lLmJvb2ttYXJrcztcclxuICAgICAgICBzY2VuZS5jdHJsLmRpc3Bvc2UoKTtcclxuICAgICAgICBkZWxldGUgc2NlbmUuY3RybDtcclxuICAgICAgICBzY2VuZS5ib29rUHJpbnRlci5kaXNwb3NlKCk7XHJcbiAgICAgICAgZGVsZXRlIHNjZW5lLmJvb2tQcmludGVyO1xyXG4gICAgICAgIHNjZW5lLmJvb2suZGlzcG9zZSgpO1xyXG4gICAgICAgIGRlbGV0ZSBzY2VuZS5ib29rO1xyXG4gICAgICAgIHNjZW5lLnByb3BzQnVpbGRlci5kaXNwb3NlKCk7XHJcbiAgICAgICAgZGVsZXRlIHNjZW5lLnByb3BzQnVpbGRlcjtcclxuICAgICAgICBkZWxldGUgc2NlbmUuYm9va0J1aWxkZXI7XHJcbiAgICAgICAgc2NlbmUudmlzdWFsLmRpc3Bvc2UoKTtcclxuICAgICAgICBkZWxldGUgc2NlbmUudmlzdWFsO1xyXG4gICAgICAgIHNjZW5lLnZpZXcuZGlzcG9zZSgpO1xyXG4gICAgICAgIGRlbGV0ZSBzY2VuZS52aWV3O1xyXG4gICAgICAgIGRlbGV0ZSBzY2VuZS5kaXNwb3NlO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHRoaXMucGVuZGluZ0Rpc3Bvc2UgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuICBvcHRpb25zID0gey4uLm9wdGlvbnN9O1xyXG4gIHNjZW5lLnZpZXcgPSBuZXcgQm9va1ZpZXcodGhpcy5sZW5ndGg/IHRoaXNbMF06ICQoJzxkaXY+JykuYXBwZW5kVG8oJ2JvZHknKSwgKCk9PiB7XHJcbiAgICBpZighRGV0ZWN0b3Iud2ViZ2wpIHtcclxuICAgICAgRGV0ZWN0b3IuYWRkR2V0V2ViR0xNZXNzYWdlKHtwYXJlbnQ6IHNjZW5lLnZpZXcuZ2V0VmlldygpfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgc2NlbmUubG9hZGluZ0N0cmwgPSBuZXcgTG9hZGluZ0NvbnRyb2xsZXIoc2NlbmUudmlldywgdHJ1ZSwgKHByb2dyZXNzKT0+IHByb2dyZXNzPT09MD8gJ1BsZWFzZSB3YWl0Li4uIHRoZSBBcHBsaWNhdGlvbiBpcyBMb2FkaW5nJzogJ1BERiBpcyBMb2FkaW5nOiAnK3Byb2dyZXNzKyclJyk7XHJcbiAgICAgIHNjZW5lLnZpc3VhbCA9IG5ldyBWaXN1YWxXb3JsZChzY2VuZS52aWV3LmdldENvbnRhaW5lcigpLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcsIHNjZW5lLnZpZXcuZ2V0Q29udGFpbmVyKCkub3duZXJEb2N1bWVudCwgc2NlbmUudmlldy5nZXRWaWV3KCkpO1xyXG4gICAgICBzY2VuZS5ib29rQnVpbGRlciA9IChwcm9wcywgc2hlZXRzLCBwYWdlQ2FsbGJhY2spPT4ge1xyXG4gICAgICAgIGlmKG9wdGlvbnMucHJvcGVydGllc0NhbGxiYWNrKSB7XHJcbiAgICAgICAgICBwcm9wcyA9IG9wdGlvbnMucHJvcGVydGllc0NhbGxiYWNrKHByb3BzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2NlbmUuYm9vayA9IG5ldyBCb29rKHNjZW5lLnZpc3VhbCwgc2hlZXRzLCBwYWdlQ2FsbGJhY2ssIHByb3BzKTtcclxuICAgICAgICBzY2VuZS5ib29rUHJpbnRlciA9IG5ldyBCb29rUHJpbnRlcihzY2VuZS52aXN1YWwsIHNjZW5lLmJvb2ssIChvcHRpb25zLnRlbXBsYXRlIHx8IHt9KS5wcmludFN0eWxlKTtcclxuICAgICAgICBzY2VuZS5sb2FkaW5nQ3RybC5kaXNwb3NlKCk7XHJcbiAgICAgICAgZGVsZXRlIHNjZW5lLmxvYWRpbmdDdHJsO1xyXG4gICAgICAgIHNjZW5lLmN0cmwgPSBuZXcgQm9va0NvbnRyb2xsZXIoc2NlbmUuYm9vaywgc2NlbmUudmlldywgb3B0aW9ucy5jb250cm9sc1Byb3BzKTtcclxuICAgICAgICBzY2VuZS5ib29rLnNldEluamVjdG9yKCh3KT0+IHtcclxuICAgICAgICAgIHcualF1ZXJ5ID0gdy4kID0gJDtcclxuICAgICAgICAgIHcuYm9vayA9IHNjZW5lLmJvb2s7XHJcbiAgICAgICAgICB3LmJvb2tDdHJsID0gc2NlbmUuY3RybDtcclxuICAgICAgICAgIGlmKHByb3BzLmluamVjdG9yKSB7XHJcbiAgICAgICAgICAgIHByb3BzLmluamVjdG9yKHcpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHNjZW5lLnZpZXcuYWRkSGFuZGxlcihzY2VuZS5jdHJsKTtcclxuICAgICAgICBzY2VuZS5jdHJsLnNldFByaW50ZXIoc2NlbmUuYm9va1ByaW50ZXIpO1xyXG4gICAgICAgIGNvbnN0IHRlc3QgPSBwYWdlQ2FsbGJhY2soMCk7XHJcblxyXG4gICAgICAgIHNjZW5lLnNlYXJjaCA9IG5ldyBTZWFyY2goc2NlbmUudmlldy5nZXRTZWFyY2hWaWV3KCksIHNjZW5lLmJvb2suZ2V0UGFnZXMoKSk7XHJcbiAgICAgICAgc2NlbmUuc2VhcmNoLm9uUXVlcnkgPSBzY2VuZS5ib29rLnNldFF1ZXJ5LmJpbmQoc2NlbmUuYm9vayk7XHJcbiAgICAgICAgc2NlbmUuYm9vay5hZGRFdmVudExpc3RlbmVyKCdzZWFyY2hSZXN1bHRzJywgKGUpPT4ge1xyXG4gICAgICAgICAgc2NlbmUuc2VhcmNoLnNldFJlc3VsdHMoZS5yZXN1bHRzLCBlLmxhc3RQYWdlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgc2NlbmUudGh1bWJuYWlscyA9IG5ldyBUaHVtYm5haWxzKHNjZW5lLnZpc3VhbCwgc2NlbmUudmlldy5nZXRUaHVtYm5haWxzVmlldygpLCBwYWdlQ2FsbGJhY2ssIDIqKHNoZWV0cysyKSwge2tXdG9IOiBwcm9wcy53aWR0aC9wcm9wcy5oZWlnaHR9KTtcclxuICAgICAgICBzY2VuZS50b2NDdHJsID0gbmV3IFRvY0NvbnRyb2xsZXIoc2NlbmUudmlldywgc2NlbmUuY3RybCk7XHJcbiAgICAgICAgc2NlbmUudG9jQ3RybC5zZXRUaHVtYm5haWxzKHNjZW5lLnRodW1ibmFpbHMpO1xyXG4gICAgICAgIHNjZW5lLnRvY0N0cmwuc2V0U2VhcmNoKHNjZW5lLnNlYXJjaCk7XHJcbiAgICAgICAgc2NlbmUuY3RybC5zZXRUb2NDdHJsKHNjZW5lLnRvY0N0cmwpO1xyXG4gICAgICAgIHNjZW5lLnZpZXcuYWRkSGFuZGxlcihzY2VuZS50b2NDdHJsKTtcclxuXHJcbiAgICAgICAgaWYodGVzdC50eXBlPT09J3BkZicpIHtcclxuICAgICAgICAgIHNjZW5lLnBkZkxpbmtzSGFuZGxlciA9IG5ldyBQZGZMaW5rc0hhbmRsZXIodGVzdC5zcmMsIHNjZW5lLmN0cmwsIHNjZW5lLnZpc3VhbC5lbGVtZW50KTtcclxuICAgICAgICAgIHNjZW5lLmJvb2suYWRkRXZlbnRMaXN0ZW5lcigncGRmQW5ub3RhdGlvbicsIHNjZW5lLnBkZkxpbmtzSGFuZGxlci5oYW5kbGVFdmVudC5iaW5kKHNjZW5lLnBkZkxpbmtzSGFuZGxlcikpO1xyXG4gICAgICAgICAgdGVzdC5zcmMuZ2V0SGFuZGxlcigoaGFuZGxlcik9PiB7XHJcbiAgICAgICAgICAgIGhhbmRsZXIuZ2V0T3V0bGluZSgpLlxyXG4gICAgICAgICAgICAgIHRoZW4oKG91dGxpbmUpPT4ge1xyXG4gICAgICAgICAgICAgICAgc2NlbmUuYm9va21hcmtzID0gbmV3IEJvb2ttYXJrcyhzY2VuZS52aWV3LmdldEJvb2ttYXJrc1ZpZXcoKSwgb3V0bGluZSk7XHJcbiAgICAgICAgICAgICAgICBzY2VuZS50b2NDdHJsLnNldEJvb2ttYXJrcyhzY2VuZS5ib29rbWFya3MsIHRlc3Quc3JjKTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgaWYob3B0aW9ucy5wZGZMaW5rcyAmJiBvcHRpb25zLnBkZkxpbmtzLmhhbmRsZXIpIHtcclxuICAgICAgICAgICAgc2NlbmUucGRmTGlua3NIYW5kbGVyLnNldEhhbmRsZXIob3B0aW9ucy5wZGZMaW5rcy5oYW5kbGVyKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNjZW5lLnNvdW5kcyA9IG5ldyBTb3VuZHNFbnZpcm9tZW50KG9wdGlvbnMudGVtcGxhdGUpO1xyXG4gICAgICAgIHNjZW5lLmN0cmwuc2V0U291bmRzKHNjZW5lLnNvdW5kcyk7XHJcbiAgICAgICAgc2NlbmUuc291bmRzLnN1YnNjcmliZUZsaXBzKHNjZW5lLmN0cmwpO1xyXG5cclxuICAgICAgICBzY2VuZS5yZWFkeSA9IHRydWU7XHJcbiAgICAgICAgbmV3IEF1dG9OYXZpZ2F0b3Ioc2NlbmUudmlzdWFsLCBzY2VuZS5jdHJsLCBvcHRpb25zLmF1dG9OYXZpZ2F0aW9uKS5kaXNwb3NlKCk7XHJcbiAgICAgICAgaWYob3B0aW9ucy5yZWFkeSkge1xyXG4gICAgICAgICAgb3B0aW9ucy5yZWFkeShzY2VuZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKHNjZW5lLnBlbmRpbmdEaXNwb3NlKSB7XHJcbiAgICAgICAgICBzY2VuZS5kaXNwb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgICBpZihvcHRpb25zLnBkZikge1xyXG4gICAgICAgIHNjZW5lLnByb3BzQnVpbGRlciA9IG5ldyBQZGZCb29rUHJvcHNCdWlsZGVyKG9wdGlvbnMucGRmLCBzY2VuZS5ib29rQnVpbGRlcik7XHJcbiAgICAgICAgc2NlbmUucHJvcHNCdWlsZGVyLnBkZi5zZXRMb2FkaW5nUHJvZ3Jlc3NDbGIoc2NlbmUubG9hZGluZ0N0cmwuc2V0UHJvZ3Jlc3MuYmluZChzY2VuZS5sb2FkaW5nQ3RybCkpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYob3B0aW9ucy5wYWdlQ2FsbGJhY2spIHtcclxuICAgICAgICBzY2VuZS5wcm9wc0J1aWxkZXIgPSBuZXcgQ2xiQm9va1Byb3BzQnVpbGRlcihzY2VuZS52aXN1YWwsIG9wdGlvbnMucGFnZUNhbGxiYWNrLCBvcHRpb25zLnBhZ2VzLCBzY2VuZS5ib29rQnVpbGRlcik7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgc2NlbmUucHJvcHNCdWlsZGVyID0gbmV3IENsYkJvb2tQcm9wc0J1aWxkZXIoc2NlbmUudmlzdWFsLCBCb29rLnBhZ2VDYWxsYmFjaywgNiwgc2NlbmUuYm9va0J1aWxkZXIpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSwgb3B0aW9ucy50ZW1wbGF0ZSk7XHJcbiAgcmV0dXJuIHNjZW5lO1xyXG59XHJcblxyXG4kKCgpPT4ge1xyXG4gIGxldCBjb250YWluZXJzID0gJCgnLmZsaXAtYm9vay1jb250YWluZXInKTtcclxuICBmb3IobGV0IGkgPSAwOyBpPGNvbnRhaW5lcnMubGVuZ3RoOyArK2kpIHtcclxuICAgIGNvbnN0IGpDb250YWluZXIgPSAkKGNvbnRhaW5lcnNbaV0pLCBzcmMgPSBqQ29udGFpbmVyLmF0dHIoJ3NyYycpO1xyXG4gICAgaWYoISFzcmMpIHtcclxuICAgICAgakNvbnRhaW5lci5GbGlwQm9vayh7cGRmOiBzcmN9KTtcclxuICAgIH1cclxuICB9XHJcbn0pO1xyXG5cclxud2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0gJDtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vaW5kZXguanMiLCJpZiAoIUFycmF5LnByb3RvdHlwZS5maWxsKSB7XHJcbiAgQXJyYXkucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG5cclxuICAgIC8vINCo0LDQs9C4IDEtMi5cclxuICAgIGlmICh0aGlzID09IG51bGwpIHtcclxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGhpcyBpcyBudWxsIG9yIG5vdCBkZWZpbmVkJyk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIE8gPSBPYmplY3QodGhpcyk7XHJcblxyXG4gICAgLy8g0KjQsNCz0LggMy01LlxyXG4gICAgdmFyIGxlbiA9IE8ubGVuZ3RoID4+PiAwO1xyXG5cclxuICAgIC8vINCo0LDQs9C4IDYtNy5cclxuICAgIHZhciBzdGFydCA9IGFyZ3VtZW50c1sxXTtcclxuICAgIHZhciByZWxhdGl2ZVN0YXJ0ID0gc3RhcnQgPj4gMDtcclxuXHJcbiAgICAvLyDQqNCw0LMgOC5cclxuICAgIHZhciBrID0gcmVsYXRpdmVTdGFydCA8IDAgP1xyXG4gICAgICBNYXRoLm1heChsZW4gKyByZWxhdGl2ZVN0YXJ0LCAwKSA6XHJcbiAgICAgIE1hdGgubWluKHJlbGF0aXZlU3RhcnQsIGxlbik7XHJcblxyXG4gICAgLy8g0KjQsNCz0LggOS0xMC5cclxuICAgIHZhciBlbmQgPSBhcmd1bWVudHNbMl07XHJcbiAgICB2YXIgcmVsYXRpdmVFbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/XHJcbiAgICAgIGxlbiA6IGVuZCA+PiAwO1xyXG5cclxuICAgIC8vINCo0LDQsyAxMS5cclxuICAgIHZhciBmaW5hbCA9IHJlbGF0aXZlRW5kIDwgMCA/XHJcbiAgICAgIE1hdGgubWF4KGxlbiArIHJlbGF0aXZlRW5kLCAwKSA6XHJcbiAgICAgIE1hdGgubWluKHJlbGF0aXZlRW5kLCBsZW4pO1xyXG5cclxuICAgIC8vINCo0LDQsyAxMi5cclxuICAgIHdoaWxlIChrIDwgZmluYWwpIHtcclxuICAgICAgT1trXSA9IHZhbHVlO1xyXG4gICAgICBrKys7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g0KjQsNCzIDEzLlxyXG4gICAgcmV0dXJuIE87XHJcbiAgfTtcclxufVxyXG5cclxuaWYgKCFBcnJheS5wcm90b3R5cGUuZmluZCkge1xyXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsICdmaW5kJywge1xyXG4gICAgdmFsdWU6IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xyXG4gICAgICd1c2Ugc3RyaWN0JztcclxuICAgICBpZiAodGhpcyA9PSBudWxsKSB7XHJcbiAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5wcm90b3R5cGUuZmluZCBjYWxsZWQgb24gbnVsbCBvciB1bmRlZmluZWQnKTtcclxuICAgICB9XHJcbiAgICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ByZWRpY2F0ZSBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcclxuICAgICB9XHJcbiAgICAgdmFyIGxpc3QgPSBPYmplY3QodGhpcyk7XHJcbiAgICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoID4+PiAwO1xyXG4gICAgIHZhciB0aGlzQXJnID0gYXJndW1lbnRzWzFdO1xyXG4gICAgIHZhciB2YWx1ZTtcclxuXHJcbiAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgdmFsdWUgPSBsaXN0W2ldO1xyXG4gICAgICAgaWYgKHByZWRpY2F0ZS5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpLCBsaXN0KSkge1xyXG4gICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICB9XHJcbiAgICAgfVxyXG4gICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuXHJcbmlmICghQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleCkge1xyXG4gIEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXggPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcclxuICAgIGlmICh0aGlzID09IG51bGwpIHtcclxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleCBjYWxsZWQgb24gbnVsbCBvciB1bmRlZmluZWQnKTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgcHJlZGljYXRlICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ByZWRpY2F0ZSBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcclxuICAgIH1cclxuICAgIHZhciBsaXN0ID0gT2JqZWN0KHRoaXMpO1xyXG4gICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoID4+PiAwO1xyXG4gICAgdmFyIHRoaXNBcmcgPSBhcmd1bWVudHNbMV07XHJcbiAgICB2YXIgdmFsdWU7XHJcblxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICB2YWx1ZSA9IGxpc3RbaV07XHJcbiAgICAgIGlmIChwcmVkaWNhdGUuY2FsbCh0aGlzQXJnLCB2YWx1ZSwgaSwgbGlzdCkpIHtcclxuICAgICAgICByZXR1cm4gaTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIC0xO1xyXG4gIH07XHJcbn1cclxuXHJcbmlmICghT2JqZWN0LnZhbHVlcykge1xyXG5cdE9iamVjdC52YWx1ZXMgPSBmdW5jdGlvbiB2YWx1ZXMoTykge1xyXG5cdFx0cmV0dXJuIE9iamVjdC5rZXlzKE8pLm1hcCgobmFtZSk9Pk9bbmFtZV0pIHx8IFtdO1xyXG5cdH07XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL3BvbHlmaWxsLmpzIiwiLyoqIEBuYW1lc3BhY2UgKi9cclxuY29uc3QgVEhSRUV4XHRcdD0gVEhSRUV4IFx0XHR8fCB7fTtcclxuVEhSRUV4LkZ1bGxTY3JlZW5cdD0gVEhSRUV4LkZ1bGxTY3JlZW5cdHx8IHt9O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVEhSRUV4LkZ1bGxTY3JlZW47XHJcblxyXG4vKipcclxuICogdGVzdCBpZiBpdCBpcyBwb3NzaWJsZSB0byBoYXZlIGZ1bGxzY3JlZW5cclxuICpcclxuICogQHJldHVybnMge0Jvb2xlYW59IHRydWUgaWYgZnVsbHNjcmVlbiBBUEkgaXMgYXZhaWxhYmxlLCBmYWxzZSBvdGhlcndpc2VcclxuKi9cclxuVEhSRUV4LkZ1bGxTY3JlZW4uYXZhaWxhYmxlXHQ9IGZ1bmN0aW9uKClcclxue1xyXG5cdHJldHVybiB0aGlzLl9oYXNXZWJraXRGdWxsU2NyZWVuIHx8IHRoaXMuX2hhc01vekZ1bGxTY3JlZW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiB0ZXN0IGlmIGZ1bGxzY3JlZW4gaXMgY3VycmVudGx5IGFjdGl2YXRlZFxyXG4gKlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdHJ1ZSBpZiBmdWxsc2NyZWVuIGlzIGN1cnJlbnRseSBhY3RpdmF0ZWQsIGZhbHNlIG90aGVyd2lzZVxyXG4qL1xyXG5USFJFRXguRnVsbFNjcmVlbi5hY3RpdmF0ZWRcdD0gZnVuY3Rpb24oKVxyXG57XHJcblx0aWYoIHRoaXMuX2hhc1dlYmtpdEZ1bGxTY3JlZW4gKXtcclxuXHRcdHJldHVybiBkb2N1bWVudC53ZWJraXRJc0Z1bGxTY3JlZW47XHJcblx0fWVsc2UgaWYoIHRoaXMuX2hhc01vekZ1bGxTY3JlZW4gKXtcclxuXHRcdHJldHVybiBkb2N1bWVudC5tb3pGdWxsU2NyZWVuO1xyXG5cdH1lbHNle1xyXG5cdFx0Y29uc29sZS5hc3NlcnQoZmFsc2UpO1xyXG5cdH1cclxufVxyXG5cclxuXHJcblRIUkVFeC5GdWxsU2NyZWVuLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihlbGVtZW50LCBoYW5kbGVyKSB7XHJcblx0aWYgKGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcikge1xyXG5cdCAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdGZ1bGxzY3JlZW5jaGFuZ2UnLCBoYW5kbGVyLCBmYWxzZSk7XHJcblx0ICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW96ZnVsbHNjcmVlbmNoYW5nZScsIGhhbmRsZXIsIGZhbHNlKTtcclxuXHQgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdmdWxsc2NyZWVuY2hhbmdlJywgaGFuZGxlciwgZmFsc2UpO1xyXG5cdCAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ01TRnVsbHNjcmVlbkNoYW5nZScsIGhhbmRsZXIsIGZhbHNlKTtcclxuXHR9XHJcbn1cclxuXHJcblRIUkVFeC5GdWxsU2NyZWVuLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihlbGVtZW50LCBoYW5kbGVyKSB7XHJcblx0aWYgKGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xyXG5cdCAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3dlYmtpdGZ1bGxzY3JlZW5jaGFuZ2UnLCBoYW5kbGVyLCBmYWxzZSk7XHJcblx0ICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW96ZnVsbHNjcmVlbmNoYW5nZScsIGhhbmRsZXIsIGZhbHNlKTtcclxuXHQgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdmdWxsc2NyZWVuY2hhbmdlJywgaGFuZGxlciwgZmFsc2UpO1xyXG5cdCAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ01TRnVsbHNjcmVlbkNoYW5nZScsIGhhbmRsZXIsIGZhbHNlKTtcclxuXHR9XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBleGl0SGFuZGxlcigpXHJcbntcclxuICAgIGlmIChkb2N1bWVudC53ZWJraXRJc0Z1bGxTY3JlZW4gfHwgZG9jdW1lbnQubW96RnVsbFNjcmVlbiB8fCBkb2N1bWVudC5tc0Z1bGxzY3JlZW5FbGVtZW50ICE9PSBudWxsKVxyXG4gICAge1xyXG4gICAgICAgIC8qIFJ1biBjb2RlIG9uIGV4aXQgKi9cclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFJlcXVlc3QgZnVsbHNjcmVlbiBvbiBhIGdpdmVuIGVsZW1lbnRcclxuICogQHBhcmFtIHtEb21FbGVtZW50fSBlbGVtZW50IHRvIG1ha2UgZnVsbHNjcmVlbi4gb3B0aW9uYWwuIGRlZmF1bHQgdG8gZG9jdW1lbnQuYm9keVxyXG4qL1xyXG5USFJFRXguRnVsbFNjcmVlbi5yZXF1ZXN0XHQ9IGZ1bmN0aW9uKGVsZW1lbnQpXHJcbntcclxuXHRlbGVtZW50XHQ9IGVsZW1lbnRcdHx8IGRvY3VtZW50LmJvZHk7XHJcblx0aWYoIHRoaXMuX2hhc1dlYmtpdEZ1bGxTY3JlZW4gKXtcclxuXHRcdGVsZW1lbnQud2Via2l0UmVxdWVzdEZ1bGxTY3JlZW4oKTtcclxuXHR9ZWxzZSBpZiggdGhpcy5faGFzTW96RnVsbFNjcmVlbiApe1xyXG5cdFx0ZWxlbWVudC5tb3pSZXF1ZXN0RnVsbFNjcmVlbigpO1xyXG5cdH1lbHNle1xyXG5cdFx0Y29uc29sZS5hc3NlcnQoZmFsc2UpO1xyXG5cdH1cclxufVxyXG5cclxuLyoqXHJcbiAqIENhbmNlbCBmdWxsc2NyZWVuXHJcbiovXHJcblRIUkVFeC5GdWxsU2NyZWVuLmNhbmNlbFx0PSBmdW5jdGlvbigpXHJcbntcclxuXHRpZiggdGhpcy5faGFzV2Via2l0RnVsbFNjcmVlbiApe1xyXG5cdFx0ZG9jdW1lbnQud2Via2l0Q2FuY2VsRnVsbFNjcmVlbigpO1xyXG5cdH1lbHNlIGlmKCB0aGlzLl9oYXNNb3pGdWxsU2NyZWVuICl7XHJcblx0XHRkb2N1bWVudC5tb3pDYW5jZWxGdWxsU2NyZWVuKCk7XHJcblx0fWVsc2V7XHJcblx0XHRjb25zb2xlLmFzc2VydChmYWxzZSk7XHJcblx0fVxyXG59XHJcblxyXG5USFJFRXguRnVsbFNjcmVlbi5faGFzV2Via2l0RnVsbFNjcmVlblx0PSAnd2Via2l0Q2FuY2VsRnVsbFNjcmVlbicgaW4gZG9jdW1lbnRcdD8gdHJ1ZSA6IGZhbHNlO1xyXG5USFJFRXguRnVsbFNjcmVlbi5faGFzTW96RnVsbFNjcmVlblx0PSAnbW96Q2FuY2VsRnVsbFNjcmVlbicgaW4gZG9jdW1lbnRcdD8gdHJ1ZSA6IGZhbHNlO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9USFJFRXgvRnVsbFNjcmVlbi5qcyIsIlxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdXRvTmF2aWdhdG9yIHtcclxuXHJcbiAgY29uc3RydWN0b3IoY29udGV4dCwgYm9va0N0cmwsIHByb3BzPXt9KSB7XHJcbiAgICBwcm9wcyA9IHtcclxuICAgICAgLi4ucHJvcHMsXHJcbiAgICAgIHVybFBhcmFtOiBwcm9wcy51cmxQYXJhbSB8fCAnZmIzZC1wYWdlJyxcclxuICAgICAgbmF2aWdhdGVzOiBwcm9wcy5uYXZpZ2F0ZXM9PT11bmRlZmluZWQ/IDE6IHByb3BzLm5hdmlnYXRlc1xyXG4gICAgfTtcclxuICAgIHRoaXMucHJvcHMgPSBwcm9wcztcclxuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICB0aGlzLmJvb2tDdHJsID0gYm9va0N0cmw7XHJcbiAgICB0aGlzLnVybFBhcmFtID0gcHJvcHMudXJsUGFyYW07XHJcbiAgICB0aGlzLnduZCA9IGNvbnRleHQud25kO1xyXG5cclxuICAgIHRoaXMud25kLmZiM2QgPSB7XHJcbiAgICAgIC4uLnRoaXMud25kLmZiM2RcclxuICAgIH07XHJcbiAgICB0aGlzLnduZC5mYjNkLm5hdmlnYXRvciA9IHtcclxuICAgICAgLi4udGhpcy53bmQuZmIzZC5uYXZpZ2F0b3JcclxuICAgIH07XHJcbiAgICB0aGlzLm5hdmlnYXRvciA9IHRoaXMud25kLmZiM2QubmF2aWdhdG9yW3RoaXMudXJsUGFyYW1dID0ge1xyXG4gICAgICAuLi50aGlzLnduZC5mYjNkLm5hdmlnYXRvclt0aGlzLnVybFBhcmFtXVxyXG4gICAgfTtcclxuICAgIHRoaXMubmF2aWdhdG9yLmluc3RhbmNlcyA9ICh0aGlzLm5hdmlnYXRvci5pbnN0YW5jZXMgfHwgMCkrMTtcclxuXHJcbiAgICBpZih0aGlzLm5hdmlnYXRvci5pbnN0YW5jZXM8PXRoaXMucHJvcHMubmF2aWdhdGVzKSB7XHJcbiAgICAgIHRoaXMuYm9va0N0cmwuZ29Ub1BhZ2UodGhpcy5nZXRQYWdlTnVtYmVyKCkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuXHJcbiAgfVxyXG5cclxuICBnZXRQYXJhbWV0ZXJCeU5hbWUobmFtZSwgdXJsKSB7XHJcbiAgICBpZiAoIXVybCkge1xyXG4gICAgICB1cmwgPSB0aGlzLnduZC5sb2NhdGlvbi5ocmVmO1xyXG4gICAgfVxyXG4gICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvW1xcW1xcXV0vZywgJ1xcXFwkJicpO1xyXG4gICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKCdbPyZdJyArIG5hbWUgKyAnKD0oW15dKil8JnwjfCQpJyksXHJcbiAgICByZXN1bHRzID0gcmVnZXguZXhlYyh1cmwpO1xyXG4gICAgaWYgKCFyZXN1bHRzKSByZXR1cm4gbnVsbDtcclxuICAgIGlmICghcmVzdWx0c1syXSkgcmV0dXJuICcnO1xyXG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHRzWzJdLnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcclxuICB9XHJcblxyXG4gIGdldFBhZ2VOdW1iZXIoKSB7XHJcbiAgICB2YXIgbnVtYmVyID0gdGhpcy5nZXRQYXJhbWV0ZXJCeU5hbWUodGhpcy51cmxQYXJhbSk7XHJcbiAgICBudW1iZXIgPSBwYXJzZUludChudW1iZXIpO1xyXG4gICAgaWYoaXNOYU4obnVtYmVyKSkge1xyXG4gICAgICBudW1iZXIgPSAxO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bWJlci0xO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9BdXRvTmF2aWdhdG9yLmpzIiwiaW1wb3J0IHtUSFJFRX0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBNYXRoVXRpbHMgZnJvbSAnTWF0aFV0aWxzJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmluZGVyIHtcclxuXHJcbiAgY29uc3RydWN0b3IodmlzdWFsLCBwKSB7XHJcbiAgICB0aGlzLnZpc3VhbCA9IHZpc3VhbDtcclxuICAgIHRoaXMucCA9IHtcclxuICAgICAgLi4ucCxcclxuICAgICAgYmFja1NpemU6IDIqcC5jb3Zlci5kZXB0aCtwLnNoZWV0cypwLnBhZ2UuZGVwdGhcclxuICAgIH07XHJcbiAgICB0aGlzLk9aID0gbmV3IFRIUkVFLlZlY3RvcjMoMCwwLDEpO1xyXG5cclxuICAgIHRoaXMuYmFja0cgPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkocC5jb3Zlci5kZXB0aCwgdGhpcy5wLmJhY2tTaXplLCBwLmNvdmVyLmhlaWdodCk7XHJcblxyXG4gICAgdGhpcy5tYXRlcmlhbHMgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe2NvbG9yOiBwLmNvdmVyLmNvbG9yfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe2NvbG9yOiBwLmNvdmVyLmNvbG9yfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe2NvbG9yOiBwLmNvdmVyLmNvbG9yfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe2NvbG9yOiBwLmNvdmVyLmNvbG9yfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe2NvbG9yOiBwLmNvdmVyLmNvbG9yfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe2NvbG9yOiBwLmNvdmVyLmNvbG9yfSlcclxuICAgICAgICAgICAgICAgICAgICAgXTtcclxuXHJcbiAgICBjb25zdCBiYWNrTSA9IG5ldyBUSFJFRS5NZXNoKHRoaXMuYmFja0csIG5ldyBUSFJFRS5NZXNoRmFjZU1hdGVyaWFsKHRoaXMubWF0ZXJpYWxzKSk7XHJcblxyXG4gICAgaWYocC5jb3Zlci5iaW5kZXJUZXh0dXJlIT09JycpIHtcclxuICAgICAgdGhpcy52aXN1YWwudGV4dHVyZUxvYWRlci5sb2FkKHAuY292ZXIuYmluZGVyVGV4dHVyZSwgKHRleHR1cmUpPT4ge1xyXG4gICAgICAgIHRoaXMubWF0ZXJpYWxzWzFdLmNvbG9yLnNldEhleCgweEZGRkZGRik7XHJcbiAgICAgICAgdGhpcy5tYXRlcmlhbHNbMV0ubWFwID0gdGV4dHVyZTtcclxuICAgICAgICB0ZXh0dXJlLm1pbkZpbHRlciA9IFRIUkVFLkxpbmVhckZpbHRlcjtcclxuICAgICAgICB0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLm1hdGVyaWFsc1sxXS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMudGhyZWUgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcclxuICAgIHRoaXMuYmFjayA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xyXG4gICAgdGhpcy5iYWNrUlQgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcclxuICAgIHRoaXMuYmFja1JSID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XHJcbiAgICB0aGlzLmJhY2tMVCA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xyXG4gICAgdGhpcy5iYWNrTFIgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcclxuICAgIHRoaXMubGVmdFBpdm90ID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XHJcbiAgICB0aGlzLnJpZ2h0UGl2b3QgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcclxuXHJcbiAgICB0aGlzLmJhY2suYWRkKGJhY2tNKTtcclxuICAgIHRoaXMuYmFjay5hZGQodGhpcy5sZWZ0UGl2b3QpO1xyXG4gICAgdGhpcy5iYWNrLmFkZCh0aGlzLnJpZ2h0UGl2b3QpO1xyXG4gICAgdGhpcy5iYWNrUlQuYWRkKHRoaXMuYmFjayk7XHJcbiAgICB0aGlzLmJhY2tSUi5hZGQodGhpcy5iYWNrUlQpO1xyXG4gICAgdGhpcy5iYWNrTFQuYWRkKHRoaXMuYmFja1JSKTtcclxuICAgIHRoaXMuYmFja0xSLmFkZCh0aGlzLmJhY2tMVCk7XHJcbiAgICB0aGlzLnRocmVlLmFkZCh0aGlzLmJhY2tMUik7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgZm9yKGxldCBtIG9mIHRoaXMubWF0ZXJpYWxzKSB7XHJcbiAgICAgIGlmKG0ubWFwKSB7XHJcbiAgICAgICAgbS5tYXAgPSBudWxsO1xyXG4gICAgICAgIG0ubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICAgIG0uZGlzcG9zZSgpO1xyXG4gICAgfVxyXG4gICAgZGVsZXRlIHRoaXMubWF0ZXJpYWxzO1xyXG4gICAgdGhpcy5iYWNrRy5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICBzZXQoYW5nbGUpIHtcclxuICAgIGxldCByaWdodCwgbGVmdDtcclxuICAgIGlmKGFuZ2xlPk1hdGguUEkvMikge1xyXG4gICAgICByaWdodCA9IE1hdGguUEkvMjtcclxuICAgICAgbGVmdCA9IGFuZ2xlLU1hdGguUEkvMjtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICByaWdodCA9IGFuZ2xlO1xyXG4gICAgICBsZWZ0ID0gMDtcclxuICAgIH1cclxuICAgIGNvbnN0IHAgPSB0aGlzLnAsdHIxPXt4Oi0wLjUqcC5jb3Zlci5kZXB0aCx5OjAuNSpwLmJhY2tTaXplLXAuY292ZXIuZGVwdGh9O1xyXG4gICAgdGhpcy5iYWNrUlQucG9zaXRpb24uc2V0KHRyMS54LHRyMS55LDApO1xyXG4gICAgdGhpcy5iYWNrUlIucG9zaXRpb24uc2V0KC10cjEueCwtdHIxLnksMCk7XHJcbiAgICB0aGlzLmJhY2tSUi5xdWF0ZXJuaW9uLnNldEZyb21BeGlzQW5nbGUodGhpcy5PWiwgcmlnaHQpO1xyXG5cclxuICAgIGNvbnN0IHRyMj17eDpwLmJhY2tTaXplLTIqcC5jb3Zlci5kZXB0aC0wLjUqcC5jb3Zlci5kZXB0aCx5OjAuNSpwLmJhY2tTaXplLXAuY292ZXIuZGVwdGh9O1xyXG4gICAgdGhpcy5iYWNrTFQucG9zaXRpb24uc2V0KHRyMi54LHRyMi55LDApO1xyXG4gICAgdGhpcy5iYWNrTFIucG9zaXRpb24uc2V0KC10cjIueCwtdHIyLnksMCk7XHJcbiAgICB0aGlzLmJhY2tMUi5xdWF0ZXJuaW9uLnNldEZyb21BeGlzQW5nbGUodGhpcy5PWiwgbGVmdCk7XHJcbiAgfVxyXG5cclxuICBzZXRMZWZ0KGFuZ2xlKSB7XHJcbiAgICBjb25zdCBQSSA9IE1hdGguUEk7XHJcbiAgICB0aGlzLmxlZnRQaXZvdC5wb3NpdGlvbi5zZXQoTWF0aFV0aWxzLmludGVycG9sYXRlTGluZWFyKFstUEksLVBJLzJdLFswLHRoaXMucC5jb3Zlci5kZXB0aF0sYW5nbGUpLDAuNSp0aGlzLnAuYmFja1NpemUtMC41KnRoaXMucC5jb3Zlci5kZXB0aCwwKTtcclxuICAgIHRoaXMubGVmdFBpdm90LnF1YXRlcm5pb24uc2V0RnJvbUF4aXNBbmdsZSh0aGlzLk9aLCBhbmdsZSk7XHJcbiAgfVxyXG5cclxuICBzZXRSaWdodChhbmdsZSkge1xyXG4gICAgY29uc3QgUEkgPSBNYXRoLlBJO1xyXG4gICAgICB0aGlzLnJpZ2h0UGl2b3QucG9zaXRpb24uc2V0KE1hdGhVdGlscy5pbnRlcnBvbGF0ZUxpbmVhcihbLVBJLzIsMF0sW3RoaXMucC5jb3Zlci5kZXB0aCwwXSxhbmdsZSksLTAuNSp0aGlzLnAuYmFja1NpemUrMC41KnRoaXMucC5jb3Zlci5kZXB0aCwwKTtcclxuICAgICAgdGhpcy5yaWdodFBpdm90LnF1YXRlcm5pb24uc2V0RnJvbUF4aXNBbmdsZSh0aGlzLk9aLCBhbmdsZSk7XHJcbiAgfVxyXG5cclxuICBqb2luTGVmdENvdmVyKGNvdmVyKSB7XHJcbiAgICBjb3Zlci50aHJlZS5wb3NpdGlvbi5zZXQoMCwtMC41KnRoaXMucC5jb3Zlci5kZXB0aCwwKTtcclxuICAgIHRoaXMubGVmdFBpdm90LmFkZChjb3Zlci50aHJlZSk7XHJcbiAgfVxyXG5cclxuICBkaXNjb25uZWN0TGVmdENvdmVyKGNvdmVyKSB7XHJcbiAgICB0aGlzLmxlZnRQaXZvdC5yZW1vdmUoY292ZXIudGhyZWUpO1xyXG4gIH1cclxuXHJcbiAgam9pblJpZ2h0Q292ZXIoY292ZXIpIHtcclxuICAgIGNvdmVyLnRocmVlLnBvc2l0aW9uLnNldCgwLC0wLjUqdGhpcy5wLmNvdmVyLmRlcHRoLDApO1xyXG4gICAgdGhpcy5yaWdodFBpdm90LmFkZChjb3Zlci50aHJlZSk7XHJcbiAgfVxyXG5cclxuICBkaXNjb25uZWN0UmlnaHRDb3Zlcihjb3Zlcikge1xyXG4gICAgdGhpcy5yaWdodFBpdm90LnJlbW92ZShjb3Zlci50aHJlZSk7XHJcbiAgfVxyXG5cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9CaW5kZXIuanMiLCJpbXBvcnQgeyQsIFRIUkVFfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IHtwcm9wcyBhcyAgYm9va1Byb3BzfSBmcm9tICcuLi9wcm9wcy9ib29rJztcclxuaW1wb3J0IEdyYXBoVXRpbHMgZnJvbSAnR3JhcGhVdGlscyc7XHJcbmltcG9ydCBCaW5kZXIgZnJvbSAnLi9CaW5kZXInO1xyXG5pbXBvcnQgQ292ZXIgZnJvbSAnLi9Db3Zlcic7XHJcbmltcG9ydCBTaGVldEJsb2NrIGZyb20gJy4vU2hlZXRCbG9jayc7XHJcbmltcG9ydCBTaGVldFBoeXNpY3MgZnJvbSAnLi9TaGVldFBoeXNpY3MnO1xyXG5pbXBvcnQgUGFnZU1hbmFnZXIgZnJvbSAnLi9QYWdlTWFuYWdlcic7XHJcbmltcG9ydCBDU1NMYXllciBmcm9tICdDU1NMYXllcic7XHJcbmltcG9ydCBDc3NMYXllcnNNYW5hZ2VyIGZyb20gJy4vQ3NzTGF5ZXJzTWFuYWdlcic7XHJcbmltcG9ydCBTZWFyY2hFbmdpbmUgZnJvbSAnLi9TZWFyY2hFbmdpbmUnO1xyXG5pbXBvcnQgQ3VzdG9tRXZlbnRDb252ZXJ0ZXIgZnJvbSAnQ3VzdG9tRXZlbnRDb252ZXJ0ZXInO1xyXG5pbXBvcnQgQ2lyY2xlVGFyZ2V0IGZyb20gJ3RhcmdldHMvQ2lyY2xlVGFyZ2V0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvb2sgZXh0ZW5kcyBUSFJFRS5FdmVudERpc3BhdGNoZXIge1xyXG4gIC8vIHBhZ2VDYWxsYmFjayBzYW1wbGVzXHJcblxyXG4gIC8vIChuKT0+ICh7XHJcbiAgLy8gICB0eXBlOiAnaW1hZ2UnLFxyXG4gIC8vICAgc3JjOiAnc2FtcGxlLnBuZycsXHJcbiAgLy8gICBpbnRlcmFjdGl2ZTogZmFsc2VcclxuICAvLyB9KTtcclxuICAvL1xyXG4gIC8vIChuKT0+ICh7XHJcbiAgLy8gICB0eXBlOiAnaHRtbCcsXHJcbiAgLy8gICBzcmM6ICdzYW1wbGUuaHRtbCcsXHJcbiAgLy8gICBpbnRlcmFjdGl2ZTogdHJ1ZVxyXG4gIC8vIH0pO1xyXG4gIC8vXHJcbiAgLy8gY29uc3QgcGRmID0gbmV3IFBkZignc2FtcGxlLnBkZicpO1xyXG4gIC8vIChuKT0+ICh7XHJcbiAgLy8gICB0eXBlOiAncGRmJyxcclxuICAvLyAgIHNyYzogcGRmLFxyXG4gIC8vICAgaW50ZXJhY3RpdmU6IGZhbHNlXHJcbiAgLy8gfSk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZpc3VhbCwgc2hlZXRzLCBwYWdlQ2FsbGJhY2ssIHByb3BzKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy52aXN1YWwgPSB2aXN1YWw7XHJcbiAgICB0aGlzLnAgPSB7XHJcbiAgICAgIC4uLkJvb2sucHJlcGFyZVByb3BzKHByb3BzKSxcclxuICAgICAgc2hlZXRzLFxyXG4gICAgICBwYWdlQ2FsbGJhY2tcclxuICAgIH07XHJcbiAgICB0aGlzLnBhZ2VNYW5hZ2VyID0gbmV3IFBhZ2VNYW5hZ2VyKHZpc3VhbCwgdGhpcywgdGhpcy5wKTtcclxuICAgIENTU0xheWVyLmluaXQodmlzdWFsLmRvYyk7XHJcbiAgICB0aGlzLmxheWVyTWFuYWdlciA9IG5ldyBDc3NMYXllcnNNYW5hZ2VyKHRoaXMpO1xyXG4gICAgdGhpcy5zZWFyY2hFbmdpbmUgPSBuZXcgU2VhcmNoRW5naW5lKHBhZ2VDYWxsYmFjaywgMiooc2hlZXRzKzIpKTtcclxuICAgIHRoaXMuc2VhcmNoRW5naW5lLm9uUGFnZUhpdHNDaGFuZ2VkID0gKHBhZ2UsIHF1ZXJ5KT0+IHtcclxuICAgICAgdGhpcy5wYWdlTWFuYWdlci5yZWZyZXNoUGFnZVF1ZXJ5KHBhZ2UsIHF1ZXJ5KTtcclxuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KHtcclxuICAgICAgICB0eXBlOiAnc2VhcmNoUmVzdWx0cycsXHJcbiAgICAgICAgcmVzdWx0czogdGhpcy5zZWFyY2hFbmdpbmUucmVzdWx0cyxcclxuICAgICAgICBsYXN0UGFnZTogcGFnZSxcclxuICAgICAgICBxdWVyeVxyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy50aHJlZSA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xyXG5cclxuICAgIHRoaXMuYmluZGVyID0gbmV3IEJpbmRlcih2aXN1YWwsIHRoaXMucCk7XHJcbiAgICB0aGlzLnRocmVlLmFkZCh0aGlzLmJpbmRlci50aHJlZSk7XHJcblxyXG4gICAgdGhpcy5sZWZ0Q292ZXIgPSBuZXcgQ292ZXIodmlzdWFsLCB7Li4udGhpcy5wLCBzZXRUZXh0dXJlOiB0aGlzLnNldExlZnRDb3ZlclRleHR1cmUuYmluZCh0aGlzKX0sIE1hdGguUEkvMiwgJ29wZW5lZCcpO1xyXG4gICAgdGhpcy5iaW5kZXIuam9pbkxlZnRDb3Zlcih0aGlzLmxlZnRDb3Zlcik7XHJcbiAgICB0aGlzLnN1YnNjcmliZVNoZWV0QmxvY2sodGhpcy5sZWZ0Q292ZXIsIDApO1xyXG4gICAgdGhpcy5yaWdodENvdmVyID0gbmV3IENvdmVyKHZpc3VhbCwgey4uLnRoaXMucCwgc2V0VGV4dHVyZTogdGhpcy5zZXRSaWdodENvdmVyVGV4dHVyZS5iaW5kKHRoaXMpfSwgMCwgJ2Nsb3NlZCcpO1xyXG4gICAgdGhpcy5iaW5kZXIuam9pblJpZ2h0Q292ZXIodGhpcy5yaWdodENvdmVyKTtcclxuICAgIHRoaXMuc3Vic2NyaWJlU2hlZXRCbG9jayh0aGlzLnJpZ2h0Q292ZXIsIDIqKHRoaXMucC5zaGVldHMrMSkpO1xyXG5cclxuICAgIHRoaXMudGhyZWVTaGVldEJsb2NrcyA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xyXG4gICAgdGhpcy50aHJlZS5hZGQodGhpcy50aHJlZVNoZWV0QmxvY2tzKTtcclxuICAgIHRoaXMudGhyZWVTaGVldEJsb2Nrcy5wb3NpdGlvbi5zZXQoMC41KnRoaXMucC5jb3Zlci5kZXB0aC0wLjUqc2hlZXRzKnRoaXMucC5wYWdlLmRlcHRoLC0wLjUqc2hlZXRzKnRoaXMucC5wYWdlLmRlcHRoLDApO1xyXG5cclxuICAgIHRoaXMuc2hlZXRCbG9ja3MgPSBbXTtcclxuICAgIGlmKHNoZWV0cz4wKSB7XHJcbiAgICAgIHRoaXMuYWRkU2hlZXRCbG9jaygwLCBuZXcgU2hlZXRCbG9jayh2aXN1YWwsIHsuLi50aGlzLnAsIHNldFRleHR1cmU6IHRoaXMuc2V0UGFnZVRleHR1cmUuYmluZCh0aGlzKX0sIDAsIHNoZWV0cywgMCwgJ2Nsb3NlZCcpKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmFuZ2xlID0gMDtcclxuICAgIHRoaXMuY2xvc2VkQW5nbGUgPSAwO1xyXG4gICAgdGhpcy5zZXQodGhpcy5hbmdsZSwwKTtcclxuXHJcbiAgICB0aGlzLnRocmVlLnBvc2l0aW9uLnNldCgtMC41KnRoaXMucC5jb3Zlci5kZXB0aCswLjUqc2hlZXRzKnRoaXMucC5wYWdlLmRlcHRoLDAsMCk7XHJcbiAgICB0aGlzLnNoZWV0UGh5c2ljcyA9IG5ldyBTaGVldFBoeXNpY3ModGhpcy5wLnBhZ2Uud2lkdGgvdGhpcy5wLnNjYWxlLCB0aGlzLnAuZ3Jhdml0eSwgdGhpcy5wLnBhZ2UuY29ybmVyRGV2aWF0aW9uKTtcclxuXHJcbiAgICB0aGlzLmJpbmRzID0ge1xyXG4gICAgICB1cGRhdGU6IHRoaXMudXBkYXRlLmJpbmQodGhpcylcclxuICAgIH07XHJcbiAgICB0aGlzLnZpc3VhbC5hZGRSZW5kZXJDYWxsYmFjayh0aGlzLmJpbmRzLnVwZGF0ZSk7XHJcblxyXG4gICAgdGhpcy5iaW5kcy5vblBpY2tDYWxsYmFjayA9IHRoaXMub25QaWNrQ2FsbGJhY2suYmluZCh0aGlzKVxyXG4gICAgdGhpcy52aXN1YWwuZHJhZy5vblBpY2tDYWxsYmFjayA9IHRoaXMuYmluZHMub25QaWNrQ2FsbGJhY2s7XHJcbiAgICB0aGlzLmJpbmRzLm9uRHJhZ0NhbGxiYWNrID0gdGhpcy5vbkRyYWdDYWxsYmFjay5iaW5kKHRoaXMpXHJcbiAgICB0aGlzLnZpc3VhbC5kcmFnLm9uRHJhZ0NhbGxiYWNrID0gdGhpcy5iaW5kcy5vbkRyYWdDYWxsYmFjaztcclxuICAgIHRoaXMuYmluZHMub25SZWxlYXNlQ2FsbGJhY2sgPSB0aGlzLm9uUmVsZWFzZUNhbGxiYWNrLmJpbmQodGhpcylcclxuICAgIHRoaXMudmlzdWFsLmRyYWcub25SZWxlYXNlQ2FsbGJhY2sgPSB0aGlzLmJpbmRzLm9uUmVsZWFzZUNhbGxiYWNrO1xyXG5cclxuICAgIHRoaXMuZHJhZ0FuZ2xlID0gMC4wNTtcclxuICAgIHRoaXMudG1wID0ge1xyXG4gICAgICBib3hzOiBbXHJcbiAgICAgICAgbmV3IFRIUkVFLkJveDMoKSxcclxuICAgICAgICBuZXcgVEhSRUUuQm94MygpXHJcbiAgICAgIF1cclxuICAgIH07XHJcblxyXG4gICAgdGhpcy52aXN1YWwuYWRkT2JqZWN0KHRoaXMudGhyZWUpO1xyXG5cclxuICAgIHNldFRpbWVvdXQoKCk9PiB7XHJcbiAgICAgIHRoaXMubm90aWZ5QmVmb3JlQW5pbWF0aW9uKCk7XHJcbiAgICAgIHRoaXMubm90aWZ5QWZ0ZXJBbmltYXRpb24oKTtcclxuICAgIH0sIDEwMCk7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgdGhpcy52aXN1YWwucmVtb3ZlT2JqZWN0KHRoaXMudGhyZWUpO1xyXG4gICAgdGhpcy5zaGVldFBoeXNpY3MuZGlzcG9zZSgpO1xyXG4gICAgZGVsZXRlIHRoaXMudmlzdWFsLmRyYWcub25QaWNrQ2FsbGJhY2s7XHJcbiAgICBkZWxldGUgdGhpcy52aXN1YWwuZHJhZy5vbkRyYWdDYWxsYmFjaztcclxuICAgIGRlbGV0ZSB0aGlzLnZpc3VhbC5kcmFnLm9uUmVsZWFzZUNhbGxiYWNrO1xyXG4gICAgdGhpcy52aXN1YWwucmVtb3ZlUmVuZGVyQ2FsbGJhY2sodGhpcy5iaW5kcy51cGRhdGUpO1xyXG4gICAgdGhpcy5yZW1vdmVTaGVldEJsb2NrcygwLCB0aGlzLnNoZWV0QmxvY2tzLmxlbmd0aCk7XHJcbiAgICB0aGlzLmJpbmRlci5kaXNjb25uZWN0TGVmdENvdmVyKHRoaXMubGVmdENvdmVyKTtcclxuICAgIHRoaXMucmVtb3ZlU2hlZXRCbG9jayh0aGlzLmxlZnRDb3Zlcik7XHJcbiAgICB0aGlzLmJpbmRlci5kaXNjb25uZWN0UmlnaHRDb3Zlcih0aGlzLnJpZ2h0Q292ZXIpO1xyXG4gICAgdGhpcy5yZW1vdmVTaGVldEJsb2NrKHRoaXMucmlnaHRDb3Zlcik7XHJcbiAgICB0aGlzLmJpbmRlci5kaXNwb3NlKCk7XHJcbiAgICB0aGlzLmxheWVyTWFuYWdlci5kaXNwb3NlKCk7XHJcbiAgICBDU1NMYXllci5kaXNwb3NlKCk7XHJcbiAgICB0aGlzLnBhZ2VNYW5hZ2VyLmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG4gIC8vIHB1YmxpY3Mge1xyXG5cclxuICBnZXRQYWdlQ2FsbGJhY2soKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wLnBhZ2VDYWxsYmFjaztcclxuICB9XHJcblxyXG4gIHNldFF1ZXJ5KHF1ZXJ5KSB7XHJcbiAgICB0aGlzLnNlYXJjaEVuZ2luZS5zZXRRdWVyeShxdWVyeSk7XHJcbiAgfVxyXG5cclxuICBpc1Byb2Nlc3NpbmcoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zaGVldFBoeXNpY3MuZ2V0U2l6ZSgpIT09MDtcclxuICB9XHJcblxyXG4gIGdldFBhZ2VzKCkge1xyXG4gICAgcmV0dXJuIDQrMip0aGlzLnAuc2hlZXRzO1xyXG4gIH1cclxuXHJcbiAgc2V0RmxpcFByb2dyZXNzQ2xiKGNsYikge1xyXG4gICAgdGhpcy5wLmZsaXBQcm9ncmVzc0NsYiA9IGNsYjtcclxuICB9XHJcblxyXG4gIHNldEluamVjdG9yKGluamVjdG9yKSB7XHJcbiAgICB0aGlzLnAuaW5qZWN0b3IgPSBpbmplY3RvcjtcclxuICB9XHJcblxyXG4gIGlzQWN0aXZlUGFnZShuKSB7XHJcbiAgICBsZXQgcmVzID0gdHJ1ZTtcclxuICAgIGlmKG4+MSAmJiBuPHRoaXMuZ2V0UGFnZXMoKS0yKSB7XHJcbiAgICAgIGZvcihsZXQgYiBvZiB0aGlzLnNoZWV0QmxvY2tzKSB7XHJcbiAgICAgICAgaWYobi0yPjIqYi5wLmZpcnN0ICYmIG4tMjwyKmIucC5sYXN0LTEpIHtcclxuICAgICAgICAgIHJlcyA9IGZhbHNlO1xyXG4gICAgICAgICAgYnJlYWtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxuICBnZXRCbG9ja0J5UGFnZShuKSB7XHJcbiAgICBsZXQgYmxvY2s7XHJcbiAgICBpZihuPDIpIHtcclxuICAgICAgYmxvY2sgPSB0aGlzLmxlZnRDb3ZlcjtcclxuICAgIH1cclxuICAgIGVsc2UgaWYobjwyKih0aGlzLnAuc2hlZXRzKzEpKSB7XHJcbiAgICAgIGZvcihsZXQgYiBvZiB0aGlzLnNoZWV0QmxvY2tzKSB7XHJcbiAgICAgICAgaWYobi0yPj0yKmIucC5maXJzdCAmJiBuLTI8MipiLnAubGFzdCkge1xyXG4gICAgICAgICAgYmxvY2sgPSBiO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgYmxvY2sgPSB0aGlzLnJpZ2h0Q292ZXI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYmxvY2s7XHJcbiAgfVxyXG5cclxuICBnZXRCbG9ja1BhZ2VzKGJsb2NrKSB7XHJcbiAgICBsZXQgcmFuZ2U7XHJcbiAgICBzd2l0Y2ggKGJsb2NrKSB7XHJcbiAgICAgIGNhc2UgdGhpcy5sZWZ0Q292ZXI6IHtcclxuICAgICAgICAgIHJhbmdlID0gWzAsIDFdO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgdGhpcy5yaWdodENvdmVyOiB7XHJcbiAgICAgICAgcmFuZ2UgPSBbMioodGhpcy5wLnNoZWV0cysxKSwgMioodGhpcy5wLnNoZWV0cysxKSsxXTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgcmFuZ2UgPSBibG9jaz8gWzIqKGJsb2NrLnAuZmlyc3QrMSksIDIqKGJsb2NrLnAubGFzdCsxKS0xXTogdW5kZWZpbmVkO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmFuZ2U7XHJcbiAgfVxyXG5cclxuICBnZXRQYWdlKCkge1xyXG4gICAgY29uc3QgUEkgPSBNYXRoLlBJO1xyXG4gICAgbGV0IHA7XHJcbiAgICBpZih0aGlzLmFuZ2xlID09PSBQSS8yIHx8IHRoaXMuYW5nbGUgPT09IDMqUEkvMikge1xyXG4gICAgICBmb3IobGV0IGJsb2NrIG9mIHRoaXMuc2hlZXRCbG9ja3MpIHtcclxuICAgICAgICBpZihibG9jay5hbmdsZTw9UEkvMikge1xyXG4gICAgICAgICAgcCA9IHRoaXMuZ2V0QmxvY2tQYWdlcyhibG9jaylbMF0tMTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZighcCkge1xyXG4gICAgICAgIHAgPSB0aGlzLmdldFBhZ2VzKCktMztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZih0aGlzLmFuZ2xlPFBJLzIpIHtcclxuICAgICAgcCA9IDA7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKHRoaXMuYW5nbGU+MypQSS8yKSB7XHJcbiAgICAgIHAgPSAxO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZih0aGlzLmFuZ2xlPFBJKSB7XHJcbiAgICAgIHAgPSB0aGlzLmdldFBhZ2VzKCktMztcclxuICAgIH1cclxuICAgIGVsc2UgaWYodGhpcy5hbmdsZT49UEkpIHtcclxuICAgICAgcCA9IHRoaXMuZ2V0UGFnZXMoKS0xO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHA7XHJcbiAgfVxyXG5cclxuICBnZXRMZWZ0RmxpcHBpbmcoKSB7XHJcbiAgICBsZXQgYmxvY2s7XHJcbiAgICBjb25zdCBsZWZ0ID0gdGhpcy5zaGVldEJsb2Nrc1swXSwgUEkgPSBNYXRoLlBJO1xyXG4gICAgaWYodGhpcy5hbmdsZT09PVBJKSB7XHJcbiAgICAgIGJsb2NrID0gdGhpcy5yaWdodENvdmVyO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGlmKGxlZnQgJiYgbGVmdC5zdGF0ZT09PSdjbG9zZWQnICYmIGxlZnQuYW5nbGU+UEkvMikge1xyXG4gICAgICAgIGJsb2NrID0gbGVmdDtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKHRoaXMuYW5nbGUgPT09IFBJLzIgfHwgdGhpcy5hbmdsZSA9PT0gMypQSS8yKSB7XHJcbiAgICAgICAgYmxvY2sgPSB0aGlzLmxlZnRDb3ZlcjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGJsb2NrO1xyXG4gIH1cclxuXHJcbiAgZ2V0UmlnaHRGbGlwcGluZygpIHtcclxuICAgIGxldCBibG9jaztcclxuICAgIGNvbnN0IHJpZ2h0ID0gdGhpcy5zaGVldEJsb2Nrc1t0aGlzLnNoZWV0QmxvY2tzLmxlbmd0aC0xXSwgUEkgPSBNYXRoLlBJO1xyXG4gICAgaWYodGhpcy5hbmdsZT09PTApIHtcclxuICAgICAgYmxvY2sgPSB0aGlzLmxlZnRDb3ZlcjtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBpZihyaWdodCAmJiByaWdodC5zdGF0ZT09PSdjbG9zZWQnICYmIHJpZ2h0LmFuZ2xlPD1QSS8yKSB7XHJcbiAgICAgICAgYmxvY2sgPSByaWdodDtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKHRoaXMuYW5nbGU9PT1QSS8yIHx8IHRoaXMuYW5nbGUgPT09IDMqUEkvMikge1xyXG4gICAgICAgIGJsb2NrID0gdGhpcy5yaWdodENvdmVyO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYmxvY2s7XHJcbiAgfVxyXG5cclxuICBnZXRDbG9zZWRCbG9ja0FuZ2xlKGFuZ2xlKSB7XHJcbiAgICBsZXQgY2xvc2VkQW5nbGUsIHtQSX0gPSBNYXRoO1xyXG5cclxuICAgIGlmKHRoaXMubGVmdENvdmVyLnBoeXNpY0lkKSB7XHJcbiAgICAgIGxldCB0ZXN0O1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHRlc3QgPSBNYXRoLmFicyh0aGlzLnNoZWV0UGh5c2ljcy5nZXRQYXJhbWV0cih0aGlzLmxlZnRDb3Zlci5waHlzaWNJZCwgJ2FuZ2xlJyktYW5nbGUpXHJcbiAgICAgIH1cclxuICAgICAgY2F0Y2goZSkge1xyXG4gICAgICAgIHRlc3QgPSAwO1xyXG4gICAgICB9XHJcbiAgICAgIGNsb3NlZEFuZ2xlID0gYW5nbGU+UEkvMiB8fCB0ZXN0PlBJLzY/IFBJLzI6IHRoaXMuY2xvc2VkQW5nbGU7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKHRoaXMucmlnaHRDb3Zlci5waHlzaWNJZCkge1xyXG4gICAgICBsZXQgdGVzdDtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICB0ZXN0ID0gTWF0aC5hYnModGhpcy5zaGVldFBoeXNpY3MuZ2V0UGFyYW1ldHIodGhpcy5yaWdodENvdmVyLnBoeXNpY0lkLCAnYW5nbGUnKS1hbmdsZSlcclxuICAgICAgfVxyXG4gICAgICBjYXRjaChlKSB7XHJcbiAgICAgICAgdGVzdCA9IDA7XHJcbiAgICAgIH1cclxuICAgICAgY2xvc2VkQW5nbGUgPSBhbmdsZTxQSS8yIHx8IHRlc3Q+UEkvNj8gUEkvMisxZS03OiB0aGlzLmNsb3NlZEFuZ2xlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGNsb3NlZEFuZ2xlID0gUEkvMisoYW5nbGUhPT0wKSoxZS03O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIG9wZW5lZEFuZ2xlOiBhbmdsZSxcclxuICAgICAgY2xvc2VkQW5nbGUsXHJcbiAgICAgIGJpbmRlclR1cm46IHRoaXMuY2xvc2VkQW5nbGVcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmbGlwTGVmdChzaXplPTEsIHByb2dyZXNzQ2xiPXRoaXMucC5mbGlwUHJvZ3Jlc3NDbGIpIHtcclxuICAgIGxldCBibG9jaywgcmVzO1xyXG4gICAgaWYodGhpcy5zaGVldFBoeXNpY3MuZ2V0U2l6ZSgpPDI1KSB7XHJcbiAgICAgIGNvbnN0IGxlZnQgPSB0aGlzLnNoZWV0QmxvY2tzWzBdLCBQSSA9IE1hdGguUEk7XHJcbiAgICAgIGlmKHRoaXMuYW5nbGU9PT1QSSkge1xyXG4gICAgICAgIHJlcyA9IHRoaXMuY29ubmVjdFBoeXNpY3MoXHJcbiAgICAgICAgICBibG9jaz10aGlzLnJpZ2h0Q292ZXIsXHJcbiAgICAgICAgICB0aGlzLnAuY292ZXIubWFzcyxcclxuICAgICAgICAgIFBJLFxyXG4gICAgICAgICAgLXRoaXMucC5jb3Zlci5zdGFydFZlbG9jaXR5LFxyXG4gICAgICAgICAgdGhpcy5wLmNvdmVyLmZsZXhpYmlsaXR5LFxyXG4gICAgICAgICAgMCxcclxuICAgICAgICAgIChhbmdsZSxoZWlnaHQpPT50aGlzLnNldCgzKlBJLzItYW5nbGUvMixoZWlnaHQpLFxyXG4gICAgICAgICAgKGFuZ2xlLGhlaWdodCk9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0KDMqUEkvMi1hbmdsZS8yLDApO1xyXG4gICAgICAgICAgICB0aGlzLnNldFNoZWV0QmxvY2tzKGFuZ2xlPyBQSTogUEkvMisxZS03LCdjbG9zZWQnKTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBwcm9ncmVzc0NsYlxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgaWYobGVmdCAmJiBsZWZ0LnN0YXRlPT09J2Nsb3NlZCcgJiYgbGVmdC5hbmdsZT5QSS8yKSB7XHJcbiAgICAgICAgICBibG9jayA9IHNpemU8bGVmdC5nZXRTaXplKCk/IHRoaXMuc3BsaXRTaGVldEJsb2NrKDAsIGxlZnQuZ2V0U2l6ZSgpLXNpemUpWzFdOiBsZWZ0O1xyXG4gICAgICAgICAgcmVzID0gdGhpcy5jb25uZWN0UGh5c2ljcyhcclxuICAgICAgICAgICAgYmxvY2ssXHJcbiAgICAgICAgICAgIHRoaXMucC5wYWdlLm1hc3MqYmxvY2suZ2V0U2l6ZSgpLFxyXG4gICAgICAgICAgICBQSSxcclxuICAgICAgICAgICAgLXRoaXMucC5wYWdlLnN0YXJ0VmVsb2NpdHksXHJcbiAgICAgICAgICAgIHRoaXMucC5wYWdlLmZsZXhpYmlsaXR5LFxyXG4gICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICAoYW5nbGUsaGVpZ2h0KT0+YmxvY2suc2V0KHRoaXMuZ2V0Q2xvc2VkQmxvY2tBbmdsZShhbmdsZSksJ29wZW5lZCcsaGVpZ2h0KSxcclxuICAgICAgICAgICAgQm9vay5maW5pc2hBbmltYXRpb25DbGIuYmluZCh7Ym9vazogdGhpcywgYmxvY2t9KSxcclxuICAgICAgICAgICAgcHJvZ3Jlc3NDbGJcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYodGhpcy5hbmdsZSA9PT0gUEkvMiB8fCB0aGlzLmFuZ2xlID09PSAzKlBJLzIpIHtcclxuICAgICAgICAgIHJlcyA9IHRoaXMuY29ubmVjdFBoeXNpY3MoXHJcbiAgICAgICAgICAgIGJsb2NrPXRoaXMubGVmdENvdmVyLFxyXG4gICAgICAgICAgICB0aGlzLnAuY292ZXIubWFzcyxcclxuICAgICAgICAgICAgUEksXHJcbiAgICAgICAgICAgIC10aGlzLnAuY292ZXIuc3RhcnRWZWxvY2l0eSxcclxuICAgICAgICAgICAgdGhpcy5wLmNvdmVyLmZsZXhpYmlsaXR5LFxyXG4gICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICAoYW5nbGUsaGVpZ2h0KT0+IHtcclxuICAgICAgICAgICAgICB0aGlzLnNldCgyKlBJLWFuZ2xlLzIsaGVpZ2h0KTtcclxuICAgICAgICAgICAgICBpZihhbmdsZT5QSS8yKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFNoZWV0QmxvY2tzKGFuZ2xlPyBQSS8yOiAwLCdjbG9zZWQnKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIChhbmdsZSxoZWlnaHQpPT4gdGhpcy5zZXQoYW5nbGU9PT0wPyAwOiAyKlBJLWFuZ2xlLzIsMCksXHJcbiAgICAgICAgICAgIHByb2dyZXNzQ2xiXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIGZsaXBSaWdodChzaXplPTEsIHByb2dyZXNzQ2xiPXRoaXMucC5mbGlwUHJvZ3Jlc3NDbGIpIHtcclxuICAgIGxldCBibG9jaywgcmVzO1xyXG4gICAgaWYodGhpcy5zaGVldFBoeXNpY3MuZ2V0U2l6ZSgpPDI1KSB7XHJcbiAgICAgIGNvbnN0IHJpZ2h0ID0gdGhpcy5zaGVldEJsb2Nrc1t0aGlzLnNoZWV0QmxvY2tzLmxlbmd0aC0xXSwgUEkgPSBNYXRoLlBJO1xyXG4gICAgICBpZih0aGlzLmFuZ2xlPT09MCkge1xyXG4gICAgICAgIHJlcyA9IHRoaXMuY29ubmVjdFBoeXNpY3MoXHJcbiAgICAgICAgICBibG9jaz10aGlzLmxlZnRDb3ZlcixcclxuICAgICAgICAgIHRoaXMucC5jb3Zlci5tYXNzLFxyXG4gICAgICAgICAgMCxcclxuICAgICAgICAgIHRoaXMucC5jb3Zlci5zdGFydFZlbG9jaXR5LFxyXG4gICAgICAgICAgdGhpcy5wLmNvdmVyLmZsZXhpYmlsaXR5LFxyXG4gICAgICAgICAgMCxcclxuICAgICAgICAgIChhbmdsZSxoZWlnaHQpPT50aGlzLnNldChhbmdsZS8yLGhlaWdodCksXHJcbiAgICAgICAgICAoYW5nbGUsaGVpZ2h0KT0+IHtcclxuICAgICAgICAgICAgdGhpcy5zZXQoYW5nbGUvMiwwKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRTaGVldEJsb2NrcyhhbmdsZT8gUEkvMjogMCwnY2xvc2VkJyk7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgcHJvZ3Jlc3NDbGJcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGlmKHJpZ2h0ICYmIHJpZ2h0LnN0YXRlPT09J2Nsb3NlZCcgJiYgcmlnaHQuYW5nbGU8PVBJLzIpIHtcclxuICAgICAgICAgIGJsb2NrID0gc2l6ZTxyaWdodC5nZXRTaXplKCk/IHRoaXMuc3BsaXRTaGVldEJsb2NrKHRoaXMuc2hlZXRCbG9ja3MubGVuZ3RoLTEsIHNpemUpWzBdOiByaWdodDtcclxuICAgICAgICAgIHJlcyA9IHRoaXMuY29ubmVjdFBoeXNpY3MoXHJcbiAgICAgICAgICAgIGJsb2NrLFxyXG4gICAgICAgICAgICB0aGlzLnAucGFnZS5tYXNzKmJsb2NrLmdldFNpemUoKSxcclxuICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgdGhpcy5wLnBhZ2Uuc3RhcnRWZWxvY2l0eSxcclxuICAgICAgICAgICAgdGhpcy5wLnBhZ2UuZmxleGliaWxpdHksXHJcbiAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgIChhbmdsZSxoZWlnaHQpPT5ibG9jay5zZXQodGhpcy5nZXRDbG9zZWRCbG9ja0FuZ2xlKGFuZ2xlKSwnb3BlbmVkJyxoZWlnaHQpLFxyXG4gICAgICAgICAgICBCb29rLmZpbmlzaEFuaW1hdGlvbkNsYi5iaW5kKHtib29rOiB0aGlzLCBibG9ja30pLFxyXG4gICAgICAgICAgICBwcm9ncmVzc0NsYlxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZih0aGlzLmFuZ2xlPT09UEkvMiB8fCB0aGlzLmFuZ2xlID09PSAzKlBJLzIpIHtcclxuICAgICAgICAgIHJlcyA9IHRoaXMuY29ubmVjdFBoeXNpY3MoXHJcbiAgICAgICAgICAgIGJsb2NrPXRoaXMucmlnaHRDb3ZlcixcclxuICAgICAgICAgICAgdGhpcy5wLmNvdmVyLm1hc3MsXHJcbiAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgIHRoaXMucC5jb3Zlci5zdGFydFZlbG9jaXR5LFxyXG4gICAgICAgICAgICB0aGlzLnAuY292ZXIuZmxleGliaWxpdHksXHJcbiAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgIChhbmdsZSxoZWlnaHQpPT4ge1xyXG4gICAgICAgICAgICAgIHRoaXMuc2V0KFBJLzIrYW5nbGUvMixoZWlnaHQpO1xyXG4gICAgICAgICAgICAgIGlmKGFuZ2xlPFBJLzIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U2hlZXRCbG9ja3MoUEkvMisxZS03LCdjbG9zZWQnKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIChhbmdsZSxoZWlnaHQpPT50aGlzLnNldChQSS8yK2FuZ2xlLzIsMCksXHJcbiAgICAgICAgICAgIHByb2dyZXNzQ2xiXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIC8vIH1cclxuXHJcbiAgY2xlYXJIb3ZlckluZm8oKSB7XHJcbiAgICB0aGlzLnBhZ2VNYW5hZ2VyLnR1cm5PbkV2ZW50cygpO1xyXG4gICAgZGVsZXRlIHRoaXMuaG92ZXJJbmZvLmJsb2NrLmZvcmNlO1xyXG4gICAgZGVsZXRlIHRoaXMuaG92ZXJJbmZvLmJsb2NrLmNvcm5lckZvcmNlO1xyXG4gICAgZGVsZXRlIHRoaXMuaG92ZXJJbmZvO1xyXG4gIH1cclxuXHJcbiAgeFNlZ21lbnQoKSB7XHJcbiAgICBjb25zdCBib3hzID0gdGhpcy50bXAuYm94cywgcmVzID0ge307XHJcbiAgICBpZih0aGlzLmxlZnRDb3Zlci5waHlzaWNJZCkge1xyXG4gICAgICBib3hzWzBdLnNldEZyb21PYmplY3QodGhpcy5yaWdodENvdmVyLnRocmVlKTtcclxuICAgICAgcmVzLm1pbiA9IC0ocmVzLm1heCA9IGJveHNbMF0ubWF4LngpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZih0aGlzLnJpZ2h0Q292ZXIucGh5c2ljSWQpIHtcclxuICAgICAgYm94c1swXS5zZXRGcm9tT2JqZWN0KHRoaXMubGVmdENvdmVyLnRocmVlKTtcclxuICAgICAgcmVzLm1heCA9IC0ocmVzLm1pbiA9IGJveHNbMF0ubWluLngpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGJveHNbMF0uc2V0RnJvbU9iamVjdCh0aGlzLmxlZnRDb3Zlci50aHJlZSk7XHJcbiAgICAgIGJveHNbMV0uc2V0RnJvbU9iamVjdCh0aGlzLnJpZ2h0Q292ZXIudGhyZWUpO1xyXG4gICAgICBib3hzWzBdLnVuaW9uKGJveHNbMV0pO1xyXG4gICAgICByZXMubWluID0gYm94c1swXS5taW4ueDtcclxuICAgICAgcmVzLm1heCA9IGJveHNbMF0ubWF4Lng7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgY29tcHV0ZVRhcmdldChwb2ludCkge1xyXG4gICAgbGV0IHt4LCB5fSA9IHBvaW50LCBzZWcgPSB0aGlzLnhTZWdtZW50KCksIGFuZ2xlO1xyXG4gICAgYW5nbGUgPSAoc2VnLm1heC14KS8oc2VnLm1heC1zZWcubWluKSpNYXRoLlBJO1xyXG4gICAgLy8gYW5nbGUgPSBNYXRoLmFjb3MoeC9NYXRoLnNxcnQoeCp4K3kqeSkpO1xyXG4gICAgcmV0dXJuIE1hdGgubWF4KHRoaXMuZHJhZ0FuZ2xlLCBNYXRoLm1pbihNYXRoLlBJLXRoaXMuZHJhZ0FuZ2xlLCBhbmdsZSkpO1xyXG4gIH1cclxuXHJcbiAgb25QaWNrQ2FsbGJhY2sob2JqZWN0KSB7XHJcbiAgICBsZXQgcmVzID0gZmFsc2U7XHJcbiAgICBjb25zdCBibG9jayA9IG9iamVjdC5vYmplY3QudXNlckRhdGEuc2VsZixcclxuICAgICAgICAgIHAgPSB7Li4ub2JqZWN0LnV2fSwgaSA9IG9iamVjdC5mYWNlLm1hdGVyaWFsSW5kZXg7XHJcbiAgICBpZihpPDIpIHtcclxuICAgICAgcC54ID0gaT09PTA/IHAueDogMS1wLng7XHJcbiAgICAgIGlmKGJsb2NrLmNvcm5lclRhcmdldC50ZXN0SW50ZXJzZWN0aW9uKG51bGwsIHApICYmIGJsb2NrLnBoeXNpY0lkKSB7XHJcbiAgICAgICAgaWYodGhpcy5ob3ZlckluZm8pIHtcclxuICAgICAgICAgIHRoaXMuY2xlYXJIb3ZlckluZm8oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYmxvY2suZm9yY2UgPSBTaGVldFBoeXNpY3MuZHJhZ0ZvcmNlQ2xiO1xyXG4gICAgICAgIGJsb2NrLmNvcm5lckZvcmNlID0gU2hlZXRQaHlzaWNzLmdldERyYWdDb3JuZXJGb3JjZUNsYih0aGlzLmNvbXB1dGVUYXJnZXQob2JqZWN0LnBvaW50KSk7XHJcbiAgICAgICAgdGhpcy5kcmFnSW5mbyA9IHtcclxuICAgICAgICAgIG9iamVjdCxcclxuICAgICAgICAgIGJsb2NrXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXMgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucGFnZU1hbmFnZXIudHVybk9mZkV2ZW50cygpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgb25EcmFnQ2FsbGJhY2socG9pbnQpIHtcclxuICAgIGNvbnN0IGJsb2NrID0gdGhpcy5kcmFnSW5mby5ibG9jaywgcCA9IGJsb2NrLmdldFByb3BzKCk7XHJcbiAgICBibG9jay5mb3JjZSA9IFNoZWV0UGh5c2ljcy5kcmFnRm9yY2VDbGI7XHJcbiAgICBibG9jay5jb3JuZXJGb3JjZSA9IFNoZWV0UGh5c2ljcy5nZXREcmFnQ29ybmVyRm9yY2VDbGIodGhpcy5jb21wdXRlVGFyZ2V0KHBvaW50KSk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIG9uUmVsZWFzZUNhbGxiYWNrKCkge1xyXG4gICAgZGVsZXRlIHRoaXMuZHJhZ0luZm8uYmxvY2suZm9yY2U7XHJcbiAgICBkZWxldGUgdGhpcy5kcmFnSW5mby5ibG9jay5jb3JuZXJGb3JjZTtcclxuICAgIGRlbGV0ZSB0aGlzLmRyYWdJbmZvO1xyXG4gICAgdGhpcy5wYWdlTWFuYWdlci50dXJuT25FdmVudHMoKTtcclxuICB9XHJcblxyXG4gIGdldEZsaXBwaW5nKGkpIHtcclxuICAgIHJldHVybiBpPyB0aGlzLmdldExlZnRGbGlwcGluZygpOiB0aGlzLmdldFJpZ2h0RmxpcHBpbmcoKTtcclxuICB9XHJcblxyXG4gIGZsaXAoaSwgc2l6ZT0xKSB7XHJcbiAgICByZXR1cm4gaT8gdGhpcy5mbGlwTGVmdChzaXplKTogdGhpcy5mbGlwUmlnaHQoc2l6ZSk7XHJcbiAgfVxyXG5cclxuICBjb3JuZXJDYWxsYmFjayhlLCBkYXRhKSB7XHJcbiAgICBjb25zdCB7aSwgbn0gPSBkYXRhLmRhdGE7XHJcbiAgICBpZihlLnR5cGU9PT0nbW91c2VvdmVyJykge1xyXG4gICAgICBpZih0aGlzLmhvdmVySW5mbyAmJiB0aGlzLmhvdmVySW5mby5wZW5kaW5ncyE9PXVuZGVmaW5lZCkge1xyXG4gICAgICAgICsrdGhpcy5ob3ZlckluZm8ucGVuZGluZ3M7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgaWYodGhpcy5ob3ZlckluZm8pIHtcclxuICAgICAgICAgIGNvbnNvbGUud2FybignV3Jvbmcgc3RhdGU6IGVsZW1lbnQgaXMgYWxyZWFkeSBob3ZlcicpO1xyXG4gICAgICAgICAgaWYodGhpcy5ob3ZlckluZm8ubiE9PW4pIHtcclxuICAgICAgICAgICAgdGhpcy5jbGVhckhvdmVySW5mbygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZighdGhpcy5ob3ZlckluZm8gJiYgIXRoaXMuZHJhZ0luZm8pIHtcclxuICAgICAgICAgIGxldCByZXMgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcclxuICAgICAgICAgIGNvbnN0IGhvdmVyQW5nbGUgPSAwLjAyLFxyXG4gICAgICAgICAgICAgICAgaG92ZXIgPSB0aGlzLmdldEJsb2NrQnlQYWdlKG4pLFxyXG4gICAgICAgICAgICAgICAgcG9zc2libGUgPSB0aGlzLmdldEZsaXBwaW5nKGkpO1xyXG4gICAgICAgICAgaWYobj4xICYmIG48MioodGhpcy5wLnNoZWV0cysxKSAmJiBob3Zlci5waHlzaWNJZCAmJiAoaG92ZXIuYW5nbGU8aG92ZXJBbmdsZSB8fCBob3Zlci5hbmdsZT5NYXRoLlBJLWhvdmVyQW5nbGUpKSB7XHJcbiAgICAgICAgICAgIHJlcyA9IFByb21pc2UucmVzb2x2ZShob3Zlcik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIGlmKGhvdmVyPT09cG9zc2libGUpIHtcclxuICAgICAgICAgICAgY29uc3Qgc2hlZXRCbG9ja3MgPSBbXHJcbiAgICAgICAgICAgICAgdGhpcy5sZWZ0Q292ZXIsXHJcbiAgICAgICAgICAgICAgLi4udGhpcy5zaGVldEJsb2NrcyxcclxuICAgICAgICAgICAgICB0aGlzLnJpZ2h0Q292ZXJcclxuICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgY29uc3QgaiA9IHNoZWV0QmxvY2tzLmluZGV4T2YoaG92ZXIpLCBuZXh0QmxvY2sgPSB+aj8gc2hlZXRCbG9ja3NbaisyKmktMV06IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgaWYoIW5leHRCbG9jayB8fCAhbmV4dEJsb2NrLnBoeXNpY0lkIHx8IG5leHRCbG9jay5hbmdsZT5ob3ZlckFuZ2xlICYmIG5leHRCbG9jay5hbmdsZTxNYXRoLlBJLWhvdmVyQW5nbGUpIHtcclxuICAgICAgICAgICAgICByZXMgPSB0aGlzLmZsaXAoaSwgMSkudGhlbigoYmxvY2spPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaGVldFBoeXNpY3Muc2V0UGFyYW1ldHIoYmxvY2sucGh5c2ljSWQsICd2ZWxvY2l0eScsIDApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJsb2NrO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIHRoaXMuaG92ZXJJbmZvID0ge1xyXG4gICAgICAgICAgICAgICAgcGVuZGluZ3M6IDFcclxuICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXMudGhlbigoYmxvY2spPT4ge1xyXG4gICAgICAgICAgICBpZih0aGlzLmhvdmVySW5mbyAmJiB0aGlzLmhvdmVySW5mby5wZW5kaW5nczwxKSB7XHJcbiAgICAgICAgICAgICAgYmxvY2sgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuaG92ZXJJbmZvO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKGJsb2NrKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5wYWdlTWFuYWdlci50dXJuT2ZmRXZlbnRzKCk7XHJcbiAgICAgICAgICAgICAgY29uc3QgIHAgPSBibG9jay5nZXRQcm9wcygpO1xyXG4gICAgICAgICAgICAgIGJsb2NrLmZvcmNlID0gdGhpcy5zaGVldFBoeXNpY3MuZ2V0VGFyZ2V0Rm9yY2VDbGIocC5tYXNzKmJsb2NrLmdldFNpemUoKSwgaT8gTWF0aC5QSS1ob3ZlckFuZ2xlOiBob3ZlckFuZ2xlKTtcclxuICAgICAgICAgICAgICBibG9jay5jb3JuZXJGb3JjZSA9ICgpPT4gKGk/IC0xOiAxKSpTaGVldFBoeXNpY3MuaG92ZXJDb3JuZXJGb3JjZUNsYigpO1xyXG4gICAgICAgICAgICAgIHRoaXMuc2hlZXRQaHlzaWNzLnNldFBhcmFtZXRyKGJsb2NrLnBoeXNpY0lkLCAnYW5nbGUnLCBpPyBNYXRoLlBJLTAuNSpob3ZlckFuZ2xlOiAwLjUqaG92ZXJBbmdsZSk7XHJcbiAgICAgICAgICAgICAgdGhpcy5ob3ZlckluZm8gPSB7XHJcbiAgICAgICAgICAgICAgICBuLFxyXG4gICAgICAgICAgICAgICAgYmxvY2tcclxuICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgIHRoaXMudXBkYXRlKDEvMzApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKHRoaXMuaG92ZXJJbmZvICYmIGUudHlwZT09PSdtb3VzZW91dCcpIHtcclxuICAgICAgaWYodGhpcy5ob3ZlckluZm8ucGVuZGluZ3MhPT11bmRlZmluZWQpIHtcclxuICAgICAgICAtLXRoaXMuaG92ZXJJbmZvLnBlbmRpbmdzO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYobj09PXRoaXMuaG92ZXJJbmZvLm4pIHtcclxuICAgICAgICB0aGlzLmNsZWFySG92ZXJJbmZvKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYoZS50eXBlPT09J2NsaWNrJykge1xyXG4gICAgICBjb25zdCBob3ZlciA9IHRoaXMuZ2V0QmxvY2tCeVBhZ2Uobik7XHJcbiAgICAgIGlmKGhvdmVyLnBoeXNpY0lkKSB7XHJcbiAgICAgICAgY29uc3QgYW5nbGUgPSB0aGlzLnNoZWV0UGh5c2ljcy5nZXRQYXJhbWV0cihob3Zlci5waHlzaWNJZCwgJ2FuZ2xlJyk7XHJcbiAgICAgICAgaWYoKGk/IE1hdGguUEktYW5nbGU6IGFuZ2xlKTwzKnRoaXMuZHJhZ0FuZ2xlKSB7XHJcbiAgICAgICAgICBjb25zdCBpZCA9IGhvdmVyLnBoeXNpY0lkLFxyXG4gICAgICAgICAgICAgICAgcHJvcHMgPSBob3Zlci5nZXRQcm9wcygpO1xyXG4gICAgICAgICAgdGhpcy5zaGVldFBoeXNpY3Muc2V0UGFyYW1ldHIoaWQsICd2ZWxvY2l0eScsIChpPyAtMTogMSkqcHJvcHMuc3RhcnRWZWxvY2l0eSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhZGRTaGVldEJsb2NrKHAsIGJsb2NrKSB7XHJcbiAgICB0aGlzLnNoZWV0QmxvY2tzLnNwbGljZShwLCAwLCBibG9jayk7XHJcbiAgICB0aGlzLnN1YnNjcmliZVNoZWV0QmxvY2soYmxvY2ssIDIpO1xyXG4gICAgdGhpcy50aHJlZVNoZWV0QmxvY2tzLmFkZChibG9jay50aHJlZSk7XHJcbiAgfVxyXG5cclxuICBzdWJzY3JpYmVTaGVldEJsb2NrKGJsb2NrLCBvZmZzZXQpIHtcclxuICAgIGNvbnN0IGV2ZW50Q29udmVydGVyID0gbmV3IEN1c3RvbUV2ZW50Q29udmVydGVyKHRoaXMudmlzdWFsLnduZCwgdGhpcy52aXN1YWwuZG9jLCBDaXJjbGVUYXJnZXQudGVzdCksXHJcbiAgICAgICAgICByID0gMC4xNSxcclxuICAgICAgICAgIHRhcmdldCA9IG5ldyBDaXJjbGVUYXJnZXQoMS0wLjUqciwgMC41KnIsIHIpO1xyXG4gICAgdGFyZ2V0LmJsb2NrID0gYmxvY2s7XHJcbiAgICB0YXJnZXQuY2FsbGJhY2sgPSB0aGlzLmNvcm5lckNhbGxiYWNrLmJpbmQodGhpcyk7XHJcbiAgICBldmVudENvbnZlcnRlci5hZGRDdXN0b20odGFyZ2V0KTtcclxuICAgIGJsb2NrLmNvcm5lclRhcmdldCA9IHRhcmdldDtcclxuICAgIGJsb2NrLnRocmVlLnVzZXJEYXRhLm1vdXNlQ2FsbGJhY2sgPSAoZSwgZGF0YSk9PiB7XHJcbiAgICAgIGNvbnN0IGkgPSBkYXRhLmZhY2UubWF0ZXJpYWxJbmRleDtcclxuICAgICAgaWYoaTwyKSB7XHJcbiAgICAgICAgY29uc3QgbiA9IGk9PT0wPyBvZmZzZXQrMipibG9jay5wLmZpcnN0OiBvZmZzZXQrMipibG9jay5wLmxhc3QtMTtcclxuICAgICAgICBldmVudENvbnZlcnRlci5jb252ZXJ0KGUsIHt4OiBpPT09MD8gZGF0YS51di54OiAxLWRhdGEudXYueCwgeTogZGF0YS51di55LCBpLCBufSk7XHJcbiAgICAgICAgdGhpcy5wYWdlTWFuYWdlci50cmFuc2ZlckV2ZW50VG9UZXh0dXJlKG4sIGUsIGRhdGEpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhpcy52aXN1YWwuZHJhZy5hZGRUaHJlZShibG9jay50aHJlZSk7XHJcbiAgICB0aGlzLnZpc3VhbC5tb3VzZUV2ZW50cy5hZGRUaHJlZShibG9jay50aHJlZSk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVTaGVldEJsb2NrKGJsb2NrKSB7XHJcbiAgICB0aGlzLnZpc3VhbC5tb3VzZUV2ZW50cy5yZW1vdmVUaHJlZShibG9jay50aHJlZSk7XHJcbiAgICB0aGlzLnZpc3VhbC5kcmFnLnJlbW92ZVRocmVlKGJsb2NrLnRocmVlKTtcclxuICAgIHRoaXMudGhyZWVTaGVldEJsb2Nrcy5yZW1vdmUoYmxvY2sudGhyZWUpO1xyXG4gICAgYmxvY2suZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlU2hlZXRCbG9ja3MoZmlyc3QsIHNpemUpIHtcclxuICAgIGNvbnN0IGJsb2NrcyA9IHRoaXMuc2hlZXRCbG9ja3Muc3BsaWNlKGZpcnN0LCBzaXplKTtcclxuICAgIGZvcihsZXQgYmxvY2sgb2YgYmxvY2tzKSB7XHJcbiAgICAgIHRoaXMucmVtb3ZlU2hlZXRCbG9jayhibG9jayk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRQYWdlVGV4dHVyZShtYXRlcmlhbCwgbikge1xyXG4gICAgdGhpcy5wYWdlTWFuYWdlci5zZXRUZXh0dXJlKG1hdGVyaWFsLCBuKzIpO1xyXG4gIH1cclxuXHJcbiAgc2V0TGVmdENvdmVyVGV4dHVyZShtYXRlcmlhbCwgbikge1xyXG4gICAgdGhpcy5wYWdlTWFuYWdlci5zZXRUZXh0dXJlKG1hdGVyaWFsLCBuKTtcclxuICB9XHJcblxyXG4gIHNldFJpZ2h0Q292ZXJUZXh0dXJlKG1hdGVyaWFsLCBuKSB7XHJcbiAgICB0aGlzLnBhZ2VNYW5hZ2VyLnNldFRleHR1cmUobWF0ZXJpYWwsIG4rMioodGhpcy5wLnNoZWV0cysxKSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZmluaXNoQW5pbWF0aW9uQ2xiKGFuZ2xlKSB7XHJcbiAgICB0aGlzLmJsb2NrLnNldCh0aGlzLmJvb2suZ2V0Q2xvc2VkQmxvY2tBbmdsZShhbmdsZSkuY2xvc2VkQW5nbGUsJ2Nsb3NlZCcsMCk7XHJcbiAgICBjb25zdCBpID0gdGhpcy5ib29rLnNoZWV0QmxvY2tzLmluZGV4T2YodGhpcy5ibG9jayk7XHJcbiAgICBpZih+aSkge1xyXG4gICAgICBpZihhbmdsZT09PTApIHtcclxuICAgICAgICB0aGlzLmJvb2subWVyZ2VTaGVldEJsb2NrcyhpLCB0aGlzLmJvb2suc2hlZXRCbG9ja3MubGVuZ3RoLWkpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHRoaXMuYm9vay5tZXJnZVNoZWV0QmxvY2tzKDAsIGkrMSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNhbGNCbG9ja0ZvcmNlKGJsb2NrLCBvYmplY3QsIGFuZ2xlLCB2ZWxvY2l0eSwgY29ybmVySGVpZ2h0KSB7XHJcbiAgICByZXR1cm4gYmxvY2suZm9yY2U/IGJsb2NrLmZvcmNlKG9iamVjdCwgYW5nbGUsIHZlbG9jaXR5LCBjb3JuZXJIZWlnaHQpOiAwO1xyXG4gIH1cclxuXHJcbiAgY2FsY0Jsb2NrQ29ybmVyRm9yY2UoYmxvY2ssIG9iamVjdCwgYW5nbGUsIHZlbG9jaXR5LCBjb3JuZXJIZWlnaHQpIHtcclxuICAgIHJldHVybiBibG9jay5jb3JuZXJGb3JjZT8gYmxvY2suY29ybmVyRm9yY2Uob2JqZWN0LCBhbmdsZSwgdmVsb2NpdHksIGNvcm5lckhlaWdodCk6IDA7XHJcbiAgfVxyXG5cclxuICBub3RpZnlCZWZvcmVBbmltYXRpb24oKSB7XHJcbiAgICBsZXQgcmVzO1xyXG4gICAgaWYodGhpcy5hbmltYXRpb25Ob3RpZmljYXRpb24pIHtcclxuICAgICAgcmVzID0gUHJvbWlzZS5yZWplY3QoKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLmFuaW1hdGlvbk5vdGlmaWNhdGlvbiA9IHRydWU7XHJcbiAgICAgIHJlcyA9IHRoaXMubGF5ZXJNYW5hZ2VyLmhpZGUoKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxuICBub3RpZnlBZnRlckFuaW1hdGlvbigpIHtcclxuICAgIGlmKHRoaXMuYW5pbWF0aW9uTm90aWZpY2F0aW9uKSB7XHJcbiAgICAgIGRlbGV0ZSB0aGlzLmFuaW1hdGlvbk5vdGlmaWNhdGlvbjtcclxuICAgICAgdGhpcy5sYXllck1hbmFnZXIuc2hvdygpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29ubmVjdFBoeXNpY3MoYmxvY2ssIG1hc3MsIGFuZ2xlLCB2ZWxvY2l0eSwgZmxleGliaWxpdHksIGNvdmVySGVpZ2h0LCBzaW11bGF0ZUNsYiwgcmVtb3ZlQ2xiLCBwcm9ncmVzc0NsYikge1xyXG4gICAgY29uc3QgdHlwZSA9ICgpPT4gdGhpcy5ob3ZlckluZm8/ICdob3Zlcic6ICh0aGlzLmRyYWdJbmZvPyAnZHJhZyc6ICdmcmVlJyksXHJcbiAgICAgIHJlcyA9IHRoaXMuc2hlZXRQaHlzaWNzLmdldFNpemUoKT8gUHJvbWlzZS5yZXNvbHZlKCk6IHRoaXMubm90aWZ5QmVmb3JlQW5pbWF0aW9uKCk7XHJcbiAgICByZXR1cm4gcmVzLnRoZW4oKCk9PiB7XHJcbiAgICAgIGJsb2NrLnBoeXNpY0lkID0gdGhpcy5zaGVldFBoeXNpY3MuYWRkT2JqZWN0KFxyXG4gICAgICAgIG1hc3MsXHJcbiAgICAgICAgYW5nbGUsXHJcbiAgICAgICAgdmVsb2NpdHksXHJcbiAgICAgICAgZmxleGliaWxpdHksXHJcbiAgICAgICAgY292ZXJIZWlnaHQsXHJcbiAgICAgICAgKGFuZ2wsIGNoKT0+IHtcclxuICAgICAgICAgIHNpbXVsYXRlQ2xiKGFuZ2wsIGNoKTtcclxuICAgICAgICAgIHByb2dyZXNzQ2xiKGJsb2NrLCBNYXRoLmFicyhhbmdsZS1hbmdsKS9NYXRoLlBJLCAncHJvY2VzcycsIHR5cGUoKSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICAoYW5nbCwgY2gpPT4ge1xyXG4gICAgICAgICAgcmVtb3ZlQ2xiKGFuZ2wsIGNoKTtcclxuICAgICAgICAgIGRlbGV0ZSBibG9jay5waHlzaWNJZDtcclxuICAgICAgICAgIHByb2dyZXNzQ2xiKGJsb2NrLCBNYXRoLmFicyhhbmdsZS1hbmdsKS9NYXRoLlBJLCAnZmluaXNoJywgdHlwZSgpKTtcclxuICAgICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCk9PiB7XHJcbiAgICAgICAgICAgIGlmKCF0aGlzLnNoZWV0UGh5c2ljcy5nZXRTaXplKCkpIHtcclxuICAgICAgICAgICAgICB0aGlzLm5vdGlmeUFmdGVyQW5pbWF0aW9uKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgKG9iamVjdCwgYW5nbGUsIHZlbG9jaXR5LCBjb3JuZXJIZWlnaHQpPT4gdGhpcy5jYWxjQmxvY2tGb3JjZShibG9jaywgb2JqZWN0LCBhbmdsZSwgdmVsb2NpdHksIGNvcm5lckhlaWdodCksXHJcbiAgICAgICAgKG9iamVjdCwgYW5nbGUsIHZlbG9jaXR5LCBjb3JuZXJIZWlnaHQpPT4gdGhpcy5jYWxjQmxvY2tDb3JuZXJGb3JjZShibG9jaywgb2JqZWN0LCBhbmdsZSwgdmVsb2NpdHksIGNvcm5lckhlaWdodClcclxuICAgICAgKTtcclxuICAgICAgcHJvZ3Jlc3NDbGIoYmxvY2ssIDAsICdpbml0JywgdHlwZSgpKTtcclxuICAgICAgcmV0dXJuIGJsb2NrO1xyXG4gICAgfSkuY2F0Y2goKCk9PiB1bmRlZmluZWQpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKGR0KSB7XHJcbiAgICB0aGlzLnNoZWV0UGh5c2ljcy5zaW11bGF0ZShkdCk7XHJcbiAgfVxyXG5cclxuICBzcGxpdFNoZWV0QmxvY2soaSwgbGVmdFNpemUpIHtcclxuICAgIGNvbnN0IGJsb2NrID0gdGhpcy5zaGVldEJsb2Nrc1tpXTtcclxuICAgIGlmKGJsb2NrICYmIGxlZnRTaXplPGJsb2NrLmdldFNpemUoKSkge1xyXG4gICAgICBjb25zdCBuZXdCbG9jayA9IG5ldyBTaGVldEJsb2NrKHRoaXMudmlzdWFsLCB7Li4udGhpcy5wLCBzZXRUZXh0dXJlOiB0aGlzLnNldFBhZ2VUZXh0dXJlLmJpbmQodGhpcyl9LCBibG9jay5wLmZpcnN0LCBibG9jay5wLmZpcnN0K2xlZnRTaXplLCBibG9jay5hbmdsZSwgYmxvY2suc3RhdGUpO1xyXG4gICAgICBibG9jay5zZXQoYmxvY2suYW5nbGUsIGJsb2NrLnN0YXRlLCBibG9jay5jb3JuZXIuaGVpZ2h0LCBibG9jay5wLmZpcnN0K2xlZnRTaXplLCBibG9jay5wLmxhc3QpO1xyXG4gICAgICB0aGlzLmFkZFNoZWV0QmxvY2soaSwgbmV3QmxvY2spO1xyXG4gICAgICByZXR1cm4gW25ld0Jsb2NrLCBibG9ja107XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBtZXJnZVNoZWV0QmxvY2tzKGZpcnN0LCBzaXplKSB7XHJcbiAgICBpZihmaXJzdDx0aGlzLnNoZWV0QmxvY2tzLmxlbmd0aCkge1xyXG4gICAgICBzaXplID0gTWF0aC5taW4odGhpcy5zaGVldEJsb2Nrcy5sZW5ndGgtZmlyc3QsIHNpemUpO1xyXG4gICAgICBjb25zdCBmaXJzdEJsb2NrID0gdGhpcy5zaGVldEJsb2Nrc1tmaXJzdF0sIGxhc3RCbG9jayA9IHRoaXMuc2hlZXRCbG9ja3NbZmlyc3Qrc2l6ZS0xXTtcclxuICAgICAgZmlyc3RCbG9jay5zZXQoZmlyc3RCbG9jay5hbmdsZSwgZmlyc3RCbG9jay5zdGF0ZSwgZmlyc3RCbG9jay5jb3JuZXIuaGVpZ2h0LCBmaXJzdEJsb2NrLnAuZmlyc3QsIGxhc3RCbG9jay5wLmxhc3QpO1xyXG4gICAgICB0aGlzLnJlbW92ZVNoZWV0QmxvY2tzKGZpcnN0KzEsIHNpemUtMSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRTaGVldEJsb2NrcyhhbmdsZSwgc3RhdGUpIHtcclxuICAgIGlmKHN0YXRlPT09J2Nsb3NlZCcpIHtcclxuICAgICAgdGhpcy5jbG9zZWRBbmdsZSA9IGFuZ2xlO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zaGVldEJsb2Nrcy5mb3JFYWNoKChzKT0+IHtcclxuICAgICAgaWYoIXMucGh5c2ljSWQpIHtcclxuICAgICAgICBzLnNldChhbmdsZSwgc3RhdGUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHNldChhbmdsZSwgaGVpZ2h0PTApIHtcclxuICAgIHRoaXMuYW5nbGUgPSBhbmdsZTtcclxuICAgIGNvbnN0IFBJID0gTWF0aC5QSTtcclxuICAgIGlmKGFuZ2xlPFBJLzQpIHtcclxuICAgICAgdGhpcy5iaW5kZXIuc2V0KDApO1xyXG5cclxuICAgICAgdGhpcy5iaW5kZXIuc2V0TGVmdCgtUEkvMisyKmFuZ2xlKTtcclxuICAgICAgdGhpcy5sZWZ0Q292ZXIuc2V0KFBJLzIsJ29wZW5lZCcsaGVpZ2h0KTtcclxuXHJcbiAgICAgIHRoaXMuc2V0U2hlZXRCbG9ja3MoMCwnY2xvc2VkJyk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRSaWdodCgwKTtcclxuICAgICAgdGhpcy5yaWdodENvdmVyLnNldCgwLCdjbG9zZWQnLDApO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZihhbmdsZTwyKlBJLzQpIHtcclxuICAgICAgY29uc3QgYT0yKihhbmdsZS1QSS80KTtcclxuICAgICAgdGhpcy5iaW5kZXIuc2V0KGEpO1xyXG5cclxuICAgICAgdGhpcy5iaW5kZXIuc2V0TGVmdCgtYSk7XHJcbiAgICAgIHRoaXMubGVmdENvdmVyLnNldChQSS8yK2EsJ29wZW5lZCcsaGVpZ2h0KTtcclxuXHJcbiAgICAgIHRoaXMuc2V0U2hlZXRCbG9ja3MoYSwnY2xvc2VkJyk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRSaWdodCgtYSk7XHJcbiAgICAgIHRoaXMucmlnaHRDb3Zlci5zZXQoYSwnY2xvc2VkJywwKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYoYW5nbGU8MypQSS80KSB7XHJcbiAgICAgIGNvbnN0IGE9MiooYW5nbGUtUEkvMik7XHJcbiAgICAgIHRoaXMuYmluZGVyLnNldChQSS8yKTtcclxuXHJcbiAgICAgIHRoaXMuYmluZGVyLnNldExlZnQoLVBJLzIpO1xyXG4gICAgICB0aGlzLmxlZnRDb3Zlci5zZXQoUEksJ29wZW5lZCcsMCk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRSaWdodCgtUEkvMik7XHJcbiAgICAgIHRoaXMucmlnaHRDb3Zlci5zZXQoYSwnb3BlbmVkJyxoZWlnaHQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZihhbmdsZTw0KlBJLzQpIHtcclxuICAgICAgY29uc3QgYT0yKihhbmdsZS0zKlBJLzQpK1BJLzI7XHJcbiAgICAgIHRoaXMuYmluZGVyLnNldChhKTtcclxuXHJcbiAgICAgIHRoaXMuYmluZGVyLnNldExlZnQoLWEpO1xyXG4gICAgICB0aGlzLmxlZnRDb3Zlci5zZXQoYSwnY2xvc2VkJywwKTtcclxuXHJcbiAgICAgIHRoaXMuc2V0U2hlZXRCbG9ja3MoYSwnY2xvc2VkJyk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRSaWdodCgtUEkvMik7XHJcbiAgICAgIHRoaXMucmlnaHRDb3Zlci5zZXQoUEkvMiwnb3BlbmVkJyxoZWlnaHQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZihhbmdsZTw1KlBJLzQpIHtcclxuICAgICAgdGhpcy5iaW5kZXIuc2V0KFBJKTtcclxuXHJcbiAgICAgIHRoaXMuYmluZGVyLnNldExlZnQoLVBJKTtcclxuICAgICAgdGhpcy5sZWZ0Q292ZXIuc2V0KFBJLCdjbG9zZWQnLDApO1xyXG5cclxuICAgICAgdGhpcy5zZXRTaGVldEJsb2NrcyhQSSwnY2xvc2VkJyk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRSaWdodCgtUEkvMi0yKihhbmdsZS1QSSkpO1xyXG4gICAgICB0aGlzLnJpZ2h0Q292ZXIuc2V0KFBJLzIsJ29wZW5lZCcsaGVpZ2h0KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYoYW5nbGU8NipQSS80KSB7XHJcbiAgICAgIGNvbnN0IGE9MiooYW5nbGUtNSpQSS80KTtcclxuICAgICAgdGhpcy5iaW5kZXIuc2V0KFBJLWEpO1xyXG5cclxuICAgICAgdGhpcy5iaW5kZXIuc2V0TGVmdCgtUEkrYSk7XHJcbiAgICAgIHRoaXMubGVmdENvdmVyLnNldChQSS1hLCdjbG9zZWQnLDApO1xyXG5cclxuICAgICAgdGhpcy5zZXRTaGVldEJsb2NrcyhQSS1hLCdjbG9zZWQnKTtcclxuXHJcbiAgICAgIHRoaXMuYmluZGVyLnNldFJpZ2h0KC1QSSthKTtcclxuICAgICAgdGhpcy5yaWdodENvdmVyLnNldChQSS8yLWEsJ29wZW5lZCcsaGVpZ2h0KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYoYW5nbGU8NypQSS80KSB7XHJcbiAgICAgIGNvbnN0IGE9MiooYW5nbGUtNipQSS80KTtcclxuICAgICAgdGhpcy5iaW5kZXIuc2V0KFBJLzIpO1xyXG5cclxuICAgICAgdGhpcy5iaW5kZXIuc2V0TGVmdCgtUEkvMik7XHJcbiAgICAgIHRoaXMubGVmdENvdmVyLnNldChQSS1hLCdvcGVuZWQnLGhlaWdodCk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRSaWdodCgtUEkvMik7XHJcbiAgICAgIHRoaXMucmlnaHRDb3Zlci5zZXQoMCwnb3BlbmVkJywwKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYoYW5nbGU8OCpQSS80KSB7XHJcbiAgICAgIGNvbnN0IGE9MiooYW5nbGUtNypQSS80KTtcclxuICAgICAgdGhpcy5iaW5kZXIuc2V0KFBJLzItYSk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRMZWZ0KC1QSS8yKTtcclxuICAgICAgdGhpcy5sZWZ0Q292ZXIuc2V0KFBJLzIsJ29wZW5lZCcsaGVpZ2h0KTtcclxuXHJcbiAgICAgIHRoaXMuc2V0U2hlZXRCbG9ja3MoUEkvMi1hLCdjbG9zZWQnKTtcclxuXHJcbiAgICAgIHRoaXMuYmluZGVyLnNldFJpZ2h0KC1QSS8yK2EpO1xyXG4gICAgICB0aGlzLnJpZ2h0Q292ZXIuc2V0KFBJLzItYSwnY2xvc2VkJywwKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBjcmVhdGVTaWRlVGV4dHVyZShjb2xvcikge1xyXG4gICAgY29uc3QgakMgPSAkKCc8Y2FudmFzIHdpZHRoPVwiOFwiIGhlaWdodD1cIjhcIj48L2NhbnZhcz4nKTtcclxuICAgIGNvbnN0IGN0eCA9IGpDWzBdLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICBjdHguZmlsbFN0eWxlID0gR3JhcGhVdGlscy5jb2xvcjJSZ2JhKGNvbG9yLCAxKTtcclxuICAgIGN0eC5yZWN0KDAsIDAsIDgsIDcpO1xyXG4gICAgY3R4LmZpbGwoKTtcclxuICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgIGN0eC5maWxsU3R5bGUgPSBHcmFwaFV0aWxzLmNvbG9yMlJnYmEoR3JhcGhVdGlscy5pbnZlcnNlQ29sb3IoY29sb3IsMC41KSwgMSk7XHJcbiAgICBjdHgucmVjdCgwLCA3LCA4LCAxKTtcclxuICAgIGN0eC5maWxsKCk7XHJcbiAgICByZXR1cm4gakNbMF07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgcHJlcGFyZVByb3BzKHByb3BzKSB7XHJcbiAgICByZXR1cm4gQm9vay5jYWxjUHJvcHMoQm9vay5tZXJnZVByb3BzKGJvb2tQcm9wcygpLCBwcm9wcykpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG1lcmdlUHJvcHMoZmlyc3QsIHNlY29uZCkge1xyXG4gICAgc2Vjb25kID0gc2Vjb25kIHx8IHt9O1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgLi4uZmlyc3QsXHJcbiAgICAgIC4uLnNlY29uZCxcclxuICAgICAgc2hlZXQ6IHtcclxuICAgICAgICAuLi5maXJzdC5zaGVldCxcclxuICAgICAgICAuLi5zZWNvbmQuc2hlZXQsXHJcbiAgICAgIH0sXHJcbiAgICAgIGNvdmVyOiB7XHJcbiAgICAgICAgLi4uZmlyc3QuY292ZXIsXHJcbiAgICAgICAgLi4uc2Vjb25kLmNvdmVyLFxyXG4gICAgICB9LFxyXG4gICAgICBwYWdlOiB7XHJcbiAgICAgICAgLi4uZmlyc3QucGFnZSxcclxuICAgICAgICAuLi5zZWNvbmQucGFnZSxcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjYWxjUHJvcHMocHJvcHMpIHtcclxuICAgIGNvbnN0IHAgPSB7XHJcbiAgICAgIC4uLnByb3BzLFxyXG4gICAgICBzaGVldDoge1xyXG4gICAgICAgIC4uLnByb3BzLnNoZWV0XHJcbiAgICAgIH0sXHJcbiAgICAgIGNvdmVyOiB7XHJcbiAgICAgICAgLi4ucHJvcHMuc2hlZXQsXHJcbiAgICAgICAgLi4ucHJvcHMuY292ZXJcclxuICAgICAgfSxcclxuICAgICAgcGFnZToge1xyXG4gICAgICAgIC4uLnByb3BzLnNoZWV0LFxyXG4gICAgICAgIC4uLnByb3BzLnBhZ2VcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHNjYWxlID0gMTAsXHJcbiAgICBoZWlnaHQgPSBzY2FsZSpwLmhlaWdodCxcclxuICAgIHdpZHRoID0gc2NhbGUqcC53aWR0aCxcclxuICAgIGZsaXBQcm9ncmVzc0NsYiA9ICgpPT4gdW5kZWZpbmVkLFxyXG4gICAgc2hlZXQgPSB7XHJcbiAgICAgIHNpZGVUZXh0dXJlOiBwLnNoZWV0LnNpZGVUZXh0dXJlIHx8IEJvb2suY3JlYXRlU2lkZVRleHR1cmUocC5zaGVldC5jb2xvciksXHJcbiAgICB9LFxyXG4gICAgY292ZXIgPSB7XHJcbiAgICAgIC4uLnNoZWV0LFxyXG4gICAgICAuLi5wLmNvdmVyLFxyXG4gICAgICBkZXB0aDogc2NhbGUqcC5jb3Zlci5kZXB0aCxcclxuICAgICAgd2lkdGg6IHdpZHRoLFxyXG4gICAgICBoZWlnaHQ6IGhlaWdodCxcclxuICAgICAgcGFkZGluZzogc2NhbGUqcC5jb3Zlci5wYWRkaW5nXHJcbiAgICB9LFxyXG4gICAgcGFnZSA9IHtcclxuICAgICAgLi4uc2hlZXQsXHJcbiAgICAgIC4uLnAucGFnZSxcclxuICAgICAgZGVwdGg6IHNjYWxlKnAucGFnZS5kZXB0aCxcclxuICAgICAgd2lkdGg6IGNvdmVyLndpZHRoIC0gY292ZXIucGFkZGluZyxcclxuICAgICAgaGVpZ2h0OiBjb3Zlci5oZWlnaHQgLSAyKmNvdmVyLnBhZGRpbmdcclxuICAgIH0sXHJcbiAgICBtYXJrZXIgPSB7XHJcbiAgICAgIHVzZTogZmFsc2UsXHJcbiAgICAgIGNvbG9yOiAwWEZGMDAwMCxcclxuICAgICAgc2l6ZTogc2NhbGUqMC4wMDFcclxuICAgIH07XHJcbiAgICByZXR1cm4gey4uLnAsIHNjYWxlLCBoZWlnaHQsIHdpZHRoLCBmbGlwUHJvZ3Jlc3NDbGIsIGNvdmVyLCBwYWdlLCBtYXJrZXJ9O1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9Cb29rLmpzIiwiaW1wb3J0IHskLCBUSFJFRX0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBDb250cm9sbGVyIGZyb20gJ0NvbnRyb2xsZXInO1xyXG5pbXBvcnQge3Byb3BzIGFzICBib29rQ29udHJvbGxlclByb3BzfSBmcm9tICcuLi9wcm9wcy9ib29rQ29udHJvbGxlcic7XHJcbmltcG9ydCBFdmVudHNUb0FjdGlvbnMgZnJvbSAnRXZlbnRzVG9BY3Rpb25zJztcclxuaW1wb3J0IFN0YXRzIGZyb20gJ3N0YXRzLmpzJztcclxuaW1wb3J0IE9iamVjdDNEV2F0Y2hlciBmcm9tICdPYmplY3QzRFdhdGNoZXInO1xyXG5pbXBvcnQgRnVsbFNjcmVlbiBmcm9tICcuLi9USFJFRXgvRnVsbFNjcmVlbic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb29rQ29udHJvbGxlciBleHRlbmRzIENvbnRyb2xsZXIge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihib29rLCB2aWV3LCBwcm9wcykge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMuYm9vayA9IGJvb2s7XHJcbiAgICB0aGlzLnZpc3VhbCA9IGJvb2sudmlzdWFsO1xyXG4gICAgdGhpcy5wID0gQm9va0NvbnRyb2xsZXIucHJlcGFyZVByb3BzKHByb3BzKTtcclxuICAgIHRoaXMuZGV2aWNlUGl4ZWxSYXRpbyA9IHRoaXMudmlzdWFsLnduZC5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XHJcblxyXG4gICAgdGhpcy5vcmJpdCA9IGJvb2sudmlzdWFsLmdldE9yYml0KCk7XHJcbiAgICBib29rLnNldEZsaXBQcm9ncmVzc0NsYih0aGlzLnVwZGF0ZVZpZXdJZlN0YXRlLmJpbmQodGhpcykpO1xyXG4gICAgdGhpcy52aWV3ID0gdmlldztcclxuICAgIHRoaXMuYmluZEFjdGlvbnMoKTtcclxuXHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBzbWFydFBhbjogIXRoaXMuYWN0aW9uc1snY21kU21hcnRQYW4nXS5hY3RpdmUsXHJcbiAgICAgIHNpbmdsZVBhZ2U6IHRoaXMuYWN0aW9uc1snY21kU2luZ2xlUGFnZSddLmFjdGl2ZSB8fCB0aGlzLmFjdGlvbnNbJ2NtZFNpbmdsZVBhZ2UnXS5hY3RpdmVGb3JNb2JpbGUgJiYgdGhpcy5kZXZpY2VQaXhlbFJhdGlvPjEsXHJcbiAgICAgIHN0YXRzOiB0aGlzLmFjdGlvbnNbJ2NtZFN0YXRzJ10uYWN0aXZlLFxyXG4gICAgICBsaWdodGluZzogdGhpcy5wLmxpZ2h0aW5nLmRlZmF1bHQsXHJcbiAgICAgIGFjdGl2ZVNpZGU6IDFcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5ib3hzID0gW25ldyBUSFJFRS5Cb3gzKCksIG5ldyBUSFJFRS5Cb3gzKCldO1xyXG4gICAgdGhpcy5ib29rV2F0Y2hlciA9IG5ldyBPYmplY3QzRFdhdGNoZXIodGhpcy52aXN1YWwsICgpPT4ge1xyXG4gICAgICBpZih0aGlzLnN0YXRlLnNpbmdsZVBhZ2UpIHtcclxuICAgICAgICBpZih0aGlzLnN0YXRlLmFjdGl2ZVNpZGUpIHtcclxuICAgICAgICAgIHRoaXMuYm94c1swXS5zZXRGcm9tT2JqZWN0KGJvb2sucmlnaHRDb3Zlci50aHJlZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5ib3hzWzBdLnNldEZyb21PYmplY3QoYm9vay5sZWZ0Q292ZXIudGhyZWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB0aGlzLmJveHNbMF0uc2V0RnJvbU9iamVjdChib29rLmxlZnRDb3Zlci50aHJlZSk7XHJcbiAgICAgICAgdGhpcy5ib3hzWzFdLnNldEZyb21PYmplY3QoYm9vay5yaWdodENvdmVyLnRocmVlKTtcclxuICAgICAgICB0aGlzLmJveHNbMF0udW5pb24odGhpcy5ib3hzWzFdKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdGhpcy5ib3hzWzBdO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLmJvb2tXYXRjaGVyLnNjYWxlID0gdGhpcy5wLnNjYWxlLmRlZmF1bHQ7XHJcblxyXG4gICAgdGhpcy5TdGF0cyA9IG5ldyBTdGF0cygpO1xyXG4gICAgdGhpcy5TdGF0cy5kb21FbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICAgIHRoaXMuU3RhdHMuZG9tRWxlbWVudC5zdHlsZS50b3AgPSAnMHB4JztcclxuXHJcbiAgICB0aGlzLnZpc3VhbC5zZXRFeHRyYUxpZ2h0aW5nKHRoaXMuc3RhdGUubGlnaHRpbmcpO1xyXG4gICAgdGhpcy5iaW5kcyA9IHtcclxuICAgICAgb25TY3JlZW5Nb2RlQ2hhbmdlZDogdGhpcy5vblNjcmVlbk1vZGVDaGFuZ2VkLmJpbmQodGhpcyksXHJcbiAgICAgIHN0YXRzOiB0aGlzLlN0YXRzLnVwZGF0ZS5iaW5kKHRoaXMuU3RhdHMpLFxyXG4gICAgICBvblVwZGF0ZVZpZXc6IHRoaXMudXBkYXRlVmlldy5iaW5kKHRoaXMpXHJcbiAgICB9XHJcbiAgICBGdWxsU2NyZWVuLmFkZEV2ZW50TGlzdGVuZXIodGhpcy52aWV3LmdldFBhcmVudENvbnRhaW5lcigpLm93bmVyRG9jdW1lbnQsIHRoaXMuYmluZHMub25TY3JlZW5Nb2RlQ2hhbmdlZCk7XHJcblxyXG4gICAgdGhpcy5jbWRTbWFydFBhbigpO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIEZ1bGxTY3JlZW4ucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLnZpZXcuZ2V0UGFyZW50Q29udGFpbmVyKCkub3duZXJEb2N1bWVudCwgdGhpcy5iaW5kcy5vblNjcmVlbk1vZGVDaGFuZ2VkKTtcclxuICAgIGRlbGV0ZSB0aGlzLmJvb2s7XHJcbiAgICBkZWxldGUgdGhpcy52aWV3O1xyXG4gICAgZGVsZXRlIHRoaXMudmlzdWFsO1xyXG4gIH1cclxuXHJcbiAgc2V0VG9jQ3RybCh0b2NDdHJsKSB7XHJcbiAgICB0aGlzLnRvY0N0cmwgPSB0b2NDdHJsO1xyXG4gICAgdGhpcy50b2NDdHJsLm9uQ2hhbmdlID0gdGhpcy51cGRhdGVWaWV3LmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICB9XHJcblxyXG4gIHNldFByaW50ZXIocHJpbnRlcikge1xyXG4gICAgdGhpcy5wcmludGVyID0gcHJpbnRlcjtcclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgc2V0U291bmRzKHNvdW5kcykge1xyXG4gICAgdGhpcy5zb3VuZHMgPSBzb3VuZHM7XHJcbiAgICBzb3VuZHMuc2V0RW5hYmxlZCh0aGlzLmFjdGlvbnNbJ2NtZFNvdW5kcyddLmFjdGl2ZSk7XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICB9XHJcblxyXG5cclxuICBvblNjcmVlbk1vZGVDaGFuZ2VkKGUpIHtcclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgY2FuWm9vbUluKCkge1xyXG4gICAgcmV0dXJuICF0aGlzLnN0YXRlLnNtYXJ0UGFuIHx8IE1hdGguYWJzKHRoaXMuYm9va1dhdGNoZXIuc2NhbGUtdGhpcy5wLnNjYWxlLm1heCk+dGhpcy5wLmVwcztcclxuICB9XHJcblxyXG4gIGNhblpvb21PdXQoKSB7XHJcbiAgICByZXR1cm4gIXRoaXMuc3RhdGUuc21hcnRQYW4gfHwgTWF0aC5hYnModGhpcy5ib29rV2F0Y2hlci5zY2FsZS10aGlzLnAuc2NhbGUubWluKT50aGlzLnAuZXBzO1xyXG4gIH1cclxuXHJcbiAgY2FuRGVmYXVsdFpvb20oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5zbWFydFBhbjtcclxuICB9XHJcblxyXG4gIGNtZFpvb21JbigpIHtcclxuICAgIGlmKHRoaXMuc3RhdGUuc21hcnRQYW4pIHtcclxuICAgICAgdGhpcy5ib29rV2F0Y2hlci5zY2FsZSA9IE1hdGgubWluKHRoaXMucC5zY2FsZS5tYXgsIHRoaXMuYm9va1dhdGNoZXIuc2NhbGUrdGhpcy5wLnNjYWxlLmRlbHRhKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLm9yYml0Lnpvb21Jbig2LjYqdGhpcy5wLnNjYWxlLmRlbHRhLzAuMzIpO1xyXG4gICAgfVxyXG4gICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgfVxyXG5cclxuICBjbWRab29tT3V0KCkge1xyXG4gICAgaWYodGhpcy5zdGF0ZS5zbWFydFBhbikge1xyXG4gICAgICB0aGlzLmJvb2tXYXRjaGVyLnNjYWxlID0gTWF0aC5tYXgodGhpcy5wLnNjYWxlLm1pbiwgdGhpcy5ib29rV2F0Y2hlci5zY2FsZS10aGlzLnAuc2NhbGUuZGVsdGEpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMub3JiaXQuem9vbU91dCg2LjYqdGhpcy5wLnNjYWxlLmRlbHRhLzAuMzIpO1xyXG4gICAgfVxyXG4gICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgfVxyXG5cclxuICBjbWREZWZhdWx0Wm9vbSgpIHtcclxuICAgIGlmKHRoaXMuc3RhdGUuc21hcnRQYW4pIHtcclxuICAgICAgdGhpcy5ib29rV2F0Y2hlci5zY2FsZSA9IHRoaXMucC5zY2FsZS5kZWZhdWx0O1xyXG4gICAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNtZFRvYygpIHtcclxuICAgIGlmKHRoaXMudG9jQ3RybCkge1xyXG4gICAgICB0aGlzLnRvY0N0cmwudG9nbGUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNtZEZhc3RCYWNrd2FyZCgpIHtcclxuICAgIHRoaXMuc3RhcnRGbGlwKHRoaXMuYm9vay5mbGlwTGVmdCg1KSk7XHJcbiAgfVxyXG5cclxuICBjbWRCYWNrd2FyZCgpIHtcclxuICAgIGlmKHRoaXMuc3RhdGUuc2luZ2xlUGFnZSkge1xyXG4gICAgICB0aGlzLnN0YXRlLmFjdGl2ZVNpZGUgPSAodGhpcy5nZXRQYWdlKCkrMSklMjtcclxuICAgICAgaWYodGhpcy5zdGF0ZS5hY3RpdmVTaWRlKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZS5hY3RpdmVTaWRlID0gMDtcclxuICAgICAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB0aGlzLnN0YXJ0RmxpcCh0aGlzLmJvb2suZmxpcExlZnQoMSkpLnRoZW4oKGJsb2NrKT0+IHtcclxuICAgICAgICAgIGlmKGJsb2NrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuYWN0aXZlU2lkZSA9IDE7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLnN0YXJ0RmxpcCh0aGlzLmJvb2suZmxpcExlZnQoMSkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY21kRm9yd2FyZCgpIHtcclxuICAgIGlmKHRoaXMuc3RhdGUuc2luZ2xlUGFnZSkge1xyXG4gICAgICB0aGlzLnN0YXRlLmFjdGl2ZVNpZGUgPSAodGhpcy5nZXRQYWdlKCkrMSklMjtcclxuICAgICAgaWYoIXRoaXMuc3RhdGUuYWN0aXZlU2lkZSkge1xyXG4gICAgICAgIHRoaXMuc3RhdGUuYWN0aXZlU2lkZSA9IDE7XHJcbiAgICAgICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdGhpcy5zdGFydEZsaXAodGhpcy5ib29rLmZsaXBSaWdodCgxKSkudGhlbigoYmxvY2spPT4ge1xyXG4gICAgICAgICAgaWYoYmxvY2spIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5hY3RpdmVTaWRlID0gMDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMuc3RhcnRGbGlwKHRoaXMuYm9vay5mbGlwUmlnaHQoMSkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY21kRmFzdEZvcndhcmQoKSB7XHJcbiAgICB0aGlzLnN0YXJ0RmxpcCh0aGlzLmJvb2suZmxpcFJpZ2h0KDUpKTtcclxuICB9XHJcblxyXG4gIGNtZFNhdmUoKSB7XHJcbiAgICB3aW5kb3cub3Blbih0aGlzLnAuZG93bmxvYWRVUkwsICdfYmxhbmsnKTtcclxuICB9XHJcblxyXG4gIGNtZFByaW50KCkge1xyXG4gICAgdGhpcy5wcmludGVyLnByaW50KCk7XHJcbiAgfVxyXG5cclxuICBjbWRGdWxsU2NyZWVuKCkge1xyXG4gICAgaWYoIUZ1bGxTY3JlZW4uYWN0aXZhdGVkKCkpIHtcclxuICAgICAgRnVsbFNjcmVlbi5yZXF1ZXN0KHRoaXMudmlldy5nZXRQYXJlbnRDb250YWluZXIoKSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgRnVsbFNjcmVlbi5jYW5jZWwoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNtZFNtYXJ0UGFuKCkge1xyXG4gICAgdGhpcy5zdGF0ZS5zbWFydFBhbiA9ICF0aGlzLnN0YXRlLnNtYXJ0UGFuO1xyXG4gICAgaWYodGhpcy5zdGF0ZS5zbWFydFBhbikge1xyXG4gICAgICB0aGlzLm9yYml0Lm1pbkF6aW11dGhBbmdsZSA9IDA7XHJcbiAgICAgIHRoaXMub3JiaXQubWF4QXppbXV0aEFuZ2xlID0gMDtcclxuICAgICAgdGhpcy5vcmJpdC5taW5Qb2xhckFuZ2xlID0gMDtcclxuICAgIFx0dGhpcy5vcmJpdC5tYXhQb2xhckFuZ2xlID0gTWF0aC5QSS80O1xyXG4gICAgICB0aGlzLmJvb2tXYXRjaGVyLmVuYWJsZWQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMub3JiaXQubWluQXppbXV0aEFuZ2xlID0gLUluZmluaXR5O1xyXG4gICAgICB0aGlzLm9yYml0Lm1heEF6aW11dGhBbmdsZSA9IEluZmluaXR5O1xyXG4gICAgICB0aGlzLm9yYml0Lm1pblBvbGFyQW5nbGUgPSAwO1xyXG4gICAgXHR0aGlzLm9yYml0Lm1heFBvbGFyQW5nbGUgPSBNYXRoLlBJO1xyXG4gICAgICB0aGlzLmJvb2tXYXRjaGVyLmVuYWJsZWQgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgY21kU2luZ2xlUGFnZSgpIHtcclxuICAgIHRoaXMuc3RhdGUuc2luZ2xlUGFnZSA9ICF0aGlzLnN0YXRlLnNpbmdsZVBhZ2U7XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICB9XHJcblxyXG4gIGNtZFNvdW5kcygpIHtcclxuICAgIGlmKHRoaXMuc291bmRzKSB7XHJcbiAgICAgIHRoaXMuc291bmRzLnRvZ2xlKCk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICB9XHJcblxyXG4gIGNtZFN0YXRzKCkge1xyXG4gICAgdGhpcy5zdGF0ZS5zdGF0cyA9ICF0aGlzLnN0YXRlLnN0YXRzO1xyXG4gICAgaWYodGhpcy5zdGF0ZS5zdGF0cykge1xyXG4gICAgICAkKHRoaXMudmlldy5nZXRDb250YWluZXIoKSkuYXBwZW5kKHRoaXMuU3RhdHMuZG9tRWxlbWVudCk7XHJcbiAgICAgIHRoaXMudmlzdWFsLmFkZFJlbmRlckNhbGxiYWNrKHRoaXMuYmluZHMuc3RhdHMpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICQodGhpcy52aWV3LmdldENvbnRhaW5lcigpKS5maW5kKHRoaXMuU3RhdHMuZG9tRWxlbWVudCkucmVtb3ZlKCk7XHJcbiAgICAgIHRoaXMudmlzdWFsLnJlbW92ZVJlbmRlckNhbGxiYWNrKHRoaXMuYmluZHMuc3RhdHMpO1xyXG4gICAgfVxyXG4gICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgfVxyXG5cclxuICBjbWRMaWdodGluZ1VwKCkge1xyXG4gICAgdGhpcy5zdGF0ZS5saWdodGluZyA9IE1hdGgubWluKHRoaXMuc3RhdGUubGlnaHRpbmcrdGhpcy5wLmxpZ2h0aW5nLmRlbHRhLCB0aGlzLnAubGlnaHRpbmcubWF4KTtcclxuICAgIHRoaXMudmlzdWFsLnNldEV4dHJhTGlnaHRpbmcodGhpcy5zdGF0ZS5saWdodGluZyk7XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICB9XHJcblxyXG4gIGNtZExpZ2h0aW5nRG93bigpIHtcclxuICAgIHRoaXMuc3RhdGUubGlnaHRpbmcgPSBNYXRoLm1heCh0aGlzLnN0YXRlLmxpZ2h0aW5nLXRoaXMucC5saWdodGluZy5kZWx0YSwgdGhpcy5wLmxpZ2h0aW5nLm1pbik7XHJcbiAgICB0aGlzLnZpc3VhbC5zZXRFeHRyYUxpZ2h0aW5nKHRoaXMuc3RhdGUubGlnaHRpbmcpO1xyXG4gICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgfVxyXG5cclxuICBnb1RvUGFnZShwYWdlKSB7XHJcbiAgICBjb25zdCBwYWdlTnVtID0gTWF0aC5tYXgoTWF0aC5taW4ocGFnZSwgdGhpcy5ib29rLmdldFBhZ2VzKCktMSksMCk7XHJcbiAgICB0aGlzLnN0YXRlLmFjdGl2ZVNpZGUgPSAocGFnZU51bSsxKSUyO1xyXG4gICAgbGV0IHRhcmdldCA9IE1hdGgubWF4KE1hdGgubWluKHBhZ2UtMStwYWdlJTIsIHRoaXMuYm9vay5nZXRQYWdlcygpLTEpLDApLCBjdXJyZW50ID0gdGhpcy5ib29rLmdldFBhZ2UoKSwgZmxpcHMgPSBbXSwgY292cyA9IDA7O1xyXG4gICAgaWYodGFyZ2V0IT1jdXJyZW50KSB7XHJcbiAgICAgIGlmKGN1cnJlbnQ9PT0wKSB7XHJcbiAgICAgICAgZmxpcHMucHVzaCgxKTtcclxuICAgICAgICBjdXJyZW50Kz0xO1xyXG4gICAgICAgICsrY292cztcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKGN1cnJlbnQ9PT10aGlzLmJvb2suZ2V0UGFnZXMoKS0xKSB7XHJcbiAgICAgICAgZmxpcHMucHVzaCgtMSk7XHJcbiAgICAgICAgY3VycmVudC09MjtcclxuICAgICAgICArK2NvdnM7XHJcbiAgICAgIH1cclxuICAgICAgbGV0IGN2ID0gMDtcclxuICAgICAgaWYodGFyZ2V0PT09MCkge1xyXG4gICAgICAgIGN2ID0gLTE7XHJcbiAgICAgICAgdGFyZ2V0Kz0xO1xyXG4gICAgICAgICsrY292cztcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKHRhcmdldD09PXRoaXMuYm9vay5nZXRQYWdlcygpLTEpIHtcclxuICAgICAgICBjdiA9IDE7XHJcbiAgICAgICAgdGFyZ2V0LT0yO1xyXG4gICAgICAgICsrY292cztcclxuICAgICAgfVxyXG4gICAgICBpZih0YXJnZXQtY3VycmVudCkge1xyXG4gICAgICAgIGZsaXBzLnB1c2goTWF0aC5jZWlsKCh0YXJnZXQtY3VycmVudCkvMikpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmKGN2KSB7XHJcbiAgICAgICAgZmxpcHMucHVzaChjdik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzZXRDbGIgPSAoZmwsIHRpbWUsIGNsYik9PiB7XHJcbiAgICAgIHNldFRpbWVvdXQoKCk9PiB7XHJcbiAgICAgICAgaWYoZmw8MCkge1xyXG4gICAgICAgICAgdGhpcy5zdGFydEZsaXAodGhpcy5ib29rLmZsaXBMZWZ0KC1mbCwgY2xiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5zdGFydEZsaXAodGhpcy5ib29rLmZsaXBSaWdodChmbCwgY2xiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LCB0aW1lKTtcclxuICAgIH07XHJcblxyXG4gICAgaWYoY292cz09PTIpIHtcclxuICAgICAgc2V0Q2xiKGZsaXBzWzBdLCAwLCAoYmxvY2ssIHByb2dyZXNzLCBzdGF0ZSk9PiB7XHJcbiAgICAgICAgaWYoc3RhdGU9PSdmaW5pc2gnICYmIHByb2dyZXNzPT0xKSB7XHJcbiAgICAgICAgICBzZXRDbGIoZmxpcHNbZmxpcHMubGVuZ3RoLTFdLCAwKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBzZXRDbGIoZmxpcHNbMV0sIDUwMCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgbGV0IHRpbWUgPSAwO1xyXG4gICAgICBmb3IobGV0IGZsIG9mIGZsaXBzKSB7XHJcbiAgICAgICAgc2V0Q2xiKGZsLCB0aW1lKTtcclxuICAgICAgICB0aW1lKz0yNTA7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXJ0RmxpcChmbGlwUmVzKSB7XHJcbiAgICByZXR1cm4gZmxpcFJlcz8gZmxpcFJlcy50aGVuKChibG9jayk9PiB7XHJcbiAgICAgIGlmKGJsb2NrKSB7XHJcbiAgICAgICAgdGhpcy5kaXNwYXRjaEFzeW5jKHtcclxuICAgICAgICAgIHR5cGU6ICdzdGFydEZsaXAnXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGJsb2NrO1xyXG4gICAgfSk6IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xyXG4gIH1cclxuXHJcbiAgZW5kRmxpcChibG9jaykge1xyXG4gICAgdGhpcy5kaXNwYXRjaEFzeW5jKHtcclxuICAgICAgdHlwZTogJ2VuZEZsaXAnXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBibG9jaztcclxuICB9XHJcblxyXG4gIGdldFBhZ2UoKSB7XHJcbiAgICBjb25zdCBwYWdlID0gdGhpcy5ib29rLmdldFBhZ2UoKTtcclxuICAgIHJldHVybiBwYWdlPyBNYXRoLm1pbih0aGlzLmJvb2suZ2V0UGFnZSgpK3RoaXMuc3RhdGUuYWN0aXZlU2lkZSwgdGhpcy5ib29rLmdldFBhZ2VzKCktMSk6IDA7XHJcbiAgfVxyXG5cclxuICBnZXRQYWdlRm9yR1VJKCkge1xyXG4gICAgcmV0dXJuICh0aGlzLnN0YXRlLnNpbmdsZVBhZ2U/IHRoaXMuZ2V0UGFnZSgpOiB0aGlzLmJvb2suZ2V0UGFnZSgpKSsxO1xyXG4gIH1cclxuXHJcbiAgaW5wUGFnZShlLCBkYXRhKSB7XHJcbiAgICB0aGlzLmdvVG9QYWdlKGRhdGEtMSk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVWaWV3SWZTdGF0ZShibG9jaywgcHJvZ3Jlc3MsIHN0YXRlLCB0eXBlKSB7XHJcbiAgICBpZihzdGF0ZT09PSdpbml0JyB8fCBzdGF0ZT09PSdmaW5pc2gnKSB7XHJcbiAgICAgIHNldFRpbWVvdXQodGhpcy51cGRhdGVWaWV3LmJpbmQodGhpcyksIDEwMCk7XHJcbiAgICB9XHJcbiAgICBpZihzdGF0ZT09PSdmaW5pc2gnKSB7XHJcbiAgICAgIHRoaXMuZW5kRmxpcChibG9jayk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB1cGRhdGVWaWV3KCkge1xyXG4gICAgaWYodGhpcy52aWV3KSB7XHJcbiAgICAgIHRoaXMudmlldy5zZXRTdGF0ZSgnY21kWm9vbUluJywge1xyXG4gICAgICAgIGVuYWJsZTogdGhpcy5jYW5ab29tSW4oKSxcclxuICAgICAgICB2aXNpYmxlOiB0aGlzLmFjdGlvbnNbJ2NtZFpvb21JbiddLmVuYWJsZWQsXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMudmlldy5zZXRTdGF0ZSgnY21kWm9vbU91dCcsIHtcclxuICAgICAgICBlbmFibGU6IHRoaXMuY2FuWm9vbU91dCgpLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuYWN0aW9uc1snY21kWm9vbU91dCddLmVuYWJsZWQsXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMudmlldy5zZXRTdGF0ZSgnY21kRGVmYXVsdFpvb20nLCB7XHJcbiAgICAgICAgZW5hYmxlOiB0aGlzLmNhbkRlZmF1bHRab29tKCksXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy5hY3Rpb25zWydjbWREZWZhdWx0Wm9vbSddLmVuYWJsZWQsXHJcbiAgICAgICAgYWN0aXZlOiB0aGlzLmNhbkRlZmF1bHRab29tKCkgJiYgTWF0aC5hYnModGhpcy5ib29rV2F0Y2hlci5zY2FsZS10aGlzLnAuc2NhbGUuZGVmYXVsdCk8dGhpcy5wLmVwc1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMudmlldy5zZXRTdGF0ZSgnY21kVG9jJywge1xyXG4gICAgICAgIGVuYWJsZTogISF0aGlzLnRvY0N0cmwsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy5hY3Rpb25zWydjbWRUb2MnXS5lbmFibGVkICYmIHRoaXMudG9jQ3RybCxcclxuICAgICAgICBhY3RpdmU6IHRoaXMudG9jQ3RybCAmJiB0aGlzLnRvY0N0cmwudmlzaWJsZVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGNvbnN0IGxlZnQgPSB0aGlzLmJvb2suZ2V0TGVmdEZsaXBwaW5nKCksXHJcbiAgICAgICAgICAgIHJpZ2h0ID0gdGhpcy5ib29rLmdldFJpZ2h0RmxpcHBpbmcoKTtcclxuXHJcbiAgICAgIGNvbnN0IGZsaXBwZXJzRW5hYmxlID0ge1xyXG4gICAgICAgIGNtZEZhc3RCYWNrd2FyZDogISFsZWZ0LFxyXG4gICAgICAgIGNtZEJhY2t3YXJkOiAhIWxlZnQsXHJcbiAgICAgICAgY21kRm9yd2FyZDogISFyaWdodCxcclxuICAgICAgICBjbWRGYXN0Rm9yd2FyZDogISFyaWdodFxyXG4gICAgICB9O1xyXG5cclxuICAgICAgZm9yKGxldCBuYW1lIG9mIE9iamVjdC5rZXlzKGZsaXBwZXJzRW5hYmxlKSkge1xyXG4gICAgICAgIHRoaXMudmlldy5zZXRTdGF0ZShuYW1lLCB7XHJcbiAgICAgICAgICBlbmFibGU6IGZsaXBwZXJzRW5hYmxlW25hbWVdLFxyXG4gICAgICAgICAgdmlzaWJsZTogdGhpcy5hY3Rpb25zW25hbWVdLmVuYWJsZWQsXHJcbiAgICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMudmlldy5zZXRTdGF0ZSgnaW5wUGFnZXMnLCB7XHJcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICB2YWx1ZTogdGhpcy5ib29rLmdldFBhZ2VzKClcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ2lucFBhZ2UnLCB7XHJcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICBlbmFibGU6ICF0aGlzLmJvb2suaXNQcm9jZXNzaW5nKCksXHJcbiAgICAgICAgdmFsdWU6IHRoaXMuZ2V0UGFnZUZvckdVSSgpXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCdjbWRTYXZlJywge1xyXG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICB2aXNpYmxlOiB0aGlzLmFjdGlvbnNbJ2NtZFNhdmUnXS5lbmFibGVkICYmICEhdGhpcy5wLmRvd25sb2FkVVJMLFxyXG4gICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ2NtZFByaW50Jywge1xyXG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICB2aXNpYmxlOiB0aGlzLmFjdGlvbnNbJ2NtZFByaW50J10uZW5hYmxlZCAmJiAhIXRoaXMucHJpbnRlcixcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCdjbWRGdWxsU2NyZWVuJywge1xyXG4gICAgICAgIGVuYWJsZTogRnVsbFNjcmVlbi5hdmFpbGFibGUoKSxcclxuICAgICAgICB2aXNpYmxlOiB0aGlzLmFjdGlvbnNbJ2NtZEZ1bGxTY3JlZW4nXS5lbmFibGVkLFxyXG4gICAgICAgIGFjdGl2ZTogRnVsbFNjcmVlbi5hdmFpbGFibGUoKSAmJiBGdWxsU2NyZWVuLmFjdGl2YXRlZCgpXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCd3aWRTZXR0aW5ncycsIHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy5hY3Rpb25zWyd3aWRTZXR0aW5ncyddLmVuYWJsZWQsXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMudmlldy5zZXRTdGF0ZSgnY21kU21hcnRQYW4nLCB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuYWN0aW9uc1snY21kU21hcnRQYW4nXS5lbmFibGVkLFxyXG4gICAgICAgIGFjdGl2ZTogdGhpcy5zdGF0ZS5zbWFydFBhblxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMudmlldy5zZXRTdGF0ZSgnY21kU2luZ2xlUGFnZScsIHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy5hY3Rpb25zWydjbWRTaW5nbGVQYWdlJ10uZW5hYmxlZCxcclxuICAgICAgICBhY3RpdmU6IHRoaXMuc3RhdGUuc2luZ2xlUGFnZVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMudmlldy5zZXRTdGF0ZSgnY21kU291bmRzJywge1xyXG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICB2aXNpYmxlOiAgdGhpcy5hY3Rpb25zWydjbWRTb3VuZHMnXS5lbmFibGVkICYmICEhdGhpcy5zb3VuZHMsXHJcbiAgICAgICAgYWN0aXZlOiAhIXRoaXMuc291bmRzICYmIHRoaXMuc291bmRzLmVuYWJsZWRcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ2NtZFN0YXRzJywge1xyXG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICB2aXNpYmxlOiB0aGlzLmFjdGlvbnNbJ2NtZFN0YXRzJ10uZW5hYmxlZCxcclxuICAgICAgICBhY3RpdmU6IHRoaXMuc3RhdGUuc3RhdHNcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ2NtZExpZ2h0aW5nVXAnLCB7XHJcbiAgICAgICAgZW5hYmxlOiBNYXRoLmFicyh0aGlzLnN0YXRlLmxpZ2h0aW5nLXRoaXMucC5saWdodGluZy5tYXgpPnRoaXMucC5lcHMsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy5hY3Rpb25zWydjbWRMaWdodGluZ1VwJ10uZW5hYmxlZCxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCdjbWRMaWdodGluZ0Rvd24nLCB7XHJcbiAgICAgICAgZW5hYmxlOiBNYXRoLmFicyh0aGlzLnN0YXRlLmxpZ2h0aW5nLXRoaXMucC5saWdodGluZy5taW4pPnRoaXMucC5lcHMsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy5hY3Rpb25zWydjbWRMaWdodGluZ0Rvd24nXS5lbmFibGVkLFxyXG4gICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRBY3Rpb25zKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgY21kWm9vbUluOiB7XHJcbiAgICAgICAgYWN0aXZhdGU6IHRoaXMuY21kWm9vbUluLmJpbmQodGhpcylcclxuICAgICAgfSxcclxuICAgICAgY21kWm9vbU91dDoge1xyXG4gICAgICAgIGFjdGl2YXRlOiB0aGlzLmNtZFpvb21PdXQuYmluZCh0aGlzKVxyXG4gICAgICB9LFxyXG4gICAgICBjbWREZWZhdWx0Wm9vbToge1xyXG4gICAgICAgIGFjdGl2YXRlOiB0aGlzLmNtZERlZmF1bHRab29tLmJpbmQodGhpcylcclxuICAgICAgfSxcclxuICAgICAgY21kVG9jOiB7XHJcbiAgICAgICAgYWN0aXZhdGU6IHRoaXMuY21kVG9jLmJpbmQodGhpcylcclxuICAgICAgfSxcclxuICAgICAgY21kRmFzdEJhY2t3YXJkOiB7XHJcbiAgICAgICAgYWN0aXZhdGU6IHRoaXMuY21kRmFzdEJhY2t3YXJkLmJpbmQodGhpcylcclxuICAgICAgfSxcclxuICAgICAgY21kQmFja3dhcmQ6IHtcclxuICAgICAgICBhY3RpdmF0ZTogdGhpcy5jbWRCYWNrd2FyZC5iaW5kKHRoaXMpXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZEZvcndhcmQ6IHtcclxuICAgICAgICBhY3RpdmF0ZTogdGhpcy5jbWRGb3J3YXJkLmJpbmQodGhpcylcclxuICAgICAgfSxcclxuICAgICAgY21kRmFzdEZvcndhcmQ6IHtcclxuICAgICAgICBhY3RpdmF0ZTogdGhpcy5jbWRGYXN0Rm9yd2FyZC5iaW5kKHRoaXMpXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZFNhdmU6IHtcclxuICAgICAgICBhY3RpdmF0ZTogdGhpcy5jbWRTYXZlLmJpbmQodGhpcylcclxuICAgICAgfSxcclxuICAgICAgY21kUHJpbnQ6IHtcclxuICAgICAgICBhY3RpdmF0ZTogdGhpcy5jbWRQcmludC5iaW5kKHRoaXMpXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZEZ1bGxTY3JlZW46IHtcclxuICAgICAgICBhY3RpdmF0ZTogdGhpcy5jbWRGdWxsU2NyZWVuLmJpbmQodGhpcylcclxuICAgICAgfSxcclxuICAgICAgY21kU21hcnRQYW46IHtcclxuICAgICAgICBhY3RpdmF0ZTogdGhpcy5jbWRTbWFydFBhbi5iaW5kKHRoaXMpXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZFNpbmdsZVBhZ2U6IHtcclxuICAgICAgICBhY3RpdmF0ZTogdGhpcy5jbWRTaW5nbGVQYWdlLmJpbmQodGhpcylcclxuICAgICAgfSxcclxuICAgICAgY21kU291bmRzOiB7XHJcbiAgICAgICAgYWN0aXZhdGU6IHRoaXMuY21kU291bmRzLmJpbmQodGhpcylcclxuICAgICAgfSxcclxuICAgICAgY21kU3RhdHM6IHtcclxuICAgICAgICBhY3RpdmF0ZTogdGhpcy5jbWRTdGF0cy5iaW5kKHRoaXMpXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZExpZ2h0aW5nVXA6IHtcclxuICAgICAgICBhY3RpdmF0ZTogdGhpcy5jbWRMaWdodGluZ1VwLmJpbmQodGhpcylcclxuICAgICAgfSxcclxuICAgICAgY21kTGlnaHRpbmdEb3duOiB7XHJcbiAgICAgICAgYWN0aXZhdGU6IHRoaXMuY21kTGlnaHRpbmdEb3duLmJpbmQodGhpcylcclxuICAgICAgfSxcclxuICAgICAgY21kUGFuTGVmdDoge1xyXG4gICAgICAgIGFjdGl2YXRlOiAoZSk9PiB0aGlzLm9yYml0LmFjdGlvbnMucGFuKGUsIHtcclxuICAgICAgICAgIHN0YXRlOiAnbW92ZScsXHJcbiAgICAgICAgICBkeDogLXRoaXMucC5wYW4uc3BlZWQsXHJcbiAgICAgICAgICBkeTogMFxyXG4gICAgICAgIH0pXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZFBhblJpZ2h0OiB7XHJcbiAgICAgICAgYWN0aXZhdGU6IChlKT0+IHRoaXMub3JiaXQuYWN0aW9ucy5wYW4oZSwge1xyXG4gICAgICAgICAgc3RhdGU6ICdtb3ZlJyxcclxuICAgICAgICAgIGR4OiB0aGlzLnAucGFuLnNwZWVkLFxyXG4gICAgICAgICAgZHk6IDBcclxuICAgICAgICB9KVxyXG4gICAgICB9LFxyXG4gICAgICBjbWRQYW5VcDoge1xyXG4gICAgICAgIGFjdGl2YXRlOiAoZSk9PiB0aGlzLm9yYml0LmFjdGlvbnMucGFuKGUsIHtcclxuICAgICAgICAgIHN0YXRlOiAnbW92ZScsXHJcbiAgICAgICAgICBkeDogMCxcclxuICAgICAgICAgIGR5OiAtdGhpcy5wLnBhbi5zcGVlZFxyXG4gICAgICAgIH0pXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZFBhbkRvd246IHtcclxuICAgICAgICBhY3RpdmF0ZTogKGUpPT4gdGhpcy5vcmJpdC5hY3Rpb25zLnBhbihlLCB7XHJcbiAgICAgICAgICBzdGF0ZTogJ21vdmUnLFxyXG4gICAgICAgICAgZHg6IDAsXHJcbiAgICAgICAgICBkeTogdGhpcy5wLnBhbi5zcGVlZFxyXG4gICAgICAgIH0pXHJcbiAgICAgIH0sXHJcbiAgICAgIG1vdXNlQ21kUm90YXRlOiB7XHJcbiAgICAgICAgYWN0aXZhdGU6IHRoaXMub3JiaXQuYWN0aW9ucy5yb3RhdGVcclxuICAgICAgfSxcclxuICAgICAgbW91c2VDbWREcmFnWm9vbToge1xyXG4gICAgICAgIGFjdGl2YXRlOiAoZSwgZGF0YSk9PiB7XHJcbiAgICAgICAgICBpZihkYXRhLmR5PjApIHtcclxuICAgICAgICAgICAgdGhpcy5jbWRab29tT3V0KCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIGlmKGRhdGEuZHk8MCkge1xyXG4gICAgICAgICAgICB0aGlzLmNtZFpvb21JbigpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgbW91c2VDbWRQYW46IHtcclxuICAgICAgICBhY3RpdmF0ZTogdGhpcy5vcmJpdC5hY3Rpb25zLnBhblxyXG4gICAgICB9LFxyXG4gICAgICBtb3VzZUNtZFdoZWVsWm9vbToge1xyXG4gICAgICAgIGFjdGl2YXRlOiAoZSk9PiB7XHJcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICBpZihlLmRlbHRhWTwwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY21kWm9vbU91dCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSBpZihlLmRlbHRhWT4wKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY21kWm9vbUluKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICB0b3VjaENtZFJvdGF0ZToge1xyXG4gICAgICAgIGFjdGl2YXRlOiAoZSwgZGF0YSk9PiB7XHJcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICB0aGlzLm9yYml0LmFjdGlvbnMucm90YXRlKGUsIGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgdG91Y2hDbWRab29tOiB7XHJcbiAgICAgICAgYWN0aXZhdGU6IChlLCBkYXRhKT0+IHtcclxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgIGlmKGRhdGEuZHk+MCkge1xyXG4gICAgICAgICAgICB0aGlzLmNtZFpvb21PdXQoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2UgaWYoZGF0YS5keTwwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY21kWm9vbUluKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICB0b3VjaENtZFBhbjoge1xyXG4gICAgICAgIGFjdGl2YXRlOiAoZSwgZGF0YSk9PiB7XHJcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICB0aGlzLm9yYml0LmFjdGlvbnMucGFuKGUsIGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgd2lkU2V0dGluZ3M6IHtcclxuICAgICAgICBhY3RpdmF0ZTogKCk9PiB1bmRlZmluZWRcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGJpbmRBY3Rpb25zKCkge1xyXG4gICAgdGhpcy5lVG9BID0gbmV3IEV2ZW50c1RvQWN0aW9ucygkKHRoaXMudmlzdWFsLmVsZW1lbnQpKTtcclxuICAgIHRoaXMuZVRvQS5hZGRBY3Rpb24oKGUpPT4gZS5wcmV2ZW50RGVmYXVsdCgpLCAnY29udGV4dG1lbnUnLCBFdmVudHNUb0FjdGlvbnMubW91c2VCdXR0b25zLlJpZ2h0LCAwKTtcclxuXHJcbiAgICB0aGlzLmFjdGlvbnMgPSB0aGlzLmdldEFjdGlvbnMoKTtcclxuICAgIGZvcihsZXQgbmFtZSBvZiBPYmplY3Qua2V5cyh0aGlzLmFjdGlvbnMpKSB7XHJcbiAgICAgIGNvbnN0IGFjdGlvbiA9IHtcclxuICAgICAgICAuLi50aGlzLmFjdGlvbnNbbmFtZV0sXHJcbiAgICAgICAgLi4udGhpcy5wLmFjdGlvbnNbbmFtZV1cclxuICAgICAgfTtcclxuICAgICAgdGhpcy5hY3Rpb25zW25hbWVdID0gYWN0aW9uO1xyXG4gICAgICBpZihhY3Rpb24uZW5hYmxlZCkge1xyXG4gICAgICAgIGNvbnN0IGZsYWdzID0gYWN0aW9uLmZsYWdzIHx8IDA7XHJcbiAgICAgICAgaWYoYWN0aW9uLnR5cGUpIHtcclxuICAgICAgICAgIHRoaXMuZVRvQS5hZGRBY3Rpb24oYWN0aW9uLmFjdGl2YXRlLCBhY3Rpb24udHlwZSwgYWN0aW9uLmNvZGUsIGZsYWdzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihhY3Rpb24uY29kZSE9PXVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgdGhpcy5lVG9BLmFkZEFjdGlvbihhY3Rpb24uYWN0aXZhdGUsICdrZXlkb3duJywgYWN0aW9uLmNvZGUsIGZsYWdzKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBwcmVwYXJlUHJvcHMocHJvcHMpIHtcclxuICAgIHJldHVybiBCb29rQ29udHJvbGxlci5jYWxjUHJvcHMoQm9va0NvbnRyb2xsZXIubWVyZ2VQcm9wcyhib29rQ29udHJvbGxlclByb3BzKCksIHByb3BzKSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc2V0QWN0aW9ucyhwcm9wcywgYWN0aW9ucykge1xyXG4gICAgZm9yKGxldCBuYW1lIG9mIE9iamVjdC5rZXlzKGFjdGlvbnMgfHwge30pKSB7XHJcbiAgICAgIHByb3BzLmFjdGlvbnNbbmFtZV0gPSB7XHJcbiAgICAgICAgLi4ucHJvcHMuYWN0aW9uc1tuYW1lXSxcclxuICAgICAgICAuLi5hY3Rpb25zW25hbWVdXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbWVyZ2VQcm9wcyhmaXJzdCwgc2Vjb25kKSB7XHJcbiAgICBzZWNvbmQgPSBzZWNvbmQgfHwge307XHJcbiAgICBjb25zdCBwcm9wcyA9IHtcclxuICAgICAgLi4uZmlyc3QsXHJcbiAgICAgIC4uLnNlY29uZCxcclxuICAgICAgc2NhbGU6IHtcclxuICAgICAgICAuLi5maXJzdC5zY2FsZSxcclxuICAgICAgICAuLi5zZWNvbmQuc2NhbGUsXHJcbiAgICAgIH0sXHJcbiAgICAgIGxpZ2h0aW5nOiB7XHJcbiAgICAgICAgLi4uZmlyc3QubGlnaHRpbmcsXHJcbiAgICAgICAgLi4uc2Vjb25kLmxpZ2h0aW5nLFxyXG4gICAgICB9LFxyXG4gICAgICBwYW46IHtcclxuICAgICAgICAuLi5maXJzdC5wYW4sXHJcbiAgICAgICAgLi4uc2Vjb25kLnBhbixcclxuICAgICAgfSxcclxuICAgICAgYWN0aW9uczoge1xyXG4gICAgICAgIC4uLmZpcnN0LmFjdGlvbnMsXHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICBCb29rQ29udHJvbGxlci5zZXRBY3Rpb25zKHByb3BzLCBmaXJzdC5hY3Rpb25zKTtcclxuICAgIEJvb2tDb250cm9sbGVyLnNldEFjdGlvbnMocHJvcHMsIHNlY29uZC5hY3Rpb25zKTtcclxuICAgIHJldHVybiBwcm9wcztcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjYWxjUHJvcHMocHJvcHMpIHtcclxuICAgIHByb3BzLnNjYWxlLmRlbHRhID0gKHByb3BzLnNjYWxlLm1heC1wcm9wcy5zY2FsZS5taW4pL3Byb3BzLnNjYWxlLmxldmVscztcclxuICAgIHByb3BzLmxpZ2h0aW5nLmRlbHRhID0gKHByb3BzLmxpZ2h0aW5nLm1heC1wcm9wcy5saWdodGluZy5taW4pL3Byb3BzLmxpZ2h0aW5nLmxldmVscztcclxuICAgIHJldHVybiBwcm9wcztcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvQm9va0NvbnRyb2xsZXIuanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm9va1ByaW50ZXIge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihjb250ZXh0LCBib29rLCBzdHlsZVNoZWV0KSB7XHJcbiAgICB0aGlzLmJvb2sgPSBib29rO1xyXG4gICAgdGhpcy5zdHlsZVNoZWV0ID0gc3R5bGVTaGVldDtcclxuICAgIHRoaXMud25kID0gY29udGV4dC53bmQ7XHJcbiAgICB0aGlzLmRvYyA9IGNvbnRleHQuZG9jO1xyXG4gICAgdGhpcy5wYWdlQ2FsbGJhY2sgPSBib29rLmdldFBhZ2VDYWxsYmFjaygpO1xyXG4gICAgY29uc3QgdGVzdCA9IHRoaXMucGFnZUNhbGxiYWNrKDApO1xyXG4gICAgdGhpcy50eXBlID0gdGVzdC50eXBlO1xyXG4gICAgaWYodGhpcy50eXBlPT09J3BkZicpIHtcclxuICAgICAgdGhpcy5wZGZTcmMgPSB0ZXN0LnNyYy5zcmM7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjYW5jZWwoKSB7XHJcbiAgICB0aGlzLmNhbmNlbGVkID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICBpZih0aGlzLmZyYW1lKSB7XHJcbiAgICAgIHRoaXMuZnJhbWUucmVtb3ZlKCk7XHJcbiAgICAgIGRlbGV0ZSB0aGlzLmZyYW1lO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpbnQoKSB7XHJcbiAgICBkZWxldGUgdGhpcy5jYW5jZWxlZDtcclxuICAgIGlmKHRoaXMudHlwZT09PSdwZGYnKSB7XHJcbiAgICAgIGxldCBwcmludFduZCwgY2FsbE1hbnVhbGx5ID0gZmFsc2U7XHJcbiAgICAgIGlmKHRoaXMudXNlSUZyYW1lKCkpIHtcclxuICAgICAgICBjYWxsTWFudWFsbHkgPSAhIXRoaXMuZnJhbWU7XHJcbiAgICAgICAgaWYoIXRoaXMuZnJhbWUpIHtcclxuICAgICAgICAgIHRoaXMuZnJhbWUgPSAkKCc8aWZyYW1lIHNyYz1cIicrdGhpcy5wZGZTcmMrJ1wiIHN0eWxlPVwiZGlzcGxheTogbm9uZTtcIj48L2lmcmFtZT4nKS5hcHBlbmRUbyh0aGlzLmRvYy5ib2R5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHJpbnRXbmQgPSB0aGlzLmZyYW1lWzBdLmNvbnRlbnRXaW5kb3c7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcHJpbnRXbmQgPSB0aGlzLnduZC5vcGVuKHRoaXMucGRmU3JjKTtcclxuICAgICAgfVxyXG4gICAgICBpZihjYWxsTWFudWFsbHkpIHtcclxuICAgICAgICBwcmludFduZC5wcmludCgpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgICQocHJpbnRXbmQpLm9uKCdsb2FkJywgKCk9PiB7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBwcmludFduZC5wcmludCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgY2F0Y2goZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5yZW5kZXJDb250ZW50KCkuXHJcbiAgICAgICAgdGhlbigoY29udGVudCk9PiB7XHJcbiAgICAgICAgICBjb25zdCBwcmludFduZCA9IHRoaXMud25kLm9wZW4oKSxcclxuICAgICAgICAgIHByaW50RG9jID0gcHJpbnRXbmQuZG9jdW1lbnQsXHJcbiAgICAgICAgICBodG1sID0gYFxyXG4gICAgICAgICAgICA8IURPQ1RZUEUgaHRtbD5cclxuICAgICAgICAgICAgPGh0bWw+XHJcbiAgICAgICAgICAgICAgPGhlYWQ+XHJcbiAgICAgICAgICAgICAgICA8bWV0YSBjaGFyc2V0PVwidXRmLThcIj5cclxuICAgICAgICAgICAgICAgIDx0aXRsZT4zRCBGbGlwQm9vayAtIFByaW50aW5nPC90aXRsZT5cclxuICAgICAgICAgICAgICAgICR7Y29udGVudC5oZWFkfVxyXG4gICAgICAgICAgICAgICAgPHNjcmlwdCB0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCI+XHJcbiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHByaW50RG9jdW1lbnQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LnByaW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KHByaW50RG9jdW1lbnQsIDEwMCk7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIDwvc2NyaXB0PlxyXG4gICAgICAgICAgICAgIDwvaGVhZD5cclxuICAgICAgICAgICAgICA8Ym9keSBvbmxvYWQ9XCJpbml0KClcIj5cclxuICAgICAgICAgICAgICAgICR7Y29udGVudC5ib2R5fVxyXG4gICAgICAgICAgICAgIDwvYm9keT5cclxuICAgICAgICAgICAgPC9odG1sPlxyXG4gICAgICAgICAgYDtcclxuICAgICAgICAgIHByaW50RG9jLm9wZW4oKTtcclxuICAgICAgICAgIHByaW50RG9jLndyaXRlKGh0bWwpO1xyXG4gICAgICAgICAgcHJpbnREb2MuY2xvc2UoKTtcclxuICAgICAgICB9KS5cclxuICAgICAgICBjYXRjaCgoZSk9PiBjb25zb2xlLndhcm4oJzNEIEZsaXBCb29rIC0gUHJpbnRpbmcgd2FzIGNhbmNlbGVkJykpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJvZ3Jlc3Modikge1xyXG4gICAgaWYodGhpcy5jYW5jZWxlZCkge1xyXG4gICAgICB0aHJvdyAnQ2FuY2VsIFByaW50aW5nJztcclxuICAgIH1cclxuICAgIGlmKHRoaXMub25Qcm9ncmVzcykge1xyXG4gICAgICB0aGlzLm9uUHJvZ3Jlc3MoTWF0aC5mbG9vcih2KjEwMCkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyQ29udGVudCgpIHtcclxuICAgIGNvbnN0IHBhZ2VzID0gdGhpcy5ib29rLmdldFBhZ2VzKCksIGhlYWQgPSBuZXcgU2V0KCksIGJvZHkgPSBbXTtcclxuICAgIGxldCBkb25lID0gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICBmb3IobGV0IHBhZ2U9MDsgcGFnZTxwYWdlczsgKytwYWdlKSB7XHJcbiAgICAgIGNvbnN0IGluZm8gPSB0aGlzLnBhZ2VDYWxsYmFjayhwYWdlKTtcclxuICAgICAgaWYoaW5mby50eXBlPT09J2ltYWdlJykge1xyXG4gICAgICAgIGRvbmUgPSBkb25lLnRoZW4oKCk9PiB7XHJcbiAgICAgICAgICB0aGlzLnByb2dyZXNzKHBhZ2UvcGFnZXMpO1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVySW1hZ2UoaGVhZCwgYm9keSwgaW5mby5zcmMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYoaW5mby50eXBlPT09J2h0bWwnKSB7XHJcbiAgICAgICAgZG9uZSA9IGRvbmUudGhlbigoKT0+IHtcclxuICAgICAgICAgIHRoaXMucHJvZ3Jlc3MocGFnZS9wYWdlcyk7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJIdG1sKGhlYWQsIGJvZHksIGluZm8uc3JjKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRvbmUudGhlbigoKT0+IHtcclxuICAgICAgdGhpcy5wcm9ncmVzcygxKTtcclxuICAgICAgcmV0dXJuIHtoZWFkOiB0aGlzLnJlbmRlckhlYWQoaGVhZCksIGJvZHk6IGJvZHkuam9pbignXFxuJyl9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyB3cmFwKGNvbnRlbnQpIHtcclxuICAgIHJldHVybiBgPGRpdiBjbGFzcz1cImZiM2QtcHJpbnRlci1wYWdlXCI+JHtjb250ZW50fTwvZGl2PmA7XHJcbiAgfVxyXG5cclxuICByZW5kZXJJbWFnZShoZWFkLCBib2R5LCBzcmMpIHtcclxuICAgIGJvZHkucHVzaChCb29rUHJpbnRlci53cmFwKGA8aW1nIHNyYz1cIiR7c3JjfVwiIC8+YCkpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVySHRtbChoZWFkLCBib2R5LCBzcmMpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KT0+IHtcclxuICAgICAgJC5nZXQoc3JjLCAoaHRtbCk9PiB7XHJcbiAgICAgICAgY29uc3QgbGlua3MgPSBodG1sLm1hdGNoKC88bGluay4qPz4vaWcpIHx8IFtdO1xyXG4gICAgICAgIGZvcihsZXQgbGluayBvZiBsaW5rcykge1xyXG4gICAgICAgICAgaWYobGluay5tYXRjaCgvc3R5bGVzaGVldC9pKSkge1xyXG4gICAgICAgICAgICBjb25zdCBocmVmID0gbGluay5tYXRjaCgvaHJlZlxccyo9XFxzKlsnXCJdKC4qKVsnXCJdL2kpO1xyXG4gICAgICAgICAgICBpZihocmVmKSB7XHJcbiAgICAgICAgICAgICAgaGVhZC5hZGQoaHJlZlsxXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY29udGVudCA9IGh0bWwubWF0Y2goLzxib2R5Lio/PihbXFxTXFxzXSopPFxcL2JvZHk+L2kpO1xyXG4gICAgICAgIGlmKGNvbnRlbnQpIHtcclxuICAgICAgICAgIGJvZHkucHVzaChCb29rUHJpbnRlci53cmFwKGNvbnRlbnRbMV0pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICB9KS5mYWlsKChlKT0+IHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGUucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICByZWplY3QoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgcmVuZGVySGVhZChoZWFkKSB7XHJcbiAgICBjb25zdCBjb250ZW50ID0gW107XHJcbiAgICBoZWFkLmZvckVhY2goKGspPT4gY29udGVudC5wdXNoKGA8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgaHJlZj1cIiR7a31cIj5gKSk7XHJcbiAgICBjb250ZW50LnB1c2godGhpcy5zdHlsZVNoZWV0PyBgPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIGhyZWY9XCIke3RoaXMuc3R5bGVTaGVldH1cIj5gOiBCb29rUHJpbnRlci5kZWZhdWx0U3R5bGVTaGVldCgpKTtcclxuICAgIHJldHVybiBjb250ZW50LmpvaW4oJ1xcbicpO1xyXG4gIH1cclxuXHJcbiAgdXNlSUZyYW1lKCkge1xyXG4gICAgY29uc3QgaXNDaHJvbWl1bSA9IHRoaXMud25kLmNocm9tZSxcclxuICAgICAgd2luTmF2ID0gdGhpcy53bmQubmF2aWdhdG9yLFxyXG4gICAgICB2ZW5kb3JOYW1lID0gd2luTmF2LnZlbmRvcixcclxuICAgICAgaXNJRWVkZ2UgPSB3aW5OYXYudXNlckFnZW50LmluZGV4T2YoXCJFZGdlXCIpPi0xLFxyXG4gICAgICBpc0lPU0Nocm9tZSA9IHdpbk5hdi51c2VyQWdlbnQubWF0Y2goXCJDcmlPU1wiKTtcclxuICAgIGxldCB1c2U7XHJcbiAgICBpZihpc0lPU0Nocm9tZSl7XHJcbiAgICAgIHVzZSA9IHRydWU7XHJcbiAgICB9IGVsc2UgaWYoaXNDaHJvbWl1bSAmJiB2ZW5kb3JOYW1lPT09J0dvb2dsZSBJbmMuJyAmJiAhaXNJRWVkZ2UpIHtcclxuICAgICAgdXNlID0gdHJ1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHVzZSA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVzZTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkZWZhdWx0U3R5bGVTaGVldCgpIHtcclxuICAgIHJldHVybiBgXHJcbiAgICAgIDxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj5cclxuICAgICAgICBib2R5IHtcclxuICAgICAgICAgIG1hcmdpbjogMDtcclxuICAgICAgICAgIHBhZGRpbmc6IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC5mYjNkLXByaW50ZXItcGFnZSB7XHJcbiAgICAgICAgICBwYWdlLWJyZWFrLWFmdGVyOiBhbHdheXM7XHJcbiAgICAgICAgfVxyXG4gICAgICA8L3N0eWxlPlxyXG4gICAgYDtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvQm9va1ByaW50ZXIuanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgVmlldyBmcm9tICdWaWV3JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvb2tWaWV3IGV4dGVuZHMgVmlldyB7XHJcblxyXG4gIHN0YXRpYyBQQUdFX0hBTkRMRVJfREVMQVkgPSAxMDAwO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihjb250YWluZXIsIG9uTG9hZCwgdGVtcGxhdGUsIGhhbmRsZXIpIHtcclxuICAgIHN1cGVyKGNvbnRhaW5lciwgb25Mb2FkLCB0ZW1wbGF0ZSwgaGFuZGxlcik7XHJcbiAgfVxyXG5cclxuICBpbml0VmlldygpIHtcclxuICAgIHRoaXMudmlldyA9IHRoaXMuY29udGFpbmVyLmZpbmQoJy52aWV3Jyk7XHJcbiAgICB0aGlzLmJvb2ttYXJrc1ZpZXcgPSB0aGlzLmNvbnRhaW5lci5maW5kKCcud2lkQm9va21hcmtzJyk7XHJcbiAgICB0aGlzLnRodW1ibmFpbHNWaWV3ID0gdGhpcy5jb250YWluZXIuZmluZCgnLndpZFRodW1ibmFpbHMnKTtcclxuICAgIHRoaXMuc2VhcmNoVmlldyA9IHRoaXMuY29udGFpbmVyLmZpbmQoJy53aWRTZWFyY2gnKTtcclxuICB9XHJcblxyXG4gIGdldEhhbmRsZXJzKGlkKSB7XHJcbiAgICBsZXQgaGFuZGxlcnM7XHJcbiAgICBpZihpZD09PSdpbnBQYWdlJykge1xyXG4gICAgICBoYW5kbGVycyA9IFt7XHJcbiAgICAgICAgaW5wUGFnZTogKGUsIGRhdGEpPT4gdGhpcy5jYWxsTGF0ZXIoc3VwZXIuZ2V0SGFuZGxlcnMoaWQpLCBpZCwgZSwgZGF0YSwgQm9va1ZpZXcuUEFHRV9IQU5ETEVSX0RFTEFZKVxyXG4gICAgICB9XTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBoYW5kbGVycyA9IHN1cGVyLmdldEhhbmRsZXJzKGlkKTtcclxuICAgIH1cclxuICAgIHJldHVybiBoYW5kbGVycztcclxuICB9XHJcblxyXG4gIG9uSXRlbVN0YXRlQ2hhbmdlZChpZCwgc3RhdGUpIHtcclxuICAgIGlmKGlkPT09J2NtZEZ1bGxTY3JlZW4nKSB7XHJcbiAgICAgIGlmKHN0YXRlLmFjdGl2ZSkge1xyXG4gICAgICAgIHRoaXMucGFyZW50Q29udGFpbmVyLmFkZENsYXNzKCdmdWxsc2NyZWVuJyk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRDb250YWluZXIucmVtb3ZlQ2xhc3MoJ2Z1bGxzY3JlZW4nKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0VmlldygpIHtcclxuICAgIHJldHVybiB0aGlzLnZpZXc7XHJcbiAgfVxyXG5cclxuICBnZXRCb29rbWFya3NWaWV3KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuYm9va21hcmtzVmlldztcclxuICB9XHJcblxyXG4gIGdldFRodW1ibmFpbHNWaWV3KCkge1xyXG4gICAgcmV0dXJuIHRoaXMudGh1bWJuYWlsc1ZpZXc7XHJcbiAgfVxyXG5cclxuICBnZXRTZWFyY2hWaWV3KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuc2VhcmNoVmlldztcclxuICB9XHJcblxyXG4gIGdldEZvcm1zKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBnZXRMaW5rcygpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgICdjbWRab29tSW4nLFxyXG4gICAgICAnY21kWm9vbU91dCcsXHJcbiAgICAgICdjbWREZWZhdWx0Wm9vbScsXHJcbiAgICAgICdjbWRUb2MnLFxyXG4gICAgICAnY21kRmFzdEJhY2t3YXJkJyxcclxuICAgICAgJ2NtZEJhY2t3YXJkJyxcclxuICAgICAgJ2NtZEZvcndhcmQnLFxyXG4gICAgICAnY21kRmFzdEZvcndhcmQnLFxyXG4gICAgICAnY21kU2F2ZScsXHJcbiAgICAgICdjbWRQcmludCcsXHJcbiAgICAgICdjbWRGdWxsU2NyZWVuJyxcclxuICAgICAgJ2NtZFNtYXJ0UGFuJyxcclxuICAgICAgJ2NtZFNpbmdsZVBhZ2UnLFxyXG4gICAgICAnY21kU291bmRzJyxcclxuICAgICAgJ2NtZFN0YXRzJyxcclxuICAgICAgJ2NtZExpZ2h0aW5nVXAnLFxyXG4gICAgICAnY21kTGlnaHRpbmdEb3duJyxcclxuICAgICAgJ2NtZENsb3NlVG9jJyxcclxuICAgICAgJ2NtZEJvb2ttYXJrcycsXHJcbiAgICAgICdjbWRTZWFyY2gnLFxyXG4gICAgICAnY21kVGh1bWJuYWlscydcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBnZXRXaWRnZXRzKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgJ3dpZExvYWRpbmdQcm9ncmVzcycsXHJcbiAgICAgICd3aWRGbG9hdFduZCcsXHJcbiAgICAgICd3aWRUb2NNZW51JyxcclxuICAgICAgJ3dpZEJvb2ttYXJrcycsXHJcbiAgICAgICd3aWRUaHVtYm5haWxzJyxcclxuICAgICAgJ3dpZFNlYXJjaCcsXHJcbiAgICAgICd3aWRTZXR0aW5ncydcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBnZXRJbnB1dHMoKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAnaW5wUGFnZScsXHJcbiAgICAgICdpbnBQYWdlcydcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBnZXRUZXh0cygpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgICd0eHRMb2FkaW5nUHJvZ3Jlc3MnXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgZ2V0VGVtcGxhdGUoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBodG1sOiAndGVtcGxhdGVzL2RlZmF1bHQtYm9vay12aWV3Lmh0bWwnLFxyXG4gICAgICBzdHlsZXM6IFtcclxuICAgICAgICAnY3NzL2JsYWNrLWJvb2stdmlldy5jc3MnXHJcbiAgICAgIF0sXHJcbiAgICAgIGxpbmtzOiBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcmVsOiAnc3R5bGVzaGVldCcsXHJcbiAgICAgICAgICBocmVmOiAnY3NzL2ZvbnQtYXdlc29tZS5taW4uY3NzJ1xyXG4gICAgICAgIH1cclxuICAgICAgXSxcclxuICAgICAgc2NyaXB0OiAnanMvZGVmYXVsdC1ib29rLXZpZXcuanMnXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9Cb29rVmlldy5qcyIsImltcG9ydCBCb29rUHJvcHNCdWlsZGVyIGZyb20gJy4vQm9va1Byb3BzQnVpbGRlcic7XHJcbmltcG9ydCBJbWFnZUZhY3RvcnkgZnJvbSAnSW1hZ2VGYWN0b3J5JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENsYkJvb2tQcm9wc0J1aWxkZXIgZXh0ZW5kcyBCb29rUHJvcHNCdWlsZGVyIHtcclxuICBjb25zdHJ1Y3Rvcihjb250ZXh0LCBwYWdlQ2FsbGJhY2ssIHBhZ2VzLCBvblJlYWR5KSB7XHJcbiAgICBzdXBlcihvblJlYWR5KTtcclxuICAgIHRoaXMuY2FsY1NoZWV0cyhwYWdlcyk7XHJcbiAgICB0aGlzLnBhZ2VDYWxsYmFjayA9IHBhZ2VDYWxsYmFjaztcclxuICAgIHRoaXMuYmluZHMgPSB7XHJcbiAgICAgIHBhZ2VDYWxsYmFjazogcGFnZUNhbGxiYWNrLmJpbmQodGhpcylcclxuICAgIH07XHJcbiAgICB0aGlzLmltYWdlRmFjdG9yeSA9IG5ldyBJbWFnZUZhY3RvcnkoY29udGV4dCk7XHJcblxyXG4gICAgaWYocGFnZXM+MCkge1xyXG4gICAgICBjb25zdCB0ZXN0ID0gdGhpcy5pbWFnZUZhY3RvcnkuYnVpbGQocGFnZUNhbGxiYWNrKDApLCAwLCB0aGlzLmRlZmF1bHRzLnNoZWV0LndpZHRoVGV4ZWxzLCB0aGlzLmRlZmF1bHRzLnNoZWV0LmhlaWdodFRleGVscywgdGhpcy5kZWZhdWx0cy5zaGVldC5jb2xvcik7XHJcbiAgICAgIHRlc3Qub25Mb2FkID0gKCk9PiB7XHJcbiAgICAgICAgdGhpcy5jYWxjUHJvcHModGVzdC53aWR0aCwgdGVzdC5oZWlnaHQpO1xyXG4gICAgICAgIHRlc3QuZGlzcG9zZSgpO1xyXG4gICAgICAgIHRoaXMucmVhZHkoKTtcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLnByb3BzID0gdGhpcy5kZWZhdWx0cztcclxuICAgICAgdGhpcy5yZWFkeSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9DbGJCb29rUHJvcHNCdWlsZGVyLmpzIiwiaW1wb3J0IFNoZWV0QmxvY2sgZnJvbSAnLi9TaGVldEJsb2NrJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvdmVyIGV4dGVuZHMgU2hlZXRCbG9jayB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZpc3VhbCwgcCwgYW5nbGUsIHN0YXRlKSB7XHJcbiAgICBzdXBlcih2aXN1YWwsIHAsIDAsIDEsIGFuZ2xlLCBzdGF0ZSk7XHJcbiAgfVxyXG5cclxuICBnZXRQcm9wcygpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIC4uLnRoaXMucC5jb3ZlcixcclxuICAgICAgc2hlZXRzOiAxXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgbG9hZFBvaW50cygpIHtcclxuICAgIGNvbnN0IG9wZW5lZEludGVycG9sYXRpb25JbmRlY2VzID0gW1xyXG4gICAgICBbMiwzLDRdLFxyXG4gICAgICBbMiwzLDQsNSw2XVxyXG4gICAgXSxcclxuICAgIGNsb3NlZEludGVycG9sYXRpb25JbmRlY2VzID0gW1xyXG4gICAgICBbMCwxLDJdLFxyXG4gICAgICBbMCwxLDJdXHJcbiAgICBdLFxyXG4gICAgaW50ZXJwb2xhdGlvblBvaW50cyA9IFtcclxuICAgICAge1xyXG4gICAgICAgIHg6IFtcclxuICAgICAgICAgICAgIFswLDAuMjg3NywwLjYzNDcsMC44MTc0LDEuMDAwMF0sXHJcbiAgICAgICAgICAgICBbMCwwLjI4MzEsMC42MjU2LDAuODA4MiwwLjk5MDldLFxyXG4gICAgICAgICAgICAgWzAsMC4yNjAzLDAuNTkzNiwwLjc3NjMsMC45NTg5XSxcclxuICAgICAgICAgICAgIFswLDAuMTM3MCwwLjM4ODEsMC41MzQyLDAuNjc1OF0sXHJcbiAgICAgICAgICAgICBbMCwwLDAsMCwwXVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgeTogW1xyXG4gICAgICAgICAgICAgWzAsMCwwLDAsMF0sXHJcbiAgICAgICAgICAgICBbMCwwLjAyLDAuMDA1LC0wLjAwMSwtMC4wMDI1XSxcclxuICAgICAgICAgICAgIFswLDAuMDQsMC4wMSwtMC4wMDIsLTAuMDA1XSxcclxuICAgICAgICAgICAgIFswLCAwLjI0NjYsIDAuNDc5NSwgMC41NzA4LCAwLjY3NThdLFxyXG4gICAgICAgICAgICAgWzAsIDAuMjg3NywgMC42MzQ3LCAwLjgxNzQsIDEuMDAwMF1cclxuICAgICAgICBdXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICB4OiBbXHJcbiAgICAgICAgICAgICBbMCwwLjI4NzcsMC42MzQ3LDAuODE3NCwxLjAwMDBdLFxyXG4gICAgICAgICAgICAgWzAsMC4yODMxLDAuNjI1NiwwLjgwODIsMC45OTA5XSxcclxuICAgICAgICAgICAgIFswLDAuMjYwMywwLjU5MzYsMC43NzYzLDAuOTU4OV0sXHJcbiAgICAgICAgICAgICBbMC4wMDAsMC4yMzMsMC41NjMsMC43NDYsMC45MjddLFxyXG4gICAgICAgICAgICAgWzAuMDAwLDAuMTQ0LDAuNDMzLDAuNjEzLDAuNzk2XSxcclxuICAgICAgICAgICAgIFswLjAwMCwwLjA3MCwwLjI4OCwwLjQ1NSwwLjYyNl0sXHJcbiAgICAgICAgICAgICBbMCwwLDAsMCwwXVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgeTogW1xyXG4gICAgICAgICAgICAgWzAsMCwwLDAsMF0sXHJcbiAgICAgICAgICAgICBbMCwwLjAyLDAuMDA1LC0wLjAwMSwtMC4wMDI1XSxcclxuICAgICAgICAgICAgIFswLDAuMDQsMC4wMSwtMC4wMDIsLTAuMDA1XSxcclxuICAgICAgICAgICAgIFswLjAwMCwwLjE2OCwwLjI2OSwwLjI3MCwwLjI1NV0sXHJcbiAgICAgICAgICAgICBbMC4wMDAsMC4yNDUsMC40MzUsMC40NTgsMC40NjBdLFxyXG4gICAgICAgICAgICAgWzAuMDAwLDAuMjc4LDAuNTQ0LDAuNjE0LDAuNjczXSxcclxuICAgICAgICAgICAgIFswLCAwLjI4NzcsIDAuNjM0NywgMC44MTc0LCAxLjAwMDBdXHJcbiAgICAgICAgXVxyXG4gICAgICB9XHJcbiAgICBdO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaW50ZXJwb2xhdGlvblBvaW50cyxcclxuICAgICAgb3BlbmVkSW50ZXJwb2xhdGlvbkluZGVjZXMsXHJcbiAgICAgIGNsb3NlZEludGVycG9sYXRpb25JbmRlY2VzXHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL0NvdmVyLmpzIiwiaW1wb3J0IFNoZWV0Q3NzTGF5ZXIgZnJvbSAnLi9TaGVldENzc0xheWVyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENzc0xheWVyc01hbmFnZXIge1xyXG4gIGNvbnN0cnVjdG9yKGJvb2spIHtcclxuICAgIHRoaXMuYm9vayA9IGJvb2s7XHJcbiAgICB0aGlzLnZpc3VhbCA9IGJvb2sudmlzdWFsO1xyXG4gICAgdGhpcy5wYWdlTWFuYWdlciA9IGJvb2sucGFnZU1hbmFnZXI7XHJcbiAgICB0aGlzLndyYXBwZXJzID0ge307XHJcbiAgfVxyXG5cclxuICBnZXRBY3RpdmVzKCkge1xyXG4gICAgY29uc3QgcGFnZSA9IHRoaXMuYm9vay5nZXRQYWdlKCksIHBhZ2VzID0gdGhpcy5ib29rLmdldFBhZ2VzKCk7XHJcbiAgICByZXR1cm4gcGFnZT09PTAgfHwgcGFnZT09PXBhZ2VzLTE/IFtwYWdlXTogW3BhZ2UsIHBhZ2UrMV07XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgZm9yKGxldCB3IG9mIE9iamVjdC52YWx1ZXModGhpcy53cmFwcGVycykpIHtcclxuICAgICAgdy5sYXllcnMuZm9yRWFjaCgobCk9PiBsLmRpc3Bvc2UoKSk7XHJcbiAgICB9XHJcbiAgICBkZWxldGUgdGhpcy53cmFwcGVycztcclxuICB9XHJcblxyXG4gIHNob3coKSB7XHJcbiAgICB0aGlzLmhpZGRlbiA9IGZhbHNlO1xyXG4gICAgZm9yKGxldCBuIG9mIHRoaXMuZ2V0QWN0aXZlcygpKSB7XHJcbiAgICAgIGNvbnN0IHcgPSB0aGlzLndyYXBwZXJzW25dO1xyXG4gICAgICBpZih3KSB7XHJcbiAgICAgICAgaWYody5zdGF0ZT09PSdyZWFkeScgJiYgdy5sYXllcnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICBjb25zdCBibG9jayA9IHRoaXMuYm9vay5nZXRCbG9ja0J5UGFnZShuKTtcclxuICAgICAgICAgIHcubGF5ZXJzLmZvckVhY2goKGwpPT4ge1xyXG4gICAgICAgICAgICBpZihsLmlzSGlkZGVuKCkpIHtcclxuICAgICAgICAgICAgICBsLnVwZGF0ZShibG9jayk7XHJcbiAgICAgICAgICAgICAgbC5zaG93KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBjb25zdCB3ID0gdGhpcy53cmFwcGVyc1tuXSA9IHtcclxuICAgICAgICAgIHN0YXRlOiAnbG9hZGluZycsXHJcbiAgICAgICAgICBsYXllcnM6IFtdXHJcbiAgICAgICAgfTtcclxuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpPT4ge1xyXG4gICAgICAgICAgdGhpcy5wYWdlTWFuYWdlci5nZXRMYXllcnMobiwgKGxheWVycyk9PiB7XHJcbiAgICAgICAgICAgIGlmKGxheWVycy5sZW5ndGggJiYgdGhpcy53cmFwcGVycykge1xyXG4gICAgICAgICAgICAgIGNvbnN0IGJsb2NrID0gdGhpcy5ib29rLmdldEJsb2NrQnlQYWdlKG4pO1xyXG4gICAgICAgICAgICAgIGZvcihsZXQgbCBvZiBsYXllcnMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNsID0gbmV3IFNoZWV0Q3NzTGF5ZXIodGhpcy52aXN1YWwsIGJsb2NrKTtcclxuICAgICAgICAgICAgICAgIHcubGF5ZXJzLnB1c2goc2wpO1xyXG4gICAgICAgICAgICAgICAgc2wuc2V0KGwuY3NzLCBsLmh0bWwsIGwuanMpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYoIXRoaXMuaGlkZGVuICYmIH50aGlzLmdldEFjdGl2ZXMoKS5pbmRleE9mKG4pKSB7XHJcbiAgICAgICAgICAgICAgICAgIHcubGF5ZXJzLmZvckVhY2goKGwpPT4gbC5zaG93KCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0sIDEwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB3LnN0YXRlID0gJ3JlYWR5JztcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG4gIGhpZGUoKSB7XHJcbiAgICB0aGlzLmhpZGRlbiA9IHRydWU7XHJcbiAgICBjb25zdCB3YWl0ID0gW107XHJcbiAgICBmb3IobGV0IHcgb2YgT2JqZWN0LnZhbHVlcyh0aGlzLndyYXBwZXJzKSkge1xyXG4gICAgICB3LmxheWVycy5mb3JFYWNoKChsKT0+IHdhaXQucHVzaChsLmhpZGUoKSkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHdhaXQpO1xyXG4gIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL0Nzc0xheWVyc01hbmFnZXIuanMiLCJpbXBvcnQgeyQsIFRIUkVFfSBmcm9tICcuLi9saWJzJ1xyXG5pbXBvcnQgQ2FjaGUgZnJvbSAnQ2FjaGUnO1xyXG5pbXBvcnQgTG9hZGluZ0FuaW1hdGlvbiBmcm9tICdMb2FkaW5nQW5pbWF0aW9uJztcclxuaW1wb3J0IEltYWdlRmFjdG9yeSBmcm9tICdJbWFnZUZhY3RvcnknO1xyXG5pbXBvcnQgQmFzZU1hdGhVdGlscyBmcm9tICdCYXNlTWF0aFV0aWxzJztcclxuaW1wb3J0IFRleHR1cmVBbmltYXRvciBmcm9tICdUZXh0dXJlQW5pbWF0b3InO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFnZU1hbmFnZXIge1xyXG5cclxuICBjb25zdHJ1Y3Rvcih2aXN1YWwsIGJvb2ssIHApIHtcclxuICAgIHRoaXMudmlzdWFsID0gdmlzdWFsO1xyXG4gICAgdGhpcy5ib29rID0gYm9vaztcclxuICAgIHRoaXMucGFnZVF1ZXJ5ID0gJyc7XHJcbiAgICB0aGlzLnAgPSBwO1xyXG4gICAgdGhpcy5wYWdlQ2FjaGUgPSBuZXcgQ2FjaGUocC5jYWNoZWRQYWdlcyk7XHJcbiAgICB0aGlzLnJlc291cmNlc0NhY2hlID0gbmV3IENhY2hlKCk7XHJcbiAgICB0aGlzLmNhbnZhcyA9ICQoJzxjYW52YXM+JylbMF07XHJcbiAgICB0aGlzLmltYWdlRmFjdG9yeSA9IG5ldyBJbWFnZUZhY3Rvcnkoey4uLnZpc3VhbCwgZGlzcGF0Y2hFdmVudDogYm9vay5kaXNwYXRjaEV2ZW50LmJpbmQoYm9vayksIHJlbmRlckNhbnZhczogdGhpcy5jYW52YXMsIHJlbmRlckNhbnZhc0N0eDogdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKX0sIHRoaXMucmVzb3VyY2VzQ2FjaGUpO1xyXG5cclxuICAgIHRoaXMubG9hZGluZ3MgPSBbXTtcclxuICAgIHRoaXMucmVuZGVyUXVldWUgPSBbXTtcclxuICAgIHRoaXMucGFnZVJlcXVlc3RzID0gW107XHJcbiAgICB0aGlzLnByZWRpY3RlZFJlcXVlc3RzID0gW107XHJcblxyXG4gICAgdGhpcy50bXBNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCgpO1xyXG4gICAgdmlzdWFsLmFkZE9iamVjdChuZXcgVEhSRUUuTWVzaChuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeSgwLCAwKSwgdGhpcy50bXBNYXRlcmlhbCkpO1xyXG5cclxuICAgIHRoaXMubG9hZGluZyA9IHt9O1xyXG4gICAgdGhpcy5sb2FkaW5nW3AuY292ZXIuY29sb3JdID0gdGhpcy5jcmVhdGVMb2FkaW5nVGV4dHVyZShwLmNvdmVyKTtcclxuICAgIGlmKHAucGFnZS5jb2xvciE9PXAuY292ZXIuY29sb3IpIHtcclxuICAgICAgdGhpcy5sb2FkaW5nW3AucGFnZS5jb2xvcl0gPSB0aGlzLmNyZWF0ZUxvYWRpbmdUZXh0dXJlKHAucGFnZSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy50dXJuT25FdmVudHMoKTtcclxuXHJcbiAgICB2aXN1YWwuYWRkUmVuZGVyQ2FsbGJhY2sodGhpcy51cGRhdGUuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgc2V0SW50ZXJ2YWwodGhpcy51cGRhdGVSZW5kZXJRdWV1ZS5iaW5kKHRoaXMpLCAyNTApO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlTG9hZGluZ1RleHR1cmUocCkge1xyXG4gICAgY29uc3Qgc3ByaXRlVGlsZXMgPSA2LFxyXG4gICAgICBzY2FsZSA9IE1hdGguc3FydCg0LjUqMjEwKjQuNSoyOTcvKHAud2lkdGhUZXhlbHMqcC5oZWlnaHRUZXhlbHMpKSxcclxuICAgICAgYW5pbWF0aW9uID0gbmV3IExvYWRpbmdBbmltYXRpb24oc2NhbGUqcC53aWR0aFRleGVscywgc2NhbGUqcC5oZWlnaHRUZXhlbHMsIHAuY29sb3IpLFxyXG4gICAgICBhbmltYXRvciA9IG5ldyBUZXh0dXJlQW5pbWF0b3IoYW5pbWF0aW9uLmNyZWF0ZVNwcml0ZShzcHJpdGVUaWxlcyksIHNwcml0ZVRpbGVzLCAxLCBzcHJpdGVUaWxlcywgMC4yKTtcclxuICAgIGFuaW1hdGlvbi5kaXNwb3NlKCk7XHJcbiAgICByZXR1cm4gYW5pbWF0b3I7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgdGhpcy50dXJuT2ZmRXZlbnRzKCk7XHJcbiAgICBmb3IobGV0IGNvbG9yIG9mIE9iamVjdC5rZXlzKHRoaXMubG9hZGluZykpIHtcclxuICAgICAgdGhpcy5sb2FkaW5nW2NvbG9yXS5kaXNwb3NlKCk7XHJcbiAgICB9XHJcbiAgICBkZWxldGUgdGhpcy5sb2FkaW5nO1xyXG4gICAgdGhpcy5yZXNvdXJjZXNDYWNoZS5kaXNwb3NlKCk7XHJcbiAgICB0aGlzLnBhZ2VDYWNoZS5kaXNwb3NlKCk7XHJcbiAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSB0aGlzLmNhbnZhcy53aWR0aCA9IDA7XHJcbiAgICBkZWxldGUgdGhpcy5jYW52YXM7XHJcbiAgfVxyXG5cclxuICBpc0NvdmVyKG4pIHtcclxuICAgIHJldHVybiBuPDIgfHwgbj49MioodGhpcy5wLnNoZWV0cysxKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZShkdCkge1xyXG4gICAgY29uc3QgbG9hZGluZyA9IHt9O1xyXG4gICAgZm9yKGxldCBvIG9mIHRoaXMubG9hZGluZ3MpIHtcclxuICAgICAgaWYoby5pc0FjdGl2ZSgpKSB7XHJcbiAgICAgICAgbG9hZGluZ1tvLmNvbG9yXSA9IHRydWU7O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBmb3IobGV0IGNvbG9yIG9mIE9iamVjdC5rZXlzKGxvYWRpbmcpKSB7XHJcbiAgICAgIHRoaXMubG9hZGluZ1tjb2xvcl0udXBkYXRlKGR0KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbW92ZUZyb21Mb2FkaW5ncyhvKSB7XHJcbiAgICBjb25zdCBpID0gdGhpcy5sb2FkaW5ncy5pbmRleE9mKG8pO1xyXG4gICAgaWYofmkpIHtcclxuICAgICAgdGhpcy5sb2FkaW5ncy5zcGxpY2UoaSwgMSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW1vdmVGcm9tUmVuZGVyUXVldWUobykge1xyXG4gICAgY29uc3QgaSA9IHRoaXMucmVuZGVyUXVldWUuaW5kZXhPZihvKTtcclxuICAgIGlmKH5pKSB7XHJcbiAgICAgIHRoaXMucmVuZGVyUXVldWUuc3BsaWNlKGksIDEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVmcmVzaFBhZ2VRdWVyeShuLCBxdWVyeT0nJykge1xyXG4gICAgdGhpcy5wYWdlUXVlcnkgPSBxdWVyeTtcclxuICAgIGNvbnN0IG9iamVjdCA9IHRoaXMucGFnZUNhY2hlLmdldChuKTtcclxuICAgIGlmKG9iamVjdCAmJiBvYmplY3Qud3JhcHBlciAmJiBvYmplY3Qud3JhcHBlci5zZXRRdWVyeSkge1xyXG4gICAgICBpZighdGhpcy5wYWdlQ2FjaGUucmVtb3ZlKG4pKSB7XHJcbiAgICAgICAgb2JqZWN0LndyYXBwZXIuc2V0UXVlcnkocXVlcnkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRMYXllcnMobiwgY2xiKSB7XHJcbiAgICBpZih0aGlzLnAuY3NzTGF5ZXJzTG9hZGVyKSB7XHJcbiAgICAgIHRoaXMucC5jc3NMYXllcnNMb2FkZXIobiwgKC4uLmFyZ3MpPT4ge1xyXG4gICAgICAgIGNvbnN0IG9iamVjdCA9IHRoaXMucGFnZUNhY2hlLmdldChuKTtcclxuICAgICAgICBpZihvYmplY3QpIHtcclxuICAgICAgICAgIGlmKG9iamVjdC5zdGF0ZSE9PSdhY3RpdmUnKSB7XHJcbiAgICAgICAgICAgIG9iamVjdC5wZW5kaW5ncy5wdXNoKHtjbGIsIGFyZ3N9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjbGIoLi4uYXJncyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBjbGIoW10pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVzb2x2ZVBlbmRpbmdzKHBlbmRpbmdzKSB7XHJcbiAgICBmb3IobGV0IHAgb2YgcGVuZGluZ3MpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBwLmNsYiguLi5wLmFyZ3MpO1xyXG4gICAgICB9XHJcbiAgICAgIGNhdGNoKGUpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBwZW5kaW5ncy5zcGxpY2UoMCwgcGVuZGluZ3MubGVuZ3RoKTtcclxuICB9XHJcblxyXG4gIGxvYWQobWF0ZXJpYWwsIG4pIHtcclxuICAgIGNvbnN0IHBpID0gdGhpcy5wLnBhZ2VDYWxsYmFjayhuKSwgcCA9IHRoaXMuaXNDb3ZlcihuKT8gdGhpcy5wLmNvdmVyOiB0aGlzLnAucGFnZTtcclxuICAgIGNvbnN0IG8gPSB7XHJcbiAgICAgIHRleHR1cmU6IG5ldyBUSFJFRS5UZXh0dXJlKCksXHJcbiAgICAgIHdyYXBwZXI6IG51bGwsXHJcbiAgICAgIHN0YXRlOiAnbG9hZGluZycsXHJcbiAgICAgIGxvY2tlZDogKG4pPT4gby5zdGF0ZSA9PT0gJ2xvYWRpbmcnIHx8IG8uc3RhdGUgPT09ICdyZW5kZXJpbmcnIHx8IHRoaXMuYm9vay5pc0FjdGl2ZVBhZ2UobiksXHJcbiAgICAgIGNvbG9yOiBwLmNvbG9yLFxyXG4gICAgICBpc0FjdGl2ZTogKCk9PiB0aGlzLmJvb2suaXNBY3RpdmVQYWdlKG4pLFxyXG4gICAgICBkaXNwb3NlOiAoKT0+IHtcclxuICAgICAgICB0aGlzLnJlbW92ZUZyb21Mb2FkaW5ncyhvKTtcclxuICAgICAgICB0aGlzLnJlbW92ZUZyb21SZW5kZXJRdWV1ZShvKTtcclxuICAgICAgICBpZihvLndyYXBwZXIgJiYgby53cmFwcGVyLmRpc3Bvc2UpIHtcclxuICAgICAgICAgIG8ud3JhcHBlci5kaXNwb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG8udGV4dHVyZS5kaXNwb3NlKCk7XHJcbiAgICAgICAgZGVsZXRlIG8udGV4dHVyZTtcclxuICAgICAgICBkZWxldGUgby53cmFwcGVyO1xyXG4gICAgICB9LFxyXG4gICAgICBwZW5kaW5nczogW11cclxuICAgIH07XHJcbiAgICBvLnRleHR1cmUubWluRmlsdGVyID0gVEhSRUUuTGluZWFyRmlsdGVyO1xyXG4gICAgdGhpcy5sb2FkaW5ncy5wdXNoKG8pO1xyXG4gICAgdGhpcy5zZXRNYXRlcmlhbChvLCBtYXRlcmlhbCk7XHJcblxyXG4gICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKT0+IHtcclxuICAgICAgaWYoby50ZXh0dXJlKSB7XHJcbiAgICAgICAgY29uc3Qgd2lkdGhUZXhlbHMgPSBwaS53aWR0aFRleGVscyB8fCBwLndpZHRoVGV4ZWxzLFxyXG4gICAgICAgICAgICAgIGhlaWdodFRleGVscyA9IHBpLmhlaWdodFRleGVscyB8fCBwLmhlaWdodFRleGVscztcclxuICAgICAgICBvLndyYXBwZXIgPSB0aGlzLmltYWdlRmFjdG9yeS5idWlsZChwaSwgcGkubnVtYmVyPT09dW5kZWZpbmVkPyBuOiBwaS5udW1iZXIsIHdpZHRoVGV4ZWxzLCBoZWlnaHRUZXhlbHMsIHAuY29sb3IsIHRoaXMucC5pbmplY3Rvcik7XHJcbiAgICAgICAgaWYoby53cmFwcGVyLnNldFF1ZXJ5KSB7XHJcbiAgICAgICAgICBvLndyYXBwZXIuc2V0UXVlcnkodGhpcy5wYWdlUXVlcnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBvLnNpbXVsYXRlID0gcGkuaW50ZXJhY3RpdmU/IChvLndyYXBwZXIuc2ltdWxhdGUgfHwgKCgpPT4gdW5kZWZpbmVkKSkuYmluZChvLndyYXBwZXIpOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgby53cmFwcGVyLm9uTG9hZCA9ICgpPT4ge1xyXG4gICAgICAgICAgaWYoby5zdGF0ZSAhPT0gJ3F1ZXVlZEZvclJlbmRlcicpIHtcclxuICAgICAgICAgICAgby5zdGF0ZSA9ICdxdWV1ZWRGb3JSZW5kZXInO1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlclF1ZXVlLnB1c2gobyk7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUmVuZGVyUXVldWUoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIG8ud3JhcHBlci5vbkNoYW5nZSA9IChpbWFnZSk9PiB7XHJcbiAgICAgICAgICBpZihvLnRleHR1cmUpIHtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVGcm9tTG9hZGluZ3Mobyk7XHJcbiAgICAgICAgICAgIGlmKG8ubWF0ZXJpYWwpIHtcclxuICAgICAgICAgICAgICBvLm1hdGVyaWFsLm1hcCA9IG8udGV4dHVyZTtcclxuICAgICAgICAgICAgICBvLm1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvLnRleHR1cmUuaW1hZ2UgPSBpbWFnZTtcclxuICAgICAgICAgICAgby50ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgby50ZXh0dXJlLm9uVXBkYXRlID0gKCk9PiB7XHJcbiAgICAgICAgICAgICAgaWYoby5zdGF0ZSAhPT0gJ3F1ZXVlZEZvclJlbmRlcicpIHtcclxuICAgICAgICAgICAgICAgIG8uc3RhdGUgPSAnYWN0aXZlJztcclxuICAgICAgICAgICAgICAgIHRoaXMucmVzb2x2ZVBlbmRpbmdzKG8ucGVuZGluZ3MpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBkZWxldGUgdGhpcy5yZW5kZXJpbmc7XHJcbiAgICAgICAgICAgICAgdGhpcy51cGRhdGVSZW5kZXJRdWV1ZSgpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0aGlzLnRtcE1hdGVyaWFsLm1hcCA9IG8udGV4dHVyZTtcclxuICAgICAgICAgICAgdGhpcy50bXBNYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdGhpcy5wYWdlQ2FjaGUucHV0KG4sIG8pO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlUmVuZGVyUXVldWUoKSB7XHJcbiAgICBjb25zdCBwID0gdGhpcy5ib29rLnA7XHJcbiAgICBpZighdGhpcy5yZW5kZXJpbmcgJiYgKHAucmVuZGVyV2hpbGVGbGlwcGluZyB8fCAhdGhpcy5ib29rLmlzUHJvY2Vzc2luZygpKSkge1xyXG4gICAgICBmb3IobGV0IG8gb2YgdGhpcy5yZW5kZXJRdWV1ZSkge1xyXG4gICAgICAgIGlmKG8uaXNBY3RpdmUoKSkge1xyXG4gICAgICAgICAgdGhpcy5yZW5kZXJpbmcgPSBvO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmKHAucmVuZGVySW5hY3RpdmVQYWdlcykge1xyXG4gICAgICAgIHRoaXMucmVuZGVyaW5nID0gdGhpcy5yZW5kZXJpbmcgfHwgdGhpcy5yZW5kZXJRdWV1ZVswXTtcclxuICAgICAgfVxyXG4gICAgICBpZih0aGlzLnJlbmRlcmluZykge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlRnJvbVJlbmRlclF1ZXVlKHRoaXMucmVuZGVyaW5nKTtcclxuICAgICAgICB0aGlzLnJlbmRlcmluZy5zdGF0ZSA9ICdyZW5kZXJpbmcnO1xyXG4gICAgICAgIHRoaXMucmVuZGVyaW5nLndyYXBwZXIuc3RhcnRSZW5kZXIoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdHVybk9uRXZlbnRzKCkge1xyXG4gICAgdGhpcy50cmFuc2ZlckV2ZW50cyA9IHRydWU7XHJcbiAgfVxyXG5cclxuICB0dXJuT2ZmRXZlbnRzKCkge1xyXG4gICAgY29uc3QgbW91c2V1cCA9ICQuRXZlbnQoJ21vdXNldXAnKSwgbW91c2VvdXQgPSAkLkV2ZW50KCdtb3VzZW91dCcpO1xyXG4gICAgdGhpcy5wYWdlQ2FjaGUuZm9yRWFjaCgoZW50KT0+IHtcclxuICAgICAgY29uc3Qgb2JqZWN0ID0gZW50WzFdO1xyXG4gICAgICBpZihvYmplY3Quc2ltdWxhdGUpIHtcclxuICAgICAgICBvYmplY3Quc2ltdWxhdGUobW91c2V1cCwgdW5kZWZpbmVkLCAwLCAwKTtcclxuICAgICAgICBvYmplY3Quc2ltdWxhdGUobW91c2VvdXQsIHVuZGVmaW5lZCwgMCwgMCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgdGhpcy50cmFuc2ZlckV2ZW50cyA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgdHJhbnNmZXJFdmVudFRvVGV4dHVyZShuLCBlLCBkYXRhKSB7XHJcbiAgICBpZih0aGlzLnRyYW5zZmVyRXZlbnRzKSB7XHJcbiAgICAgIGNvbnN0IHRvT2JqZWN0ID0gdGhpcy5nZXRPckxvYWRUZXh0dXJlT2JqZWN0KHVuZGVmaW5lZCwgbiksIHt1dn0gPSBkYXRhLCB0b0RvYyA9IHRvT2JqZWN0LndyYXBwZXIuZ2V0U2ltdWxhdGVkRG9jKCk7XHJcbiAgICAgIHRoaXMucGFnZUNhY2hlLmZvckVhY2goKGVudCk9PiB7XHJcbiAgICAgICAgY29uc3Qgb2JqZWN0ID0gZW50WzFdO1xyXG4gICAgICAgIGlmKG9iamVjdC5zaW11bGF0ZSkge1xyXG4gICAgICAgICAgb2JqZWN0LnNpbXVsYXRlKGUsIHRvRG9jLCB1di54LCB1di55KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbG9hZFByZWRpY3RlZFBhZ2VzKCkge1xyXG4gICAgdGhpcy5wcmVkaWN0ZWRSZXF1ZXN0cyA9IEJhc2VNYXRoVXRpbHMucHJlZGljdCh0aGlzLnBhZ2VSZXF1ZXN0cywgdGhpcy5wLnByZWxvYWRQYWdlcyk7XHJcbiAgICBmb3IobGV0IHAgb2YgdGhpcy5wcmVkaWN0ZWRSZXF1ZXN0cykge1xyXG4gICAgICBpZihwPHRoaXMuYm9vay5nZXRQYWdlcygpICYmICF0aGlzLnBhZ2VDYWNoZS5nZXQocCkpIHtcclxuICAgICAgICB0aGlzLmxvYWQodW5kZWZpbmVkLCBwKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYWRkUGFnZVJlcXVlc3Qobikge1xyXG4gICAgdGhpcy5wYWdlUmVxdWVzdHMucHVzaChuKTtcclxuICAgIGlmKHRoaXMucGFnZVJlcXVlc3RzLmxlbmd0aD50aGlzLnAucGFnZXNGb3JQcmVkaWN0aW5nKSB7XHJcbiAgICAgIHRoaXMucGFnZVJlcXVlc3RzLnNoaWZ0KCk7XHJcbiAgICB9XHJcbiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKHRoaXMubG9hZFByZWRpY3RlZFBhZ2VzLmJpbmQodGhpcykpO1xyXG4gIH1cclxuXHJcbiAgc2V0TWF0ZXJpYWwobywgbWF0ZXJpYWwpIHtcclxuICAgIHRoaXMucGFnZUNhY2hlLmZvckVhY2goKGUpPT4ge1xyXG4gICAgICBjb25zdCBvYiA9IGVbMV07XHJcbiAgICAgIGlmKG8hPT1vYiAmJiBvYi5tYXRlcmlhbD09PW1hdGVyaWFsKSB7XHJcbiAgICAgICAgZGVsZXRlIG9iLm1hdGVyaWFsO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIGlmKG1hdGVyaWFsICYmIG1hdGVyaWFsIT09by5tYXRlcmlhbCkge1xyXG4gICAgICBvLm1hdGVyaWFsID0gbWF0ZXJpYWw7XHJcbiAgICAgIG1hdGVyaWFsLm1hcCA9IG8udGV4dHVyZS5pbWFnZT8gby50ZXh0dXJlOiB0aGlzLmxvYWRpbmdbby5jb2xvcl0udGV4dHVyZTtcclxuICAgICAgbWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0T3JMb2FkVGV4dHVyZU9iamVjdChtYXRlcmlhbCwgbikge1xyXG4gICAgbGV0IG9iamVjdCA9IHRoaXMucGFnZUNhY2hlLmdldChuKTtcclxuICAgIGlmKCFvYmplY3QpIHtcclxuICAgICAgb2JqZWN0ID0gdGhpcy5sb2FkKG1hdGVyaWFsLCBuKTtcclxuICAgICAgdGhpcy5hZGRQYWdlUmVxdWVzdChuKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLnNldE1hdGVyaWFsKG9iamVjdCwgbWF0ZXJpYWwpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBvYmplY3Q7XHJcbiAgfVxyXG5cclxuICBzZXRUZXh0dXJlKG1hdGVyaWFsLCBuKSB7XHJcbiAgICBpZih+dGhpcy5wcmVkaWN0ZWRSZXF1ZXN0cy5pbmRleE9mKG4pKSB7XHJcbiAgICAgIHRoaXMuYWRkUGFnZVJlcXVlc3Qobik7XHJcbiAgICB9XHJcbiAgICB0aGlzLmdldE9yTG9hZFRleHR1cmVPYmplY3QobWF0ZXJpYWwsIG4pO1xyXG4gIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL1BhZ2VNYW5hZ2VyLmpzIiwiaW1wb3J0IEJvb2tQcm9wc0J1aWxkZXIgZnJvbSAnLi9Cb29rUHJvcHNCdWlsZGVyJztcclxuaW1wb3J0IFBkZiBmcm9tICdQZGYnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGRmQm9va1Byb3BzQnVpbGRlciBleHRlbmRzIEJvb2tQcm9wc0J1aWxkZXIge1xyXG5cclxuICBjb25zdHJ1Y3RvcihzcmMsIG9uUmVhZHkpIHtcclxuICAgIHN1cGVyKG9uUmVhZHkpO1xyXG4gICAgdGhpcy5wZGYgPSBuZXcgUGRmKHNyYyk7XHJcbiAgICB0aGlzLnBhZ2VEZXNjcmlwdGlvbiA9IHtcclxuICAgICAgdHlwZTogJ3BkZicsXHJcbiAgICAgIHNyYzogdGhpcy5wZGYsXHJcbiAgICAgIGludGVyYWN0aXZlOiB0cnVlXHJcbiAgICB9O1xyXG4gICAgdGhpcy5iaW5kcyA9IHtcclxuICAgICAgcGFnZUNhbGxiYWNrOiB0aGlzLnBhZ2VDYWxsYmFjay5iaW5kKHRoaXMpXHJcbiAgICB9O1xyXG4gICAgdGhpcy5wZGYuZ2V0SGFuZGxlcih0aGlzLmluaXQuYmluZCh0aGlzKSk7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgdGhpcy5wZGYuZGlzcG9zZSgpO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgaW5pdChoYW5kbGVyKSB7XHJcbiAgICB0aGlzLmNhbGNTaGVldHModGhpcy5wZGYuZ2V0UGFnZXNOdW0oKSk7XHJcbiAgICBpZih0aGlzLnBkZi5nZXRQYWdlc051bSgpPjApIHtcclxuICAgICAgaGFuZGxlci5nZXRQYWdlKDEpLlxyXG4gICAgICAgIHRoZW4oKHBhZ2UpPT4ge1xyXG4gICAgICAgICAgY29uc3Qgc2l6ZSA9IFBkZi5nZXRQYWdlU2l6ZShwYWdlKTtcclxuICAgICAgICAgIHRoaXMuY2FsY1Byb3BzKHNpemUud2lkdGgsIHNpemUuaGVpZ2h0KTtcclxuICAgICAgICAgIHRoaXMucmVhZHkoKTtcclxuICAgICAgICB9KS5cclxuICAgICAgICBjYXRjaCgoZSk9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMucHJvcHMgPSB0aGlzLmRlZmF1bHRzO1xyXG4gICAgICB0aGlzLnJlYWR5KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwYWdlQ2FsbGJhY2sobikge1xyXG4gICAgcmV0dXJuIHRoaXMucGFnZURlc2NyaXB0aW9uO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9QZGZCb29rUHJvcHNCdWlsZGVyLmpzIiwiaW1wb3J0IHskfSBmcm9tICcuLi9saWJzJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGRmTGlua3NIYW5kbGVyIHtcclxuXHJcbiAgY29uc3RydWN0b3IocGRmLCBjdHJsLCBlbGVtZW50KSB7XHJcbiAgICB0aGlzLnBkZiA9IHBkZjtcclxuICAgIHRoaXMuY3RybCA9IGN0cmw7XHJcbiAgICB0aGlzLmVsZW1lbnQgPSAkKGVsZW1lbnQpO1xyXG4gICAgdGhpcy5jdXJzb3JzID0gW107XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG5cclxuICB9XHJcblxyXG4gIHNldEhhbmRsZXIoaGFuZGxlcikge1xyXG4gICAgdGhpcy5oYW5kbGVyID0gaGFuZGxlcjtcclxuICB9XHJcblxyXG4gIGRlZmF1bHRIYW5kbGVyKHR5cGUsIGRlc3RpbmF0aW9uKSB7XHJcbiAgICBpZih0eXBlPT09J2ludGVybmFsJykge1xyXG4gICAgICB0aGlzLmN0cmwuZ29Ub1BhZ2UoZGVzdGluYXRpb24pO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZih0eXBlPT09J2V4dGVybmFsJykge1xyXG4gICAgICB3aW5kb3cub3BlbihkZXN0aW5hdGlvbiwgJ19ibGFuaycpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2FsbEhhbmRsZXJzKHR5cGUsIGRlc3RpbmF0aW9uKSB7XHJcbiAgICBpZighdGhpcy5oYW5kbGVyIHx8ICF0aGlzLmhhbmRsZXIodHlwZSwgZGVzdGluYXRpb24pKSB7XHJcbiAgICAgIHRoaXMuZGVmYXVsdEhhbmRsZXIodHlwZSwgZGVzdGluYXRpb24pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaGFuZGxlRXZlbnQoZGF0YSkge1xyXG4gICAgY29uc3QgZSA9IGRhdGEuZXZlbnQsIGFubm8gPSBkYXRhLmFubm90YXRpb247XHJcbiAgICBzd2l0Y2goZS50eXBlKSB7XHJcbiAgICAgIGNhc2UgJ21vdXNlb3Zlcic6IHtcclxuICAgICAgICB0aGlzLmN1cnNvcnMucHVzaCh0aGlzLmVsZW1lbnQuY3NzKCdjdXJzb3InKSk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LmNzcygnY3Vyc29yJywgJ3BvaW50ZXInKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdtb3VzZW91dCc6IHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQuY3NzKCdjdXJzb3InLCB0aGlzLmN1cnNvcnMucG9wKCkgfHwgJycpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ2NsaWNrJzoge1xyXG4gICAgICAgIGlmKGFubm8udXJsKSB7XHJcbiAgICAgICAgICB0aGlzLmNhbGxIYW5kbGVycygnZXh0ZXJuYWwnLCBhbm5vLnVybCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYoYW5uby5kZXN0KSB7XHJcbiAgICAgICAgICBsZXQgZGVzdFByb21pc2U7XHJcbiAgICAgICAgICBpZih0eXBlb2YgYW5uby5kZXN0PT09J3N0cmluZycpIHtcclxuICAgICAgICAgICAgZGVzdFByb21pc2UgPSB0aGlzLnBkZi5oYW5kbGVyLmdldERlc3RpbmF0aW9uKGFubm8uZGVzdCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZGVzdFByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoYW5uby5kZXN0KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGRlc3RQcm9taXNlLlxyXG4gICAgICAgICAgICB0aGVuKChkZXN0KT0+IHR5cGVvZiBkZXN0WzBdPT09J251bWJlcic/IGRlc3RbMF06IHRoaXMucGRmLmhhbmRsZXIuZ2V0UGFnZUluZGV4KGRlc3RbMF0pKS5cclxuICAgICAgICAgICAgdGhlbigobnVtYmVyKT0+IHRoaXMuY2FsbEhhbmRsZXJzKCdpbnRlcm5hbCcsIG51bWJlcikpLlxyXG4gICAgICAgICAgICBjYXRjaCgoKT0+IGNvbnNvbGUuZXJyb3IoJ0JhZCBsaW5rJykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9QZGZMaW5rc0hhbmRsZXIuanMiLCJpbXBvcnQgRmluZGVyIGZyb20gJ0ZpbmRlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWFyY2hFbmdpbmUge1xyXG4gIGNvbnN0cnVjdG9yKHBhZ2VDYWxsYmFjaywgcGFnZXMpIHtcclxuICAgIHRoaXMucGFnZUNhbGxiYWNrID0gcGFnZUNhbGxiYWNrO1xyXG4gICAgdGhpcy5wYWdlcyA9IHBhZ2VzO1xyXG4gICAgdGhpcy5yZXN1bHRzID0gW107XHJcbiAgfVxyXG5cclxuICBzZXRRdWVyeShxdWVyeSkge1xyXG4gICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xyXG4gICAgdGhpcy51cGRhdGUgPSB0cnVlO1xyXG4gICAgdGhpcy5wcm9jZXNzKCk7XHJcbiAgfVxyXG5cclxuICBwcm9jZXNzKCkge1xyXG4gICAgaWYodGhpcy51cGRhdGUpIHtcclxuICAgICAgY29uc3QgcmVzdWx0cyA9IHRoaXMucmVzdWx0cztcclxuICAgICAgdGhpcy5yZXN1bHRzID0gW107XHJcbiAgICAgIGlmKHRoaXMub25QYWdlSGl0c0NoYW5nZWQpIHtcclxuICAgICAgICBmb3IobGV0IHJlcyBvZiByZXN1bHRzKSB7XHJcbiAgICAgICAgICB0aGlzLm9uUGFnZUhpdHNDaGFuZ2VkKHVuZGVmaW5lZCwgJycpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICB0aGlzLnVwZGF0ZSA9IGZhbHNlO1xyXG4gICAgICB0aGlzLnBhZ2UgPSAwO1xyXG4gICAgICB0aGlzLnN0YW1wID0gRGF0ZS5ub3coKTtcclxuICAgICAgaWYodGhpcy5xdWVyeS5sZW5ndGg+MSkge1xyXG4gICAgICAgIHRoaXMucHJvY2VzcygpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgaWYodGhpcy5wYWdlPHRoaXMucGFnZXMpIHtcclxuICAgICAgICBjb25zdCBzdGFtcCA9IHRoaXMuc3RhbXA7XHJcbiAgICAgICAgdGhpcy5maW5kKHRoaXMucGFnZUNhbGxiYWNrKHRoaXMucGFnZSkpLlxyXG4gICAgICAgICAgdGhlbigoY29udGV4dHMpPT4ge1xyXG4gICAgICAgICAgICBpZihzdGFtcCA9PT0gdGhpcy5zdGFtcCkge1xyXG4gICAgICAgICAgICAgIGlmKGNvbnRleHRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXN1bHRzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICBwYWdlOiB0aGlzLnBhZ2UsXHJcbiAgICAgICAgICAgICAgICAgIGNvbnRleHRzXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgKyt0aGlzLnBhZ2U7XHJcbiAgICAgICAgICAgICAgaWYodGhpcy5vblBhZ2VIaXRzQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vblBhZ2VIaXRzQ2hhbmdlZCh0aGlzLnBhZ2UsIHRoaXMucXVlcnkpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB0aGlzLnByb2Nlc3MoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZpbmQocGkpIHtcclxuICAgIGxldCBuZXh0O1xyXG4gICAgaWYocGkudHlwZT09PSdwZGYnKSB7XHJcbiAgICAgIG5leHQgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSk9PiB7XHJcbiAgICAgICAgcGkuc3JjLmdldEhhbmRsZXIoKGhhbmRsZXIpPT4ge1xyXG4gICAgICAgICAgaGFuZGxlci5nZXRQYWdlKChwaS5udW1iZXI9PT11bmRlZmluZWQ/IHRoaXMucGFnZTogcGkubnVtYmVyKSsxKS5cclxuICAgICAgICAgIHRoZW4oKHBhZ2UpPT4ge1xyXG4gICAgICAgICAgICBwYWdlLmdldFRleHRDb250ZW50KCkuXHJcbiAgICAgICAgICAgIHRoZW4oKHRleHRDb250ZW50KT0+IHtcclxuICAgICAgICAgICAgICByZXNvbHZlKG5ldyBGaW5kZXIodGV4dENvbnRlbnQuaXRlbXMubWFwKChpdGVtKT0+IGl0ZW0uc3RyKSwgdGhpcy5xdWVyeSwge2hpdHM6IGZhbHNlfSkuZ2V0Q29udGV4dHMoKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSkuXHJcbiAgICAgICAgICBjYXRjaCgoKT0+IHJlc29sdmUoW10pKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgbmV4dCA9IFByb21pc2UucmVzb2x2ZShbXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV4dDtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvU2VhcmNoRW5naW5lLmpzIiwiaW1wb3J0IENTU0xheWVyIGZyb20gJ0NTU0xheWVyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNoZWV0Q3NzTGF5ZXIge1xyXG4gIGNvbnN0cnVjdG9yKHZpc3VhbCwgYmxvY2spIHtcclxuICAgIHRoaXMudmlzdWFsID0gdmlzdWFsO1xyXG4gICAgY29uc3Qgc2l6ZSA9IGJsb2NrLmdldFRvcFNpemUoKTtcclxuICAgIHRoaXMubGF5ZXIgPSBuZXcgQ1NTTGF5ZXIoc2l6ZS53aWR0aCwgc2l6ZS5oZWlnaHQpO1xyXG5cclxuICAgIHRoaXMudXBkYXRlKGJsb2NrKTtcclxuICAgIHRoaXMudmlzdWFsLmFkZENzc09iamVjdCh0aGlzLmxheWVyKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLmxheWVyLmRpc3Bvc2UoKTtcclxuICAgIHRoaXMudmlzdWFsLnJlbW92ZUNzc09iamVjdCh0aGlzLmxheWVyKTtcclxuICB9XHJcblxyXG4gIGlzSGlkZGVuKCkge1xyXG4gICAgcmV0dXJuIHRoaXMubGF5ZXIuaXNIaWRkZW4oKTtcclxuICB9XHJcblxyXG4gIGhpZGUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5sYXllci5oaWRlKCk7XHJcbiAgfVxyXG5cclxuICBzaG93KCkge1xyXG4gICAgcmV0dXJuIHRoaXMubGF5ZXIuc2hvdygpO1xyXG4gIH1cclxuXHJcbiAgc2V0KGNzcywgaHRtbCwganMpIHtcclxuICAgIHRoaXMubGF5ZXIuc2V0RGF0YShjc3MsIGh0bWwsIGpzKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZShibG9jaykge1xyXG4gICAgdGhpcy5ibG9jayA9IGJsb2NrO1xyXG4gICAgdGhpcy5ibG9jay5nZXRUb3BXb3JsZFJvdGF0aW9uKHRoaXMubGF5ZXIucm90YXRpb24pO1xyXG4gICAgdGhpcy5ibG9jay5nZXRUb3BXb3JsZFBvc2l0aW9uKHRoaXMubGF5ZXIucG9zaXRpb24pO1xyXG4gIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL1NoZWV0Q3NzTGF5ZXIuanMiLCJpbXBvcnQgTWF0aFV0aWxzIGZyb20gJ01hdGhVdGlscyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaGVldFBoeXNpY3Mge1xyXG5cclxuICBzdGF0aWMgdGFyZ2V0Rm9yY2VDbGIobyxhLHYsY2gpIHtcclxuICAgIGNvbnN0IGwgPSBhKnRoaXMucjtcclxuICAgIHJldHVybiAxMDAqdGhpcy5tKnRoaXMuZyooMi8oMStNYXRoLmV4cCgxMCoobC10aGlzLnRsKSkpLTEpLXRoaXMubSo0MCp2O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGhvdmVyQ29ybmVyRm9yY2VDbGIobyx2LGwsY2gpIHtcclxuICAgIHJldHVybiA1O1xyXG4gIH1cclxuXHJcbiAgZ2V0VGFyZ2V0Rm9yY2VDbGIobWFzcywgdGFyZ2V0QW5nbGUpIHtcclxuICAgIHJldHVybiBTaGVldFBoeXNpY3MudGFyZ2V0Rm9yY2VDbGIuYmluZCh7XHJcbiAgICAgIGc6IHRoaXMucC5ncmF2aXR5LFxyXG4gICAgICBtOiBtYXNzLFxyXG4gICAgICB0bDogdGFyZ2V0QW5nbGUqdGhpcy5wLnIsXHJcbiAgICAgIHI6IHRoaXMucC5yXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkcmFnRm9yY2VDbGIobyxhLHYsY2gpIHtcclxuICAgIHJldHVybiBvLmZsYnQqby5tKigxMCpvLmcqY2gtNTAqdi8oMStNYXRoLmV4cCgzLjUqTWF0aC5hYnMoY2gpKSkpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGRyYWdDb3JuZXJGb3JjZUNsYihvLGEsdixjaCkge1xyXG4gICAgcmV0dXJuIDE1KigyLygxK01hdGguZXhwKDEwKihhLXRoaXMudGEpKm8ucikpLTEpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldERyYWdDb3JuZXJGb3JjZUNsYih0YXJnZXRBbmdsZSkge1xyXG4gICAgcmV0dXJuIFNoZWV0UGh5c2ljcy5kcmFnQ29ybmVyRm9yY2VDbGIuYmluZCh7XHJcbiAgICAgIHRhOiB0YXJnZXRBbmdsZVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihyPTEsIGdyYXZpdHk9MSwgY29ybmVyRGV2aWF0aW9uPTAuMTUsIGZwcz0yNDApIHtcclxuICAgIHRoaXMucCA9IHtcclxuICAgICAgcixcclxuICAgICAgY29ybmVyRGV2aWF0aW9uLFxyXG4gICAgICBsOiBNYXRoLlBJKnIsXHJcbiAgICAgIHN0YXJ0RHQ6IDEvZnBzLFxyXG4gICAgICBncmF2aXR5LFxyXG4gICAgICBtYXJnaW46IDAuMDAyKnIsXHJcbiAgICAgIGluZk06IDFlNCxcclxuICAgICAgYXR0ZW1wdHM6IDE2LFxyXG4gICAgICBtYXhJdGVyYXRpb25zOiAxMDBcclxuICAgIH07XHJcbiAgICB0aGlzLm9zID0gW107XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgdGhpcy5vcyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgZ2V0U2l6ZSgpIHtcclxuICAgIHJldHVybiB0aGlzLm9zLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIGFkZE9iamVjdChtYXNzLCBhbmdsZSwgdmVsb2NpdHksIGZsZXhpYmlsaXR5LCBjb3JuZXJIZWlnaHQsIHNpbXVsYXRlQ2xiLCByZW1vdmVDbGIsIGZvcmNlQ2xiPSgpPT4gMCwgY29ybmVyRm9yY2VDbGI9KCk9PiAwKSB7XHJcbiAgICBjb25zdCBubyA9IHtcclxuICAgICAgaWQ6IE1hdGhVdGlscy5nZXRVbmlxdWUoKSxcclxuICAgICAgbTogbWFzcyxcclxuICAgICAgdjogdmVsb2NpdHksXHJcbiAgICAgIGw6IGFuZ2xlKnRoaXMucC5yLFxyXG4gICAgICBmOiBmb3JjZUNsYixcclxuICAgICAgY2Y6IGNvcm5lckZvcmNlQ2xiLFxyXG4gICAgICBjaDogY29ybmVySGVpZ2h0LFxyXG4gICAgICBmbGJ0OiBmbGV4aWJpbGl0eSxcclxuICAgICAgc2ltdWxhdGVDbGIsXHJcbiAgICAgIHJlbW92ZUNsYlxyXG4gICAgfTtcclxuICAgIGxldCBpID0gdGhpcy5vcy5maW5kSW5kZXgoKG8pPT4gbm8ubDw9by5sKTtcclxuICAgIGkgPSB+aT8gaTogdGhpcy5vcy5sZW5ndGg7XHJcbiAgICB0aGlzLm9zLnNwbGljZShpLCAwLCBubyk7XHJcbiAgICByZXR1cm4gbm8uaWQ7XHJcbiAgfVxyXG5cclxuICBnZXRQYXJhbWV0ck1hcChuYW1lKSB7XHJcbiAgICBjb25zdCBtYXAgPSB7XHJcbiAgICAgIG1hc3M6ICdtJyxcclxuICAgICAgdmVsb2NpdHk6ICd2JyxcclxuICAgICAgZmxleGliaWxpdHk6ICdmbGJ0JyxcclxuICAgICAgY29ybmVySGVpZ2h0OiAnY2gnLFxyXG4gICAgICBzaW11bGF0ZUNsYjogJ3NpbXVsYXRlQ2xiJyxcclxuICAgICAgcmVtb3ZlQ2xiOiAncmVtb3ZlQ2xiJyxcclxuICAgICAgZm9yY2VDbGI6ICdmJyxcclxuICAgICAgY29ybmVyRm9yY2VDbGI6ICdjZidcclxuICAgIH07XHJcbiAgICByZXR1cm4gbWFwW25hbWVdO1xyXG4gIH1cclxuXHJcbiAgc2V0UGFyYW1ldHIoaWQsIG5hbWUsIHZhbHVlKSB7XHJcbiAgICBjb25zdCBvID0gdGhpcy5vcy5maW5kKChvKT0+IG8uaWQ9PT1pZCk7XHJcbiAgICBpZihuYW1lID09PSAnYW5nbGUnKSB7XHJcbiAgICAgIG8ubCA9IHZhbHVlKnRoaXMucC5yO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIG9bdGhpcy5nZXRQYXJhbWV0ck1hcChuYW1lKV0gPSB2YWx1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFBhcmFtZXRyKGlkLCBuYW1lKSB7XHJcbiAgICBjb25zdCBvID0gdGhpcy5vcy5maW5kKChvKT0+IG8uaWQ9PT1pZCk7XHJcbiAgICBsZXQgdmFsdWU7XHJcbiAgICBpZihuYW1lID09PSAnYW5nbGUnKSB7XHJcbiAgICAgIHZhbHVlID0gby5sL3RoaXMucC5yO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHZhbHVlID0gb1t0aGlzLmdldFBhcmFtZXRyTWFwKG5hbWUpXTtcclxuICAgIH1cclxuICAgIHJldHVybiB2YWx1ZTtcclxuICB9XHJcblxyXG4gIHNpbXVsYXRlKFQpIHtcclxuICAgIGxldCB0PTAsXHJcbiAgICAgICAgZHQ9dGhpcy5wLnN0YXJ0RHQsXHJcbiAgICAgICAgYXR0ZW1wdD0wLFxyXG4gICAgICAgIGl0PTA7XHJcblxyXG4gICAgd2hpbGUodDxUICYmIGl0PHRoaXMucC5tYXhJdGVyYXRpb25zKSB7XHJcbiAgICAgIGlmKGR0PlQtdCkge1xyXG4gICAgICAgIGR0ID0gVC10O1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IG5vcyA9IHRoaXMuaW50ZWdyYXRlKHRoaXMub3MsIGR0KSxcclxuICAgICAgICAgICAgY2kgPSB0aGlzLmZpbmRDb2xsaXNpb25zKG5vcyk7XHJcbiAgICAgIGlmKGNpLm51bT4xICYmIGF0dGVtcHQ8dGhpcy5wLmF0dGVtcHRzKSB7XHJcbiAgICAgICAgZHQvPTI7XHJcbiAgICAgICAgKythdHRlbXB0O1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGlmKGNpLm51bT09PTEpIHtcclxuICAgICAgICAgIGNvbnN0IHNjb3MgPSB0aGlzLnNvbHZlQ29sbGlzaW9uKG5vc1tjaS5sYXN0LTFdLCBub3NbY2kubGFzdF0pO1xyXG4gICAgICAgICAgbm9zW2NpLmxhc3QtMV0gPSBzY29zWzBdO1xyXG4gICAgICAgICAgbm9zW2NpLmxhc3RdID0gc2Nvc1sxXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihjaS5udW0+MSkge1xyXG4gICAgICAgICAgY29uc3QgZ3MgPSBbXTtcclxuICAgICAgICAgIGxldCBsYXN0ID0gLTI7XHJcbiAgICAgICAgICBmb3IobGV0IGkgb2YgY2kuYWxsKSB7XHJcbiAgICAgICAgICAgIGlmKGktbGFzdD4xKSB7XHJcbiAgICAgICAgICAgICAgZ3MucHVzaChbXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZ3NbZ3MubGVuZ3RoLTFdLnB1c2goaSk7XHJcbiAgICAgICAgICAgIGxhc3QgPSBpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZm9yKGxldCBnIG9mIGdzKSB7XHJcbiAgICAgICAgICAgIGxldCBzZywgaTA7XHJcbiAgICAgICAgICAgIGlmKG5vc1tnWzBdXS5sPk1hdGguUEkvMip0aGlzLnAucikge1xyXG4gICAgICAgICAgICAgIHNnID0gLTE7XHJcbiAgICAgICAgICAgICAgaTAgPSBnW2cubGVuZ3RoLTFdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgIHNnID0gMTtcclxuICAgICAgICAgICAgICBpMCA9IGdbMF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yKGxldCBpPWkwOyBpPG5vcy5sZW5ndGggJiYgaT4tMTsgaSs9c2cpIHtcclxuICAgICAgICAgICAgICBjb25zdCBvID0gbm9zW2krc2ddO1xyXG4gICAgICAgICAgICAgIGlmKG8gJiYgc2cqKG8ubC1ub3NbaV0ubCk8PXRoaXMucC5tYXJnaW4pIHtcclxuICAgICAgICAgICAgICAgIG8ubD1ub3NbaV0ubCtzZyoyKnRoaXMucC5tYXJnaW47XHJcbiAgICAgICAgICAgICAgICBpZihvLmw+dGhpcy5wLmwgfHwgby5sPDApIHtcclxuICAgICAgICAgICAgICAgICAgby5sID0gby5sPnRoaXMucC5sPyB0aGlzLnAubDogMDtcclxuICAgICAgICAgICAgICAgICAgby5jaCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgIG8udj0wO1xyXG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdCYWQgY29sbGlzaW9uJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMub3MgPSBub3M7XHJcbiAgICAgICAgdGhpcy5maW5kQW5kU29sdmVDb3JuZXJDb2xsaXNpb25zKCk7XHJcbiAgICAgICAgdCs9ZHQ7XHJcbiAgICAgICAgZHQ9dGhpcy5wLnN0YXJ0RHQ7XHJcbiAgICAgICAgYXR0ZW1wdD0wO1xyXG4gICAgICB9XHJcbiAgICAgICsraXQ7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5yZW1vdmVTdGF0aWNzKCk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVTdGF0aWNzKCkge1xyXG4gICAgY29uc3Qgbm9zID0gW10sIG5vdGlmeSA9IFtbXSxbXV07XHJcbiAgICBmb3IobGV0IG8gb2YgdGhpcy5vcykge1xyXG4gICAgICBpZihvLnNpbXVsYXRlQ2xiKSB7XHJcbiAgICAgICAgby5zaW11bGF0ZUNsYihvLmwvdGhpcy5wLnIsIG8uY2gpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmKChvLmw9PT10aGlzLnAubCB8fCBvLmw9PT0wKSAmJiBvLnY9PT0wKSB7XHJcbiAgICAgICAgaWYoby5yZW1vdmVDbGIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgbm90aWZ5WyhvLmwhPT10aGlzLnAubCkrMF0ucHVzaChvKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgbm9zLnB1c2gobyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMub3MgPSBub3M7XHJcbiAgICBmb3IobGV0IG8gb2Ygbm90aWZ5WzBdLnJldmVyc2UoKSkge1xyXG4gICAgICBvLnJlbW92ZUNsYihNYXRoLlBJLCBvLmNoKTtcclxuICAgIH1cclxuICAgIGZvcihsZXQgbyBvZiBub3RpZnlbMV0pIHtcclxuICAgICAgby5yZW1vdmVDbGIoMCwgby5jaCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmaW5kQW5kU29sdmVDb3JuZXJDb2xsaXNpb25zKCkge1xyXG4gICAgaWYodGhpcy5vcy5sZW5ndGgpIHtcclxuICAgICAgY29uc3Qgb3MgPSBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgLi4udGhpcy5vc1swXSxcclxuICAgICAgICAgIGw6IDAsXHJcbiAgICAgICAgICBtOiB0aGlzLnAuaW5mTSxcclxuICAgICAgICAgIGNoOiAwXHJcbiAgICAgICAgfSxcclxuICAgICAgICAuLi50aGlzLm9zLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIC4uLnRoaXMub3NbMF0sXHJcbiAgICAgICAgICBsOiAxLjA1KnRoaXMucC5sLFxyXG4gICAgICAgICAgbTogdGhpcy5wLmluZk0sXHJcbiAgICAgICAgICBjaDogMFxyXG4gICAgICAgIH1cclxuICAgICAgXTtcclxuXHJcbiAgICAgIGZvcihsZXQgaT0xOyBpPG9zLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgY29uc3QgYT1vc1tpLTFdLCBiPW9zW2ldLFxyXG4gICAgICAgICAgICAgIGFsPWEubCt0aGlzLnAuY29ybmVyRGV2aWF0aW9uKmEuY2gqdGhpcy5wLnIsXHJcbiAgICAgICAgICAgICAgYmw9Yi5sK3RoaXMucC5jb3JuZXJEZXZpYXRpb24qYi5jaCp0aGlzLnAucjtcclxuICAgICAgICBpZigxLjA1KmFsPmJsICYmIGEuY2g+Yi5jaCkge1xyXG4gICAgICAgICAgY29uc3QgZENoID0gYS5jaC1iLmNoLCBkdj1hLm0vYS5mbGJ0K2IubS9iLmZsYnQsIGthPWEubS9hLmZsYnQvZHYsIGtiPWIubS9iLmZsYnQvZHY7XHJcbiAgICAgICAgICBhLmNoPWEuY2gta2IqZENoO1xyXG4gICAgICAgICAgYi5jaD1iLmNoK2thKmRDaDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNvbHZlQ29sbGlzaW9uKGEsIGIpIHtcclxuICAgIGNvbnN0IG1tPShiLm0rYS5tKSxcclxuICAgICAgYXYgPSAoLWEudipiLm0rYS5tKmEudisyKmIubSpiLnYpL21tLFxyXG4gICAgICBidiA9IChiLm0qYi52LWIudiphLm0rMiphLm0qYS52KS9tbTtcclxuICAgIHJldHVybiBbey4uLmEsIHY6IGF2fSwgey4uLmIsIHY6IGJ2fV07XHJcbiAgfVxyXG5cclxuICBmaW5kQ29sbGlzaW9ucyhvcykge1xyXG4gICAgY29uc3QgY2kgPSB7XHJcbiAgICAgIG51bTogMCxcclxuICAgICAgbGFzdDogMCxcclxuICAgICAgYWxsOiBbXVxyXG4gICAgfTtcclxuICAgIGZvcihsZXQgaSA9IDE7IGk8b3MubGVuZ3RoICYmIGNpLm51bTwyOyArK2kpIHtcclxuICAgICAgaWYob3NbaS0xXS5sPm9zW2ldLmwgfHwgdGhpcy5pc0NvbGxpc2lvbihvc1tpLTFdLCBvc1tpXSkpIHtcclxuICAgICAgICBpZihvc1tpLTFdLmw+b3NbaV0ubCkge1xyXG4gICAgICAgICAgKytjaS5udW07XHJcbiAgICAgICAgfVxyXG4gICAgICAgICsrY2kubnVtO1xyXG4gICAgICAgIGNpLmxhc3QgPSBpO1xyXG4gICAgICAgIGlmKGNpLmFsbC5pbmRleE9mKGktMSk9PT0tMSkge1xyXG4gICAgICAgICAgY2kuYWxsLnB1c2goaS0xKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoY2kuYWxsLmluZGV4T2YoaSk9PT0tMSkge1xyXG4gICAgICAgICAgY2kuYWxsLnB1c2goaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY2k7XHJcbiAgfVxyXG5cclxuICBpc0NvbGxpc2lvbihhLCBiKSB7XHJcbiAgICByZXR1cm4gTWF0aC5hYnMoYS5sLWIubCk8dGhpcy5wLm1hcmdpbiAmJiBhLnY+Yi52O1xyXG4gIH1cclxuXHJcbiAgaW50ZWdyYXRlKG9zLCBkdCkge1xyXG4gICAgY29uc3Qgbm9zID0gW107XHJcbiAgICBmb3IobGV0IG8gb2Ygb3MpIHtcclxuICAgICAgY29uc3QgdmwgPSBNYXRoVXRpbHMucms0KFxyXG4gICAgICAgIHRoaXMuZHkuYmluZCh7XHJcbiAgICAgICAgICBnOiB0aGlzLnAuZ3Jhdml0eSxcclxuICAgICAgICAgIHI6IHRoaXMucC5yLFxyXG4gICAgICAgICAgbTogby5tLFxyXG4gICAgICAgICAgZjogby5mLFxyXG4gICAgICAgICAgY2Y6IG8uY2YsXHJcbiAgICAgICAgICBjaDogby5jaCxcclxuICAgICAgICAgIGZsYnQ6IG8uZmxidFxyXG4gICAgICAgIH0pLFxyXG4gICAgICAgIDAsXHJcbiAgICAgICAgZHQsXHJcbiAgICAgICAgW28udiwgby5sLCBvLmNoXVxyXG4gICAgICApO1xyXG4gICAgICBjb25zdCBubyA9IHtcclxuICAgICAgICAuLi5vLFxyXG4gICAgICAgIHY6IHZsWzBdLFxyXG4gICAgICAgIGw6IHZsWzFdLFxyXG4gICAgICAgIGNoOiB2bFsyXVxyXG4gICAgICB9O1xyXG4gICAgICBpZihuby5sPD0wIHx8IG5vLmw+PXRoaXMucC5sKSB7XHJcbiAgICAgICAgbm8ubD1uby5sPD0wPyAwOiB0aGlzLnAubDtcclxuICAgICAgICBuby52PTA7XHJcbiAgICAgICAgbm8uY2g9MDtcclxuICAgICAgfVxyXG4gICAgICBub3MucHVzaChubyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbm9zO1xyXG4gIH1cclxuXHJcbiAgZHkodCx5KSB7XHJcbiAgICBjb25zdCB2PXlbMF0sIGw9eVsxXSwgY2g9eVsyXSwgZj10aGlzLmYodGhpcyxsL3RoaXMucix2LGNoKSwgY2Y9dGhpcy5jZih0aGlzLGwvdGhpcy5yLHYsY2gpO1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgKC10aGlzLmcqTWF0aC5jb3MobC90aGlzLnIpKnRoaXMubStmKS90aGlzLm0sXHJcbiAgICAgIHYrMC4wMSooTWF0aC5yYW5kb20oKS0wLjUpLFxyXG4gICAgICB0aGlzLmZsYnQqKCgyLygxK01hdGguZXhwKC0wLjIqY2YpKS0xKSooMS0yLygxK01hdGguZXhwKC01KihNYXRoLmFicyhjaCktMikpKSktY2gpXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9TaGVldFBoeXNpY3MuanMiLCJcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNvdW5kc0Vudmlyb21lbnQge1xyXG5cclxuICBjb25zdHJ1Y3Rvcih0ZW1wbGF0ZT17fSkge1xyXG4gICAgdGhpcy5zb3VuZHMgPSB0ZW1wbGF0ZS5zb3VuZHMgfHwge307XHJcbiAgICB0aGlzLmF1ZGlvID0ge307XHJcbiAgICBpZih0aGlzLnNvdW5kcy5zdGFydEZsaXApIHtcclxuICAgICAgdGhpcy5hdWRpby5zdGFydEZsaXAgPSBuZXcgQXVkaW8odGhpcy5zb3VuZHMuc3RhcnRGbGlwKTtcclxuICAgIH1cclxuICAgIGlmKHRoaXMuc291bmRzLmVuZEZsaXApIHtcclxuICAgICAgdGhpcy5hdWRpby5lbmRGbGlwID0gbmV3IEF1ZGlvKHRoaXMuc291bmRzLmVuZEZsaXApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0RW5hYmxlZChlbmFibGVkKSB7XHJcbiAgICB0aGlzLmVuYWJsZWQgPSBlbmFibGVkO1xyXG4gIH1cclxuXHJcbiAgdG9nbGUoKSB7XHJcbiAgICB0aGlzLmVuYWJsZWQgPSAhdGhpcy5lbmFibGVkO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIGRlbGV0ZSB0aGlzLmF1ZGlvLnN0YXJ0RmxpcDtcclxuICAgIGRlbGV0ZSB0aGlzLmF1ZGlvLmVuZEZsaXA7XHJcbiAgfVxyXG5cclxuICBzdGFydEZsaXAoKSB7XHJcbiAgICBpZih0aGlzLmVuYWJsZWQgJiYgdGhpcy5hdWRpby5zdGFydEZsaXApIHtcclxuICAgICAgdGhpcy5hdWRpby5zdGFydEZsaXAucGxheSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZW5kRmxpcCgpIHtcclxuICAgIGlmKHRoaXMuZW5hYmxlZCAmJiB0aGlzLmF1ZGlvLnN0YXJ0RmxpcCkge1xyXG4gICAgICB0aGlzLmF1ZGlvLnN0YXJ0RmxpcC5wYXVzZSgpO1xyXG4gICAgICB0aGlzLmF1ZGlvLnN0YXJ0RmxpcC5jdXJyZW50VGltZSA9IDA7XHJcbiAgICB9XHJcbiAgICBpZih0aGlzLmVuYWJsZWQgJiYgdGhpcy5hdWRpby5lbmRGbGlwKSB7XHJcbiAgICAgIHRoaXMuYXVkaW8uZW5kRmxpcC5wbGF5KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdWJzY3JpYmVGbGlwcyhlbWl0dGVyKSB7XHJcbiAgICBlbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIoJ3N0YXJ0RmxpcCcsIHRoaXMuc3RhcnRGbGlwLmJpbmQodGhpcykpO1xyXG4gICAgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyKCdlbmRGbGlwJywgdGhpcy5lbmRGbGlwLmJpbmQodGhpcykpO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9Tb3VuZHNFbnZpcm9tZW50LmpzIiwiaW1wb3J0IFdpZGdldENvbnRyb2xsZXIgZnJvbSAnV2lkZ2V0Q29udHJvbGxlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb2NDb250cm9sbGVyIGV4dGVuZHMgV2lkZ2V0Q29udHJvbGxlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZpZXcsIGJvb2tDdHJsKSB7XHJcbiAgICBzdXBlcih2aWV3KTtcclxuICAgIHRoaXMuYm9va0N0cmwgPSBib29rQ3RybDtcclxuICAgIHRoaXMudGFiID0gJ25vbmUnO1xyXG4gIH1cclxuXHJcbiAgc2V0VGh1bWJuYWlscyh0aHVtYm5haWxzKSB7XHJcbiAgICB0aGlzLnRodW1ibmFpbHMgPSB0aHVtYm5haWxzO1xyXG4gICAgdGh1bWJuYWlscy5vbk5hdmlnYXRlID0gdGhpcy5uYXZpZ2F0ZVRodW1ibmFpbHMuYmluZCh0aGlzKTtcclxuICAgIGlmKHRoaXMudGFiID09PSAnbm9uZScpIHtcclxuICAgICAgdGhpcy50YWIgPSAndGh1bWJuYWlscyc7XHJcbiAgICB9XHJcbiAgICB0aGlzLmZpcmVDaGFuZ2UoKTtcclxuICB9XHJcblxyXG4gIHNldFNlYXJjaChzZWFyY2gpIHtcclxuICAgIHRoaXMuc2VhcmNoID0gc2VhcmNoO1xyXG4gICAgc2VhcmNoLm9uTmF2aWdhdGUgPSB0aGlzLm5hdmlnYXRlU2VhcmNoLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLmZpcmVDaGFuZ2UoKTtcclxuICB9XHJcblxyXG4gIHNldEJvb2ttYXJrcyhib29rbWFya3MsIHBkZikge1xyXG4gICAgdGhpcy5ib29rbWFya3MgPSBib29rbWFya3M7XHJcbiAgICB0aGlzLnBkZiA9IHBkZjtcclxuICAgIGJvb2ttYXJrcy5vbk5hdmlnYXRlID0gdGhpcy5uYXZpZ2F0ZUJvb2ttYXJrcy5iaW5kKHRoaXMpO1xyXG4gICAgaWYoYm9va21hcmtzLmdldFNpemUoKSkge1xyXG4gICAgICB0aGlzLnRhYiA9ICdib29rbWFya3MnO1xyXG4gICAgICB0aGlzLmlzQm9va21hcmtzID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIHRoaXMuZmlyZUNoYW5nZSgpO1xyXG4gIH1cclxuXHJcbiAgY21kQm9va21hcmtzKCkge1xyXG4gICAgdGhpcy50YWIgPSAnYm9va21hcmtzJztcclxuICAgIHRoaXMuZmlyZUNoYW5nZSgpO1xyXG4gIH1cclxuXHJcbiAgY21kVGh1bWJuYWlscygpIHtcclxuICAgIHRoaXMudGFiID0gJ3RodW1ibmFpbHMnO1xyXG4gICAgdGhpcy5maXJlQ2hhbmdlKCk7XHJcbiAgfVxyXG5cclxuICBjbWRTZWFyY2goKSB7XHJcbiAgICB0aGlzLnRhYiA9ICdzZWFyY2gnO1xyXG4gICAgdGhpcy5maXJlQ2hhbmdlKCk7XHJcbiAgfVxyXG5cclxuICBjbWRDbG9zZVRvYygpIHtcclxuICAgIHRoaXMuaGlkZSgpO1xyXG4gIH1cclxuXHJcbiAgbmF2aWdhdGVUaHVtYm5haWxzKG51bWJlcikge1xyXG4gICAgdGhpcy5ib29rQ3RybC5nb1RvUGFnZShudW1iZXIpO1xyXG4gIH1cclxuXHJcbiAgbmF2aWdhdGVTZWFyY2gobnVtYmVyKSB7XHJcbiAgICB0aGlzLmJvb2tDdHJsLmdvVG9QYWdlKG51bWJlcik7XHJcbiAgfVxyXG5cclxuICBuYXZpZ2F0ZUJvb2ttYXJrcyhpdGVtKSB7XHJcbiAgICBpZihpdGVtLnVybCkge1xyXG4gICAgICB3aW5kb3cub3BlbihpdGVtLnVybCwgJ19ibGFuaycpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZihpdGVtLmRlc3QpIHtcclxuICAgICAgbGV0IGRlc3RQcm9taXNlO1xyXG4gICAgICBpZih0eXBlb2YgaXRlbS5kZXN0PT09J3N0cmluZycpIHtcclxuICAgICAgICBkZXN0UHJvbWlzZSA9IHRoaXMucGRmLmhhbmRsZXIuZ2V0RGVzdGluYXRpb24oaXRlbS5kZXN0KTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBkZXN0UHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShpdGVtLmRlc3QpO1xyXG4gICAgICB9XHJcbiAgICAgIGRlc3RQcm9taXNlLlxyXG4gICAgICAgIHRoZW4oKGRlc3QpPT4gdGhpcy5wZGYuaGFuZGxlci5nZXRQYWdlSW5kZXgoZGVzdFswXSkpLlxyXG4gICAgICAgIHRoZW4oKG51bWJlcik9PiB0aGlzLmJvb2tDdHJsLmdvVG9QYWdlKG51bWJlcikpLlxyXG4gICAgICAgIGNhdGNoKCgpPT4gY29uc29sZS5lcnJvcignQmFkIGJvb2ttYXJrJykpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlVmlldygpIHtcclxuICAgIGlmKHRoaXMudmlldykge1xyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ3dpZFRvY01lbnUnLCB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCd3aWRUaHVtYm5haWxzJywge1xyXG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICB2aXNpYmxlOiB0aGlzLnRhYj09PSd0aHVtYm5haWxzJyxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ3dpZFNlYXJjaCcsIHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy50YWI9PT0nc2VhcmNoJyxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ3dpZEJvb2ttYXJrcycsIHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy50YWI9PT0nYm9va21hcmtzJyxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ2NtZEJvb2ttYXJrcycsIHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICBhY3RpdmU6IHRoaXMudGFiPT09J2Jvb2ttYXJrcydcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMudmlldy5zZXRTdGF0ZSgnY21kVGh1bWJuYWlscycsIHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICBhY3RpdmU6IHRoaXMudGFiPT09J3RodW1ibmFpbHMnXHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ2NtZFNlYXJjaCcsIHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICBhY3RpdmU6IHRoaXMudGFiPT09J3NlYXJjaCdcclxuICAgICAgfSk7XHJcbiAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCk9PiB0aGlzLnRodW1ibmFpbHMuc2V0RW5hYmxlKHRoaXMudmlzaWJsZSAmJiB0aGlzLnRhYj09PSd0aHVtYm5haWxzJykpO1xyXG4gICAgICBzdXBlci51cGRhdGVWaWV3KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL1RvY0NvbnRyb2xsZXIuanMiLCJpbXBvcnQge1RIUkVFfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IFRocmVlVXRpbHMgZnJvbSAnVGhyZWVVdGlscyc7XHJcblxyXG5jb25zdCByZXNYID0gMTEsXHJcbiAgICAgIHJlc1kgPSAyLFxyXG4gICAgICByZXNaID0gMTUsXHJcbiAgICAgIHNjYWxlID0gMSxcclxuICAgICAgZmFjZXMgPSBbXTtcclxuXHJcbmNvbnN0IGZyb250R2VvbWV0cnkgPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeShzY2FsZSwgc2NhbGUsIHJlc1gtMSwgcmVzWS0xKTtcclxuZnJvbnRHZW9tZXRyeS50cmFuc2xhdGUoMC41KnNjYWxlLDAuNSpzY2FsZSxzY2FsZSk7XHJcbmNvbnN0IGJhY2tHZW9tZXRyeSA9IG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KHNjYWxlLCBzY2FsZSwgcmVzWC0xLCByZXNZLTEpO1xyXG5iYWNrR2VvbWV0cnkucm90YXRlWShNYXRoLlBJKTtcclxuYmFja0dlb21ldHJ5LnRyYW5zbGF0ZSgwLjUqc2NhbGUsMC41KnNjYWxlLDApO1xyXG5jb25zdCBsZWZ0R2VvbWV0cnkgPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeShzY2FsZSwgc2NhbGUsIHJlc1otMSwgcmVzWS0xKTtcclxubGVmdEdlb21ldHJ5LnJvdGF0ZVkoLU1hdGguUEkvMik7XHJcbmxlZnRHZW9tZXRyeS50cmFuc2xhdGUoMCwwLjUqc2NhbGUsMC41KnNjYWxlKTtcclxuY29uc3QgcmlnaHRHZW9tZXRyeSA9IG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KHNjYWxlLCBzY2FsZSwgcmVzWi0xLCByZXNZLTEpO1xyXG5yaWdodEdlb21ldHJ5LnJvdGF0ZVkoTWF0aC5QSS8yKTtcclxucmlnaHRHZW9tZXRyeS50cmFuc2xhdGUoc2NhbGUsMC41KnNjYWxlLDAuNSpzY2FsZSk7XHJcbmNvbnN0IHRvcEdlb21ldHJ5ID0gbmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkoc2NhbGUsIHNjYWxlLCByZXNYLTEsIHJlc1otMSk7XHJcbnRvcEdlb21ldHJ5LnJvdGF0ZVgoLU1hdGguUEkvMik7XHJcbnRvcEdlb21ldHJ5LnRyYW5zbGF0ZSgwLjUqc2NhbGUsc2NhbGUsMC41KnNjYWxlKTtcclxuY29uc3QgYm90dG9tR2VvbWV0cnkgPSB0b3BHZW9tZXRyeS5jbG9uZSgpO1xyXG5ib3R0b21HZW9tZXRyeS50cmFuc2xhdGUoMCwtc2NhbGUsMCk7XHJcbmZvcihsZXQgZiBvZiBib3R0b21HZW9tZXRyeS5mYWNlcykge1xyXG4gIFtmLmEsIGYuYl0gPSBbZi5iLCBmLmFdO1xyXG59XHJcblxyXG5jb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5HZW9tZXRyeSgpO1xyXG5nZW9tZXRyeS52ZXJ0aWNlcyA9IFsuLi5ib3R0b21HZW9tZXRyeS52ZXJ0aWNlcywgLi4udG9wR2VvbWV0cnkudmVydGljZXNdO1xyXG5cclxuY29uc3QgYWRkRmFjZXMgPSAoZnMsIG1hcCk9PiB7XHJcbiAgZm9yKGxldCBmIG9mIGZzKSB7XHJcbiAgICBnZW9tZXRyeS5mYWNlcy5wdXNoKG5ldyBUSFJFRS5GYWNlMyhtYXAoZi5hKSwgbWFwKGYuYiksIG1hcChmLmMpKSk7XHJcbiAgfVxyXG4gIGZhY2VzLnB1c2goZ2VvbWV0cnkuZmFjZXMubGVuZ3RoKTtcclxufTtcclxuXHJcbmNvbnN0IG1hcFZlcnRpY2VzID0gKHNyYywgZHN0KT0+IHtcclxuICBjb25zdCBtYXAgPSBbXTtcclxuICBjb25zdCBlcSA9IChhLCBiKT0+IE1hdGguYWJzKGEueC1iLngpK01hdGguYWJzKGEueS1iLnkpK01hdGguYWJzKGEuei1iLnopPDFlLTQ7XHJcbiAgZm9yKGxldCBpPTA7IGk8c3JjLmxlbmd0aDsgKytpKSB7XHJcbiAgICBmb3IobGV0IGo9MDsgajxkc3QubGVuZ3RoOyArK2opIHtcclxuICAgICAgaWYoZXEoc3JjW2ldLCBkc3Rbal0pKSB7XHJcbiAgICAgICAgbWFwW2ldPWo7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG1hcDtcclxufTtcclxuXHJcbmNvbnN0IGZyb250TWFwID0gbWFwVmVydGljZXMoZnJvbnRHZW9tZXRyeS52ZXJ0aWNlcywgZ2VvbWV0cnkudmVydGljZXMpO1xyXG5jb25zdCBiYWNrTWFwID0gbWFwVmVydGljZXMoYmFja0dlb21ldHJ5LnZlcnRpY2VzLCBnZW9tZXRyeS52ZXJ0aWNlcyk7XHJcbmNvbnN0IGxlZnRNYXAgPSBtYXBWZXJ0aWNlcyhsZWZ0R2VvbWV0cnkudmVydGljZXMsIGdlb21ldHJ5LnZlcnRpY2VzKTtcclxuY29uc3QgcmlnaHRNYXAgPSBtYXBWZXJ0aWNlcyhyaWdodEdlb21ldHJ5LnZlcnRpY2VzLCBnZW9tZXRyeS52ZXJ0aWNlcyk7XHJcblxyXG5hZGRGYWNlcyh0b3BHZW9tZXRyeS5mYWNlcywgKGkpPT4gaStib3R0b21HZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGgpO1xyXG5hZGRGYWNlcyhib3R0b21HZW9tZXRyeS5mYWNlcywgKGkpPT4gaSk7XHJcbmFkZEZhY2VzKGZyb250R2VvbWV0cnkuZmFjZXMsIChpKT0+IGZyb250TWFwW2ldKTtcclxuYWRkRmFjZXMoYmFja0dlb21ldHJ5LmZhY2VzLCAoaSk9PiBiYWNrTWFwW2ldKTtcclxuYWRkRmFjZXMobGVmdEdlb21ldHJ5LmZhY2VzLCAoaSk9PiBsZWZ0TWFwW2ldKTtcclxuYWRkRmFjZXMocmlnaHRHZW9tZXRyeS5mYWNlcywgKGkpPT4gcmlnaHRNYXBbaV0pO1xyXG5mYWNlcy5wb3AoKTtcclxuXHJcblRocmVlVXRpbHMuY29tcHV0ZUZhY2VWZXJ0ZXhVdnMoZ2VvbWV0cnksIGZhY2VzKTtcclxuXHJcbmdlb21ldHJ5LmNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCk7XHJcbi8vZ2VvbWV0cnkuY29tcHV0ZUZhY2VOb3JtYWxzKCk7XHJcbmdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xyXG4vL2dlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ0JveCgpO1xyXG5nZW9tZXRyeS52ZXJ0aWNlc05lZWRVcGRhdGUgPSB0cnVlO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG5cdHJlc1gsXHJcblx0cmVzWSxcclxuXHRyZXNaLFxyXG5cdGZhY2VzLFxyXG5cdGdlb21ldHJ5XHJcbn07XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL21vZGVscy9zaGVldEJsb2NrLmpzIiwiY29uc3QgbW91c2VCdXR0b25zID0ge1xyXG4gIExlZnQ6IDAsXHJcbiAgTWlkZGxlOiAxLFxyXG4gIFJpZ2h0OiAyXHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcHJvcHMoKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIGVwczogMWUtNCxcclxuICAgIHNjYWxlOiB7XHJcbiAgICAgIGRlZmF1bHQ6IDAuOSxcclxuICAgICAgbWluOiAwLjksXHJcbiAgICAgIG1heDogMi41LFxyXG4gICAgICBsZXZlbHM6IDdcclxuICAgIH0sXHJcbiAgICBsaWdodGluZzoge1xyXG4gICAgICBkZWZhdWx0OiAwLjcsXHJcbiAgICAgIG1pbjogMCxcclxuICAgICAgbWF4OiAxLFxyXG4gICAgICBsZXZlbHM6IDdcclxuICAgIH0sXHJcbiAgICBwYW46IHtcclxuICAgICAgc3BlZWQ6IDUwXHJcbiAgICB9LFxyXG4gICAgYWN0aW9uczoge1xyXG4gICAgICBjbWRab29tSW46IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICB9LFxyXG4gICAgICBjbWRab29tT3V0OiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBjbWREZWZhdWx0Wm9vbToge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgdHlwZTogJ2RibGNsaWNrJyxcclxuICAgICAgICBjb2RlOiAwXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZFRvYzoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWVcclxuICAgICAgfSxcclxuICAgICAgY21kRmFzdEJhY2t3YXJkOiB7XHJcbiAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgY21kQmFja3dhcmQ6IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZEZvcndhcmQ6IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZEZhc3RGb3J3YXJkOiB7XHJcbiAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgY21kU2F2ZToge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWVcclxuICAgICAgfSxcclxuICAgICAgY21kUHJpbnQ6IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZEZ1bGxTY3JlZW46IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIHdpZFNldHRpbmdzOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBjbWRTbWFydFBhbjoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgYWN0aXZlOiB0cnVlLFxyXG4gICAgICB9LFxyXG4gICAgICBjbWRTaW5nbGVQYWdlOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlLFxyXG4gICAgICAgIGFjdGl2ZUZvck1vYmlsZTogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgY21kU291bmRzOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICBhY3RpdmU6IHRydWVcclxuICAgICAgfSxcclxuICAgICAgY21kU3RhdHM6IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgY21kTGlnaHRpbmdVcDoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWVcclxuICAgICAgfSxcclxuICAgICAgY21kTGlnaHRpbmdEb3duOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBjbWRQYW5MZWZ0OiB7XHJcbiAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgY21kUGFuUmlnaHQ6IHtcclxuICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICB9LFxyXG4gICAgICBjbWRQYW5VcDoge1xyXG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZFBhbkRvd246IHtcclxuICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICB9LFxyXG4gICAgICBtb3VzZUNtZFJvdGF0ZToge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgdHlwZTogJ21vdXNlZHJhZycsXHJcbiAgICAgICAgY29kZTogbW91c2VCdXR0b25zLlJpZ2h0XHJcbiAgICAgIH0sXHJcbiAgICAgIG1vdXNlQ21kRHJhZ1pvb206IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIHR5cGU6ICdtb3VzZWRyYWcnLFxyXG4gICAgICAgIGNvZGU6IG1vdXNlQnV0dG9ucy5NaWRkbGVcclxuICAgICAgfSxcclxuICAgICAgbW91c2VDbWRQYW46IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIHR5cGU6ICdtb3VzZWRyYWcnLFxyXG4gICAgICAgIGNvZGU6IG1vdXNlQnV0dG9ucy5MZWZ0XHJcbiAgICAgIH0sXHJcbiAgICAgIG1vdXNlQ21kV2hlZWxab29tOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICB0eXBlOiAnbW91c2V3aGVlbCcsXHJcbiAgICAgICAgY29kZTogMFxyXG4gICAgICB9LFxyXG4gICAgICB0b3VjaENtZFJvdGF0ZToge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgdHlwZTogJ3RvdWNoZHJhZycsXHJcbiAgICAgICAgY29kZTogM1xyXG4gICAgICB9LFxyXG4gICAgICB0b3VjaENtZFpvb206IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIHR5cGU6ICd0b3VjaGRyYWcnLFxyXG4gICAgICAgIGNvZGU6IDJcclxuICAgICAgfSxcclxuICAgICAgdG91Y2hDbWRQYW46IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIHR5cGU6ICd0b3VjaGRyYWcnLFxyXG4gICAgICAgIGNvZGU6IDFcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcbn07XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL3Byb3BzL2Jvb2tDb250cm9sbGVyLmpzIiwiaW1wb3J0IHskfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IEltYWdlQmFzZSBmcm9tICcuL0ltYWdlQmFzZSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCbGFua0ltYWdlIGV4dGVuZHMgSW1hZ2VCYXNlIHtcclxuXHJcbiAgY29uc3RydWN0b3IoY29udGV4dCwgd2lkdGgsIGhlaWdodCwgY29sb3IpIHtcclxuICAgIHN1cGVyKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsIGNvbG9yKTtcclxuXHJcbiAgICBQcm9taXNlLnJlc29sdmUoKS5cclxuICAgICAgdGhlbigoKT0+IHtcclxuICAgICAgICB0aGlzLnN0YXJ0UmVuZGVyID0gKCk9PiB7XHJcbiAgICAgICAgICB0aGlzLnJlbmRlckJsYW5rUGFnZSgpO1xyXG4gICAgICAgICAgdGhpcy5maW5pc2hSZW5kZXIoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZmluaXNoTG9hZCgpO1xyXG4gICAgICB9KTtcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvQmxhbmtJbWFnZS5qcyIsImltcG9ydCB7JH0gZnJvbSAnLi4vbGlicyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb29rbWFya3Mge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihjb250YWluZXIsIGl0ZW1zLCBnZXRUaXRsZT0oaSk9PiBpLnRpdGxlLCBnZXRJdGVtcz0oaSk9PmkuaXRlbXMpIHtcclxuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG4gICAgdGhpcy5tYXAgPSBbXTtcclxuICAgIHRoaXMuZ2V0VGl0bGUgPSBnZXRUaXRsZTtcclxuICAgIHRoaXMuZ2V0SXRlbXMgPSBnZXRJdGVtcztcclxuICAgIHRoaXMubm9kZXMgPSB0aGlzLm1hcE5vZGVzKGl0ZW1zLCB0aGlzLm1hcCk7XHJcblxyXG4gICAgdGhpcy5iaW5kcyA9IHtcclxuICAgICAgdG9nbGU6IChlKT0+IHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgbGV0IGxpID0gJChlLnRhcmdldCk7XHJcbiAgICAgICAgd2hpbGUobGlbMF0gJiYgbGlbMF0hPT1jb250YWluZXJbMF0gJiYgIWxpLmhhc0NsYXNzKCdpdGVtJykpIHtcclxuICAgICAgICAgIGxpID0gJChsaVswXS5wYXJlbnROb2RlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYobGkuaGFzQ2xhc3MoJ2l0ZW0nKSkge1xyXG4gICAgICAgICAgbGV0IGNtZCA9ICQoZS50YXJnZXQpO1xyXG4gICAgICAgICAgd2hpbGUoY21kWzBdICYmIGNtZFswXSE9PWxpWzBdICYmICFjbWQuaGFzQ2xhc3MoJ2NtZCcpKSB7XHJcbiAgICAgICAgICAgIGNtZCA9ICQoY21kWzBdLnBhcmVudE5vZGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYoY21kLmhhc0NsYXNzKCdjbWQnKSkge1xyXG4gICAgICAgICAgICBjb25zdCBub2RlID0gdGhpcy5tYXBbbGkuYXR0cignZGF0YS1pZCcpXTtcclxuICAgICAgICAgICAgaWYoY21kLmhhc0NsYXNzKCd0b2dsZScpKSB7XHJcbiAgICAgICAgICAgICAgbm9kZS5taW5pbWl6ZWQgPSAhbm9kZS5taW5pbWl6ZWQ7XHJcbiAgICAgICAgICAgICAgaWYobm9kZS5taW5pbWl6ZWQpIHtcclxuICAgICAgICAgICAgICAgIGxpLmZpbmQoJ3VsJykucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICBsaS5maW5kKCcudG9nbGUnKS5hZGRDbGFzcygnbWluaW1pemVkJyk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGkuZmluZCgnLnRvZ2xlJykucmVtb3ZlQ2xhc3MoJ21pbmltaXplZCcpO1xyXG4gICAgICAgICAgICAgICAgbGkuYXBwZW5kKCh0aGlzLnJlbmRlck5vZGUobm9kZSkubWF0Y2goLzx1bC4qPFxcL3VsPi8pIHx8IFsnJ10pWzBdKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgaWYodGhpcy5vbk5hdmlnYXRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uTmF2aWdhdGUobm9kZS5pdGVtKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb250YWluZXIub24oJ2NsaWNrJywgdGhpcy5iaW5kcy50b2dsZSk7XHJcbiAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gIH1cclxuXHJcbiAgZ2V0U2l6ZSgpIHtcclxuICAgIHJldHVybiB0aGlzLm1hcC5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgdGhpcy5jb250YWluZXIub2ZmKCdjbGljaycsIHRoaXMuYmluZHMudG9nbGUpO1xyXG4gICAgdGhpcy5jb250YWluZXIuaHRtbCgnJyk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGUoKSB7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5odG1sKHRoaXMucmVuZGVyTm9kZXModGhpcy5ub2RlcykpO1xyXG4gIH1cclxuXHJcbiAgZm9yRWFjaChmLCBub2Rlcz10aGlzLm5vZGVzKSB7XHJcbiAgICBmb3IobGV0IG5vZGUgb2YgKG5vZGVzIHx8IFtdKSkge1xyXG4gICAgICBmKG5vZGUpO1xyXG4gICAgICB0aGlzLmZvckVhY2goZiwgbm9kZS5jaGlsZHJlbik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBleHBhbmQoKSB7XHJcbiAgICB0aGlzLmZvckVhY2goKG4pPT4gbi5taW5pbWl6ZWQgPSBmYWxzZSk7XHJcbiAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gIH1cclxuXHJcbiAgbWluaW1pemUoKSB7XHJcbiAgICB0aGlzLmZvckVhY2goKG4pPT4gbi5taW5pbWl6ZWQgPSB0cnVlKTtcclxuICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgfVxyXG5cclxuICByZW5kZXJOb2RlKG5vZGUpIHtcclxuICAgIHJldHVybiBbJzxkaXYgY2xhc3M9XCJhcmVhXCI+JyxcclxuICAgICAgbm9kZS5jaGlsZHJlbj8gJzxhIGhyZWY9XCIjXCIgY2xhc3M9XCJjbWQgdG9nbGUnICsgKG5vZGUubWluaW1pemVkPyAnIG1pbmltaXplZCc6ICcnKSArICdcIj48aSBjbGFzcz1cImZhIGZhLWFuZ2xlLXJpZ2h0XCI+PC9pPjwvYT4gJzogJzxpIGNsYXNzPVwid2hpdGUtc3BhY2VcIj48L2k+ICcsXHJcbiAgICAgICc8YSBjbGFzcz1cImNtZFwiIHRpdGxlPVwiJywgbm9kZS50aXRsZSwnXCIgaHJlZj1cIiNcIj4nLCBub2RlLnRpdGxlLCAnPC9hPjwvZGl2PicsXHJcbiAgICAgIG5vZGUubWluaW1pemVkPyAnJzogdGhpcy5yZW5kZXJOb2Rlcyhub2RlLmNoaWxkcmVuKVxyXG4gICAgXS5qb2luKCcnKTtcclxuICB9XHJcblxyXG4gIHJlbmRlck5vZGVzKG5vZGVzKSB7XHJcbiAgICBsZXQgcmVzID0gWyc8ZGl2IGNsYXNzPVwiYm9va21hcmtzXCI+J107XHJcbiAgICBpZihub2RlcyAmJiBub2Rlcy5sZW5ndGgpIHtcclxuICAgICAgcmVzLnB1c2goJzx1bCBjbGFzcz1cImxldmVsLScsIG5vZGVzWzBdLmxldmVsLCAnXCI+Jyk7XHJcbiAgICAgIGZvcihsZXQgbm9kZSBvZiBub2Rlcykge1xyXG4gICAgICAgIHJlcy5wdXNoKFtcclxuICAgICAgICAgICc8bGkgY2xhc3M9XCJpdGVtXCIgZGF0YS1pZD1cIicsIG5vZGUuaWQsJ1wiPicsXHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyTm9kZShub2RlKSxcclxuICAgICAgICAgICc8L2xpPiddLmpvaW4oJycpKTtcclxuICAgICAgfVxyXG4gICAgICByZXMucHVzaCgnPC91bD4nKTtcclxuICAgIH1cclxuICAgIHJlcy5wdXNoKCc8L2Rpdj4nKTtcclxuICAgIHJldHVybiByZXMuam9pbignJyk7XHJcbiAgfVxyXG5cclxuICBtYXBOb2RlcyhpdGVtcywgbWFwPVtdLCBsZXZlbD0wKSB7XHJcbiAgICBsZXQgbm9kZXMgPSBudWxsO1xyXG4gICAgaWYoaXRlbXMgJiYgaXRlbXMubGVuZ3RoKSB7XHJcbiAgICAgIG5vZGVzPVtdO1xyXG4gICAgICBmb3IobGV0IGl0ZW0gb2YgaXRlbXMpIHtcclxuICAgICAgICBjb25zdCBpZCA9IG1hcC5sZW5ndGg7XHJcbiAgICAgICAgbWFwLnB1c2godW5kZWZpbmVkKTtcclxuICAgICAgICBjb25zdCBub2RlID0ge1xyXG4gICAgICAgICAgaWQsXHJcbiAgICAgICAgICB0aXRsZTogdGhpcy5nZXRUaXRsZShpdGVtKSxcclxuICAgICAgICAgIGxldmVsLFxyXG4gICAgICAgICAgaXRlbSxcclxuICAgICAgICAgIG1pbmltaXplZDogdHJ1ZSxcclxuICAgICAgICAgIGNoaWxkcmVuOiB0aGlzLm1hcE5vZGVzKHRoaXMuZ2V0SXRlbXMoaXRlbSksIG1hcCwgbGV2ZWwrMSlcclxuICAgICAgICB9O1xyXG4gICAgICAgIG5vZGVzLnB1c2gobm9kZSk7XHJcbiAgICAgICAgbWFwW2lkXSA9IG5vZGU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBub2RlcztcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0Jvb2ttYXJrcy5qcyIsImltcG9ydCB7JH0gZnJvbSAnLi4vbGlicyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEZXRlY3RvciB7XHJcblxyXG5cdHN0YXRpYyBjYW52YXMgPSAhISB3aW5kb3cuQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xyXG5cclxuXHRzdGF0aWMgd2ViZ2wgPSAoZnVuY3Rpb24oKSB7XHJcblx0XHR0cnkge1xyXG5cdFx0XHRjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuXHRcdFx0cmV0dXJuICEhICh3aW5kb3cuV2ViR0xSZW5kZXJpbmdDb250ZXh0ICYmIChjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wnKSB8fCBjYW52YXMuZ2V0Q29udGV4dCgnZXhwZXJpbWVudGFsLXdlYmdsJykpKTtcclxuXHRcdH1cclxuXHRcdGNhdGNoIChlKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHR9KSgpO1xyXG5cclxuXHRzdGF0aWMgd29ya2VycyA9ICEhIHdpbmRvdy5Xb3JrZXI7XHJcblxyXG5cdHN0YXRpYyBmaWxlYXBpID0gd2luZG93LkZpbGUgJiYgd2luZG93LkZpbGVSZWFkZXIgJiYgd2luZG93LkZpbGVMaXN0ICYmIHdpbmRvdy5CbG9iO1xyXG5cclxuXHRzdGF0aWMgZ2V0V2ViR0xFcnJvck1lc3NhZ2UoKSB7XHJcblx0XHRjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblx0XHRlbGVtZW50LmlkID0gJ3dlYmdsLWVycm9yLW1lc3NhZ2UnO1xyXG5cdFx0ZWxlbWVudC5zdHlsZS5mb250RmFtaWx5ID0gJ21vbm9zcGFjZSc7XHJcblx0XHRlbGVtZW50LnN0eWxlLmZvbnRTaXplID0gJzEzcHgnO1xyXG5cdFx0ZWxlbWVudC5zdHlsZS5mb250V2VpZ2h0ID0gJ25vcm1hbCc7XHJcblx0XHRlbGVtZW50LnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xyXG5cdFx0ZWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kID0gJyNmZmYnO1xyXG5cdFx0ZWxlbWVudC5zdHlsZS5jb2xvciA9ICcjMDAwJztcclxuXHRcdGVsZW1lbnQuc3R5bGUucGFkZGluZyA9ICcxLjVlbSc7XHJcblx0XHRlbGVtZW50LnN0eWxlLndpZHRoID0gJzQwMHB4JztcclxuXHRcdGVsZW1lbnQuc3R5bGUubWFyZ2luID0gJzVlbSBhdXRvIDAnO1xyXG5cclxuXHRcdGlmICghRGV0ZWN0b3Iud2ViZ2wpIHtcclxuXHRcdFx0ZWxlbWVudC5pbm5lckhUTUwgPSB3aW5kb3cuV2ViR0xSZW5kZXJpbmdDb250ZXh0ID8gW1xyXG5cdFx0XHRcdCdZb3VyIGdyYXBoaWNzIGNhcmQgZG9lcyBub3Qgc2VlbSB0byBzdXBwb3J0IDxhIGhyZWY9XCJodHRwOi8va2hyb25vcy5vcmcvd2ViZ2wvd2lraS9HZXR0aW5nX2FfV2ViR0xfSW1wbGVtZW50YXRpb25cIiBzdHlsZT1cImNvbG9yOiMwMDBcIj5XZWJHTDwvYT4uPGJyIC8+JyxcclxuXHRcdFx0XHQnRmluZCBvdXQgaG93IHRvIGdldCBpdCA8YSBocmVmPVwiaHR0cDovL2dldC53ZWJnbC5vcmcvXCIgc3R5bGU9XCJjb2xvcjojMDAwXCI+aGVyZTwvYT4uJ1xyXG5cdFx0XHRdLmpvaW4oJ1xcbicpIDogW1xyXG5cdFx0XHRcdCdZb3VyIGJyb3dzZXIgZG9lcyBub3Qgc2VlbSB0byBzdXBwb3J0IDxhIGhyZWY9XCJodHRwOi8va2hyb25vcy5vcmcvd2ViZ2wvd2lraS9HZXR0aW5nX2FfV2ViR0xfSW1wbGVtZW50YXRpb25cIiBzdHlsZT1cImNvbG9yOiMwMDBcIj5XZWJHTDwvYT4uPGJyLz4nLFxyXG5cdFx0XHRcdCdGaW5kIG91dCBob3cgdG8gZ2V0IGl0IDxhIGhyZWY9XCJodHRwOi8vZ2V0LndlYmdsLm9yZy9cIiBzdHlsZT1cImNvbG9yOiMwMDBcIj5oZXJlPC9hPi4nXHJcblx0XHRcdF0uam9pbignXFxuJyk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gZWxlbWVudDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBhZGRHZXRXZWJHTE1lc3NhZ2UocGFyYW1ldGVycykge1xyXG5cdFx0bGV0IHBhcmVudCwgaWQsIGVsZW1lbnQ7XHJcblx0XHRwYXJhbWV0ZXJzID0gcGFyYW1ldGVycyB8fCB7fTtcclxuXHJcblx0XHRwYXJlbnQgPSBwYXJhbWV0ZXJzLnBhcmVudCB8fCAkKGRvY3VtZW50LmJvZHkpO1xyXG5cdFx0aWQgPSBwYXJhbWV0ZXJzLmlkIHx8ICdvbGRpZSc7XHJcblxyXG5cdFx0ZWxlbWVudCA9IERldGVjdG9yLmdldFdlYkdMRXJyb3JNZXNzYWdlKCk7XHJcblx0XHQvL2VsZW1lbnQuaWQgPSBpZDtcclxuXHJcblx0XHRwYXJlbnQuYXBwZW5kKGVsZW1lbnQpO1xyXG5cdH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvRGV0ZWN0b3IuanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEb2NNb3VzZVNpbXVsYXRvciB7XHJcblxyXG4gIHN0YXRpYyBIT1ZFUiA9ICdTSU1VTEFURUQtSE9WRVInO1xyXG4gIHN0YXRpYyBBQ1RJVkUgPSAnU0lNVUxBVEVELUFDVElWRSc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGpGcmFtZSwgZWxlbWVudCwgYkVsZW1lbnQ9ZG9jdW1lbnQuYm9keSkge1xyXG4gICAgdGhpcy5qRnJhbWUgPSBqRnJhbWU7XHJcbiAgICB0aGlzLnduZCA9IGpGcmFtZVswXS5jb250ZW50V2luZG93O1xyXG4gICAgdGhpcy5kb2MgPSBqRnJhbWVbMF0uY29udGVudERvY3VtZW50O1xyXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudCB8fCBkb2MuYm9keTtcclxuICAgIHRoaXMuYkVsZW1lbnQgPSBiRWxlbWVudDtcclxuICAgIHRoaXMucmVzZW5kUHJvcGVydGllcyA9IHRoaXMuZ2V0RGVmYXVsdFJlc2VuZFByb3BlcnRpZXMoKTtcclxuICAgIHRoaXMudW5kZWZpbmVkUHJvcGVydGllcyA9IHRoaXMuZ2V0RGVmYXVsdFVuZGVmaW5lZFByb3BlcnRpZXMoKTtcclxuICAgIHRoaXMuY3Vyc29ycyA9IFtdO1xyXG4gICAgdGhpcy5vbkRvY0NoYW5nZUNsYnMgPSBbXTtcclxuICAgIGNvbnN0IHRlcm1zID0gW1xyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgIGZpbmQ6ICc6aG92ZXInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZTogJy4nK0RvY01vdXNlU2ltdWxhdG9yLkhPVkVSXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBmaW5kOiAnOmFjdGl2ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlOiAnLicrRG9jTW91c2VTaW11bGF0b3IuQUNUSVZFXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICBdO1xyXG4gICAgbGV0IHN0eWxlID0gWyc8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+J107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZG9jLnN0eWxlU2hlZXRzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIGxldCBzcyA9IHRoaXMuZG9jLnN0eWxlU2hlZXRzW2ldO1xyXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHNzLmNzc1J1bGVzLmxlbmd0aDsgKytqKSB7XHJcbiAgICAgICAgbGV0IHIgPSBzcy5jc3NSdWxlc1tqXSwgY3NzVGV4dDtcclxuICAgICAgICBmb3IobGV0IHRlcm0gb2YgdGVybXMpIHtcclxuICAgICAgICAgIGlmICh+ci5zZWxlY3RvclRleHQuaW5kZXhPZih0ZXJtLmZpbmQpKSB7XHJcbiAgICAgICAgICAgIGNzc1RleHQgPSAoY3NzVGV4dCB8fCByLmNzc1RleHQpLnJlcGxhY2UobmV3IFJlZ0V4cCh0ZXJtLmZpbmQsICdnJyksIHRlcm0ucmVwbGFjZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGNzc1RleHQpIHtcclxuICAgICAgICAgIHN0eWxlLnB1c2goY3NzVGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBzdHlsZS5wdXNoKCc8L3N0eWxlPicpO1xyXG4gICAgJCh0aGlzLmRvYy5oZWFkKS5hcHBlbmQoJChzdHlsZS5qb2luKCcnKSkpO1xyXG4gIH1cclxuXHJcbiAgY29udmVydENvb3Jkcyh4LCB5KSB7XHJcbiAgICBjb25zdCBqRWxlbWVudCA9ICQodGhpcy5lbGVtZW50KTtcclxuICAgIGNvbnN0IG9mZnNldCA9IGpFbGVtZW50Lm9mZnNldCgpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgeDogb2Zmc2V0LmxlZnQrakVsZW1lbnQud2lkdGgoKSp4LFxyXG4gICAgICB5OiBvZmZzZXQudG9wK2pFbGVtZW50LmhlaWdodCgpKigxLXkpXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgdHJpZ2dlckV2ZW50KGVsZW1lbnQsIGUsIHAsIHR5cGUsIGFkdmFuY2VkUHJvcHMpIHtcclxuICAgIGNvbnN0IHByb3BzID0ge307XHJcbiAgICBmb3IobGV0IG4gb2YgdGhpcy5yZXNlbmRQcm9wZXJ0aWVzKSB7XHJcbiAgICAgIHByb3BzW25dID0gZVtuXTtcclxuICAgIH1cclxuICAgIGZvcihsZXQgbiBvZiB0aGlzLnVuZGVmaW5lZFByb3BlcnRpZXMpIHtcclxuICAgICAgcHJvcHNbbl0gPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICBmb3IobGV0IG4gaW4gYWR2YW5jZWRQcm9wcykge1xyXG4gICAgICBpZihhZHZhbmNlZFByb3BzLmhhc093blByb3BlcnR5KG4pKSB7XHJcbiAgICAgICAgcHJvcHNbbl0gPSBhZHZhbmNlZFByb3BzW25dO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBwcm9wcy52aWV3ID0gdGhpcy53bmQ7XHJcbiAgICBwcm9wcy5wYWdlWCA9IHAueDtcclxuICAgIHByb3BzLnBhZ2VZID0gcC55O1xyXG4gICAgY29uc3QgakUgPSAkLkV2ZW50KHR5cGUsIHByb3BzKTtcclxuICAgIGpFLnRpbWVTdGFtcCA9IGUudGltZVN0YW1wO1xyXG4gICAgJChlbGVtZW50KS50cmlnZ2VyKGpFKTtcclxuICB9XHJcblxyXG4gIGFkZENsYXNzKGVsZW1lbnQsIG5hbWUpIHtcclxuICAgICQoZWxlbWVudCkuYWRkQ2xhc3MobmFtZSk7XHJcbiAgICBjb25zdCBzdHlsZSA9IHRoaXMud25kLmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XHJcbiAgICB0aGlzLmN1cnNvcnMucHVzaCgkKHRoaXMuYkVsZW1lbnQpLmNzcygnY3Vyc29yJykpO1xyXG4gICAgJCh0aGlzLmJFbGVtZW50KS5jc3MoJ2N1cnNvcicsIHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2N1cnNvcicpKTtcclxuICB9XHJcblxyXG4gIHJlbW92ZUNsYXNzKGVsZW1lbnQsIG5hbWUpIHtcclxuICAgICQoZWxlbWVudCkucmVtb3ZlQ2xhc3MobmFtZSk7XHJcbiAgICAkKHRoaXMuYkVsZW1lbnQpLmNzcygnY3Vyc29yJywgdGhpcy5jdXJzb3JzLnBvcCgpKTtcclxuICB9XHJcblxyXG4gIGVudGVyRWxlbWVudChlbGVtZW50KSB7XHJcbiAgICB0aGlzLmFkZENsYXNzKGVsZW1lbnQsIERvY01vdXNlU2ltdWxhdG9yLkhPVkVSKTtcclxuICB9XHJcblxyXG4gIGxlYXZlRWxlbWVudChlbGVtZW50KSB7XHJcbiAgICB0aGlzLnJlbW92ZUNsYXNzKGVsZW1lbnQsIERvY01vdXNlU2ltdWxhdG9yLkhPVkVSKTtcclxuICB9XHJcblxyXG4gIGFjdGl2YXRlRWxlbWVudChlbGVtZW50KSB7XHJcbiAgICB0aGlzLmFkZENsYXNzKGVsZW1lbnQsIERvY01vdXNlU2ltdWxhdG9yLkFDVElWRSk7XHJcbiAgfVxyXG5cclxuICBkZWFjdGl2YXRlRWxlbWVudChlbGVtZW50KSB7XHJcbiAgICB0aGlzLnJlbW92ZUNsYXNzKGVsZW1lbnQsIERvY01vdXNlU2ltdWxhdG9yLkFDVElWRSk7XHJcbiAgfVxyXG5cclxuICBhZGREb2NDaGFuZ2VDbGIoY2xiKSB7XHJcbiAgICB0aGlzLm9uRG9jQ2hhbmdlQ2xicy5wdXNoKGNsYik7XHJcbiAgfVxyXG5cclxuICBub3RpZnkoKSB7XHJcbiAgICBmb3IobGV0IGNsYiBvZiB0aGlzLm9uRG9jQ2hhbmdlQ2xicykge1xyXG4gICAgICBjbGIodGhpcy53bmQsIHRoaXMuZG9jKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGVsZW1lbnRGcm9tUG9pbnQocCkge1xyXG4gICAgbGV0IG5vZGUgPSB0aGlzLmRvYy5ib2R5LCBuZXh0ID0gdHJ1ZTtcclxuICAgIHdoaWxlKG5leHQpIHtcclxuICAgICAgbmV4dCA9IGZhbHNlO1xyXG4gICAgICBmb3IobGV0IGk9MDsgaTxub2RlLmNoaWxkTm9kZXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICBjb25zdCBjaGlsZCA9IG5vZGUuY2hpbGROb2Rlc1tpXTtcclxuICAgICAgICBpZihjaGlsZCBpbnN0YW5jZW9mIHRoaXMud25kLkVsZW1lbnQpIHtcclxuICAgICAgICAgIGNvbnN0IGpDID0gJChjaGlsZCksIG9mZnNldCA9IGpDLm9mZnNldCgpLCBoZWlnaHQgPSBqQy5oZWlnaHQoKSwgd2lkdGggPSBqQy53aWR0aCgpO1xyXG4gICAgICAgICAgaWYocC54Pm9mZnNldC5sZWZ0ICYmIHAueDxvZmZzZXQubGVmdCt3aWR0aCAmJiBwLnk+b2Zmc2V0LnRvcCAmJiBwLnk8b2Zmc2V0LnRvcCtoZWlnaHQpIHtcclxuICAgICAgICAgICAgbm9kZSA9IGNoaWxkO1xyXG4gICAgICAgICAgICBuZXh0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbm9kZTtcclxuICB9XHJcblxyXG4gIGdldEVsZW1lbnQocCkge1xyXG4gICAgY29uc3Qgb2ZmMCA9IHRoaXMuakZyYW1lLm9mZnNldCgpO1xyXG4gICAgdGhpcy5qRnJhbWUub2Zmc2V0KHtsZWZ0OiAwLjUqd2luZG93LmlubmVyV2lkdGgtcC54LCB0b3A6IDAuNSp3aW5kb3cuaW5uZXJIZWlnaHQtcC55fSk7XHJcbiAgICBsZXQgZWxlbWVudCA9IHRoaXMuZG9jLmVsZW1lbnRGcm9tUG9pbnQocC54LCBwLnkpO1xyXG4gICAgaWYoIWVsZW1lbnQpIHsgLy8gaXQgaXNuJ3QgYSBqb2tlIGl0J3MgSUVcclxuICAgICAgZWxlbWVudCA9IHRoaXMuZG9jLmVsZW1lbnRGcm9tUG9pbnQocC54LCBwLnkpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5qRnJhbWUub2Zmc2V0KG9mZjApO1xyXG4gICAgcmV0dXJuIGVsZW1lbnQ/IGVsZW1lbnQ6IHRoaXMuZWxlbWVudEZyb21Qb2ludChwKTtcclxuICB9XHJcblxyXG4gIHNpbXVsYXRlKGUsIGRvYywgeCwgeSkge1xyXG4gICAgY29uc3QgcCA9IHRoaXMuY29udmVydENvb3Jkcyh4LCB5KSxcclxuICAgICAgICAgIGVsZW1lbnQgPSBkb2M9PT10aGlzLmRvYz8gdGhpcy5nZXRFbGVtZW50KHApOiB1bmRlZmluZWQ7XHJcbiAgICBsZXQgdHJpZ2dlciA9IGVsZW1lbnQgIT09IHVuZGVmaW5lZCwgbm90aWZ5ID0gZmFsc2U7XHJcblxyXG4gICAgc3dpdGNoKGUudHlwZSkge1xyXG4gICAgICBjYXNlICdtb3VzZWRvd24nOiB7XHJcbiAgICAgICAgaWYodGhpcy5jYXBFbGVtZW50KSB7XHJcbiAgICAgICAgICB0aGlzLmRlYWN0aXZhdGVFbGVtZW50KHRoaXMuY2FwRWxlbWVudCk7XHJcbiAgICAgICAgICBub3RpZnkgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNhcEVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICAgIGlmKHRoaXMuY2FwRWxlbWVudCkge1xyXG4gICAgICAgICAgdGhpcy5hY3RpdmF0ZUVsZW1lbnQodGhpcy5jYXBFbGVtZW50KTtcclxuICAgICAgICAgIG5vdGlmeSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ21vdXNldXAnOiB7XHJcbiAgICAgICAgaWYodGhpcy5jYXBFbGVtZW50KSB7XHJcbiAgICAgICAgICB0aGlzLmRlYWN0aXZhdGVFbGVtZW50KHRoaXMuY2FwRWxlbWVudCk7XHJcbiAgICAgICAgICBub3RpZnkgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnRpbWVTdGFtcCA9IGUudGltZVN0YW1wO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ2NsaWNrJzoge1xyXG4gICAgICAgIHRyaWdnZXIgPSBlbGVtZW50ICYmIHRoaXMuY2FwRWxlbWVudCA9PT0gZWxlbWVudCAmJiBlLnRpbWVTdGFtcCA9PT0gdGhpcy50aW1lU3RhbXA7XHJcbiAgICAgICAgdGhpcy5jYXBFbGVtZW50ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ21vdXNlZW50ZXInOlxyXG4gICAgICBjYXNlICdtb3VzZW92ZXInOlxyXG4gICAgICBjYXNlICdtb3VzZW1vdmUnOiB7XHJcbiAgICAgICAgbGV0IGxlYXZlZCA9IG51bGw7XHJcbiAgICAgICAgaWYodGhpcy5ob3ZFbGVtZW50ICE9PSBlbGVtZW50ICYmIHRoaXMuaG92RWxlbWVudCkge1xyXG4gICAgICAgICAgdGhpcy50cmlnZ2VyRXZlbnQodGhpcy5ob3ZFbGVtZW50LCBlLCBwLCAnbW91c2VvdXQnLCB7cmVsYXRlZFRhcmdldDogZWxlbWVudD8gZWxlbWVudDogbnVsbH0pO1xyXG4gICAgICAgICAgdGhpcy5sZWF2ZUVsZW1lbnQodGhpcy5ob3ZFbGVtZW50KTtcclxuICAgICAgICAgIGxlYXZlZCA9IHRoaXMuaG92RWxlbWVudDtcclxuICAgICAgICAgIHRoaXMuaG92RWxlbWVudCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgIG5vdGlmeSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKCF0aGlzLmhvdkVsZW1lbnQgJiYgZWxlbWVudCkge1xyXG4gICAgICAgICAgdGhpcy50cmlnZ2VyRXZlbnQoZWxlbWVudCwgZSwgcCwgJ21vdXNlb3ZlcicsIHtyZWxhdGVkVGFyZ2V0OiBsZWF2ZWR9KTtcclxuICAgICAgICAgIHRoaXMuZW50ZXJFbGVtZW50KGVsZW1lbnQpO1xyXG4gICAgICAgICAgdGhpcy5ob3ZFbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgICAgIG5vdGlmeSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRyaWdnZXIgPSBlbGVtZW50ICYmIGUudHlwZSA9PT0gJ21vdXNlbW92ZSc7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnbW91c2VsZWF2ZSc6XHJcbiAgICAgIGNhc2UgJ21vdXNlb3V0Jzoge1xyXG4gICAgICAgIGlmKHRoaXMuaG92RWxlbWVudCkge1xyXG4gICAgICAgICAgdGhpcy50cmlnZ2VyRXZlbnQodGhpcy5ob3ZFbGVtZW50LCBlLCBwLCAnbW91c2VvdXQnLCB7cmVsYXRlZFRhcmdldDogZS5yZWxhdGVkVGFyZ2V0fSk7XHJcbiAgICAgICAgICB0aGlzLmxlYXZlRWxlbWVudCh0aGlzLmhvdkVsZW1lbnQpO1xyXG4gICAgICAgICAgdGhpcy5ob3ZFbGVtZW50ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgbm90aWZ5ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHJpZ2dlciA9IGZhbHNlO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZih0cmlnZ2VyKSB7XHJcbiAgICAgIHRoaXMudHJpZ2dlckV2ZW50KGVsZW1lbnQsIGUsIHAsIGUudHlwZSk7XHJcbiAgICB9XHJcbiAgICBpZihub3RpZnkpIHtcclxuICAgICAgdGhpcy5ub3RpZnkoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldERlZmF1bHRVbmRlZmluZWRQcm9wZXJ0aWVzKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgJ2NsaWVudFgnLFxyXG4gICAgICAnY2xpZW50WScsXHJcbiAgICAgICdvZmZzZXRYJyxcclxuICAgICAgJ29mZnNldFknLFxyXG4gICAgICAnc2NyZWVuWCcsXHJcbiAgICAgICdzY3JlZW5ZJ1xyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIGdldERlZmF1bHRSZXNlbmRQcm9wZXJ0aWVzKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgJ2FsdEtleScsXHJcbiAgICAgICdidWJibGVzJyxcclxuICAgICAgJ2J1dHRvbicsXHJcbiAgICAgICdidXR0b25zJyxcclxuICAgICAgJ2NhbmNlbGFibGUnLFxyXG4gICAgICAnY2hhbmdlZFRvdWNoZXMnLFxyXG4gICAgICAnY2hhcicsXHJcbiAgICAgICdjaGFyQ29kZScsXHJcbiAgICAgICdjdHJsS2V5JyxcclxuICAgICAgJ2RhdGEnLFxyXG4gICAgICAnZGV0YWlsJyxcclxuICAgICAgJ2V2ZW50UGhhc2UnLFxyXG4gICAgICAnaXNEZWZhdWx0UHJldmVudGVkJyxcclxuICAgICAgJ2tleScsXHJcbiAgICAgICdrZXlDb2RlJyxcclxuICAgICAgJ21ldGFLZXknLFxyXG4gICAgICAncG9pbnRlcklkJyxcclxuICAgICAgJ3BvaW50ZXJUeXBlJyxcclxuICAgICAgJ3NoaWZ0S2V5JyxcclxuICAgICAgJ3RhcmdldFRvdWNoZXMnLFxyXG4gICAgICAndG91Y2hlcycsXHJcbiAgICAgICd3aGljaCdcclxuICAgIF07XHJcbiAgfVxyXG5cclxufVxyXG5cclxuLypcclxuYWx0S2V5LFxyXG5idWJibGVzLFxyXG5idXR0b24sXHJcbmJ1dHRvbnMsXHJcbmNhbmNlbGFibGUsXHJcbmNoYW5nZWRUb3VjaGVzLFxyXG5jaGFyLFxyXG5jaGFyQ29kZSxcclxuY2xpZW50WCxcclxuY2xpZW50WSxcclxuY3RybEtleSxcclxuY3VycmVudFRhcmdldCxcclxuZGF0YSxcclxuZGVsZWdhdGVUYXJnZXQsXHJcbmRldGFpbCxcclxuZXZlbnRQaGFzZSxcclxuaGFuZGxlT2JqLFxyXG5pc0RlZmF1bHRQcmV2ZW50ZWQsXHJcbmtleSxcclxua2V5Q29kZSxcclxubWV0YUtleSxcclxub2Zmc2V0WCxcclxub2Zmc2V0WSxcclxub3JpZ2luYWxFdmVudCxcclxucGFnZVgsXHJcbnBhZ2VZLFxyXG5wb2ludGVySWQsXHJcbnBvaW50ZXJUeXBlLFxyXG5yZWxhdGVkVGFyZ2V0LFxyXG5zY3JlZW5YLFxyXG5zY3JlZW5ZLFxyXG5zaGlmdEtleSxcclxudGFyZ2V0LFxyXG50YXJnZXRUb3VjaGVzLFxyXG50aW1lU3RhbXAsXHJcbnRvRWxlbWVudCxcclxudG91Y2hlcyxcclxudHlwZSxcclxudmlldyxcclxud2hpY2hcclxuKi9cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvRG9jTW91c2VTaW11bGF0b3IuanMiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBEb20ySW1hZ2Uge1xuXG4gIGNvbnN0cnVjdG9yKHduZCwgZG9jLCBjYWNoZSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIHRoaXMud2luZG93ID0gd25kO1xuICAgIHRoaXMuZG9jdW1lbnQgPSBkb2M7XG4gICAgdGhpcy5jYWNoZSA9IGNhY2hlO1xuXG4gICAgY29uc3QgdXRpbCA9IG5ld1V0aWwoKTtcbiAgICBjb25zdCBpbmxpbmVyID0gbmV3SW5saW5lcigpO1xuICAgIGNvbnN0IGZvbnRGYWNlcyA9IG5ld0ZvbnRGYWNlcygpO1xuICAgIGNvbnN0IGltYWdlcyA9IG5ld0ltYWdlcygpO1xuXG4gICAgdGhpcy50b1N2ZyA9IHRvU3ZnO1xuICAgIHRoaXMudG9QbmcgPSB0b1BuZztcbiAgICB0aGlzLnRvSnBlZyA9IHRvSnBlZztcbiAgICB0aGlzLnRvQmxvYiA9IHRvQmxvYjtcbiAgICB0aGlzLnRvUGl4ZWxEYXRhID0gdG9QaXhlbERhdGE7XG4gICAgdGhpcy5pbXBsID0ge1xuICAgICAgICAgICAgICAgICAgZm9udEZhY2VzOiBmb250RmFjZXMsXG4gICAgICAgICAgICAgICAgICBpbWFnZXM6IGltYWdlcyxcbiAgICAgICAgICAgICAgICAgIHV0aWw6IHV0aWwsXG4gICAgICAgICAgICAgICAgICBpbmxpbmVyOiBpbmxpbmVyXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBET00gTm9kZSBvYmplY3QgdG8gcmVuZGVyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBSZW5kZXJpbmcgb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wdGlvbnMuZmlsdGVyIC0gU2hvdWxkIHJldHVybiB0cnVlIGlmIHBhc3NlZCBub2RlIHNob3VsZCBiZSBpbmNsdWRlZCBpbiB0aGUgb3V0cHV0XG4gICAgICogICAgICAgICAgKGV4Y2x1ZGluZyBub2RlIG1lYW5zIGV4Y2x1ZGluZyBpdCdzIGNoaWxkcmVuIGFzIHdlbGwpLiBOb3QgY2FsbGVkIG9uIHRoZSByb290IG5vZGUuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMuYmdjb2xvciAtIGNvbG9yIGZvciB0aGUgYmFja2dyb3VuZCwgYW55IHZhbGlkIENTUyBjb2xvciB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy53aWR0aCAtIHdpZHRoIHRvIGJlIGFwcGxpZWQgdG8gbm9kZSBiZWZvcmUgcmVuZGVyaW5nLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLmhlaWdodCAtIGhlaWdodCB0byBiZSBhcHBsaWVkIHRvIG5vZGUgYmVmb3JlIHJlbmRlcmluZy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5zdHlsZSAtIGFuIG9iamVjdCB3aG9zZSBwcm9wZXJ0aWVzIHRvIGJlIGNvcGllZCB0byBub2RlJ3Mgc3R5bGUgYmVmb3JlIHJlbmRlcmluZy5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5xdWFsaXR5IC0gYSBOdW1iZXIgYmV0d2VlbiAwIGFuZCAxIGluZGljYXRpbmcgaW1hZ2UgcXVhbGl0eSAoYXBwbGljYWJsZSB0byBKUEVHIG9ubHkpLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRzIHRvIDEuMC5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIEEgcHJvbWlzZSB0aGF0IGlzIGZ1bGZpbGxlZCB3aXRoIGEgU1ZHIGltYWdlIGRhdGEgVVJMXG4gICAgICogKi9cblxuICAgIGZ1bmN0aW9uIHRvU3ZnKG5vZGUsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobm9kZSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsb25lTm9kZShub2RlLCBvcHRpb25zLmZpbHRlciwgdHJ1ZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oZW1iZWRGb250cylcbiAgICAgICAgICAgIC50aGVuKGlubGluZUltYWdlcylcbiAgICAgICAgICAgIC50aGVuKGFwcGx5T3B0aW9ucylcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChjbG9uZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYWtlU3ZnRGF0YVVyaShjbG9uZSxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy53aWR0aCB8fCB1dGlsLndpZHRoKG5vZGUpLFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmhlaWdodCB8fCB1dGlsLmhlaWdodChub2RlKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBmdW5jdGlvbiBhcHBseU9wdGlvbnMoY2xvbmUpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmJnY29sb3IpIGNsb25lLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IG9wdGlvbnMuYmdjb2xvcjtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMud2lkdGgpIGNsb25lLnN0eWxlLndpZHRoID0gb3B0aW9ucy53aWR0aCArICdweCc7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5oZWlnaHQpIGNsb25lLnN0eWxlLmhlaWdodCA9IG9wdGlvbnMuaGVpZ2h0ICsgJ3B4JztcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3R5bGUpXG4gICAgICAgICAgICAgICAgc2VsZi53aW5kb3cuT2JqZWN0LmtleXMob3B0aW9ucy5zdHlsZSkuZm9yRWFjaChmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmUuc3R5bGVbcHJvcGVydHldID0gb3B0aW9ucy5zdHlsZVtwcm9wZXJ0eV07XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBjbG9uZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBET00gTm9kZSBvYmplY3QgdG8gcmVuZGVyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBSZW5kZXJpbmcgb3B0aW9ucywgQHNlZSB7QGxpbmsgdG9Tdmd9XG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSBBIHByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWQgd2l0aCBhIFVpbnQ4QXJyYXkgY29udGFpbmluZyBSR0JBIHBpeGVsIGRhdGEuXG4gICAgICogKi9cbiAgICBmdW5jdGlvbiB0b1BpeGVsRGF0YShub2RlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBkcmF3KG5vZGUsIG9wdGlvbnMgfHwge30pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoY2FudmFzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpLmdldEltYWdlRGF0YShcbiAgICAgICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgICAgdXRpbC53aWR0aChub2RlKSxcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5oZWlnaHQobm9kZSlcbiAgICAgICAgICAgICAgICApLmRhdGE7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgLSBUaGUgRE9NIE5vZGUgb2JqZWN0IHRvIHJlbmRlclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUmVuZGVyaW5nIG9wdGlvbnMsIEBzZWUge0BsaW5rIHRvU3ZnfVxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gQSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdpdGggYSBQTkcgaW1hZ2UgZGF0YSBVUkxcbiAgICAgKiAqL1xuICAgIGZ1bmN0aW9uIHRvUG5nKG5vZGUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGRyYXcobm9kZSwgb3B0aW9ucyB8fCB7fSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChjYW52YXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FudmFzLnRvRGF0YVVSTCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtOb2RlfSBub2RlIC0gVGhlIERPTSBOb2RlIG9iamVjdCB0byByZW5kZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFJlbmRlcmluZyBvcHRpb25zLCBAc2VlIHtAbGluayB0b1N2Z31cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIEEgcHJvbWlzZSB0aGF0IGlzIGZ1bGZpbGxlZCB3aXRoIGEgSlBFRyBpbWFnZSBkYXRhIFVSTFxuICAgICAqICovXG4gICAgZnVuY3Rpb24gdG9KcGVnKG5vZGUsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIHJldHVybiBkcmF3KG5vZGUsIG9wdGlvbnMpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoY2FudmFzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbnZhcy50b0RhdGFVUkwoJ2ltYWdlL2pwZWcnLCBvcHRpb25zLnF1YWxpdHkgfHwgMS4wKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBET00gTm9kZSBvYmplY3QgdG8gcmVuZGVyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBSZW5kZXJpbmcgb3B0aW9ucywgQHNlZSB7QGxpbmsgdG9Tdmd9XG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSBBIHByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWQgd2l0aCBhIFBORyBpbWFnZSBibG9iXG4gICAgICogKi9cbiAgICBmdW5jdGlvbiB0b0Jsb2Iobm9kZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZHJhdyhub2RlLCBvcHRpb25zIHx8IHt9KVxuICAgICAgICAgICAgLnRoZW4odXRpbC5jYW52YXNUb0Jsb2IpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRyYXcoZG9tTm9kZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdG9TdmcoZG9tTm9kZSwgb3B0aW9ucylcbiAgICAgICAgICAgIC50aGVuKHV0aWwubWFrZUltYWdlKVxuICAgICAgICAgICAgLnRoZW4odXRpbC5kZWxheSgxMDApKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGltYWdlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2FudmFzID0gbmV3Q2FudmFzKGRvbU5vZGUpO1xuICAgICAgICAgICAgICAgIGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpLmRyYXdJbWFnZShpbWFnZSwgMCwgMCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbnZhcztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIG5ld0NhbnZhcyhkb21Ob2RlKSB7XG4gICAgICAgICAgICBjb25zdCBjYW52YXMgPSBzZWxmLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgICAgICAgY2FudmFzLndpZHRoID0gb3B0aW9ucy53aWR0aCB8fCB1dGlsLndpZHRoKGRvbU5vZGUpO1xuICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IG9wdGlvbnMuaGVpZ2h0IHx8IHV0aWwuaGVpZ2h0KGRvbU5vZGUpO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5iZ2NvbG9yKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMuYmdjb2xvcjtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGNhbnZhcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb25lTm9kZShub2RlLCBmaWx0ZXIsIHJvb3QpIHtcbiAgICAgICAgaWYgKCFyb290ICYmIGZpbHRlciAmJiAhZmlsdGVyKG5vZGUpKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShub2RlKVxuICAgICAgICAgICAgLnRoZW4obWFrZU5vZGVDb3B5KVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGNsb25lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsb25lQ2hpbGRyZW4obm9kZSwgY2xvbmUsIGZpbHRlcik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGNsb25lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NDbG9uZShub2RlLCBjbG9uZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBmdW5jdGlvbiBtYWtlTm9kZUNvcHkobm9kZSkge1xuICAgICAgICAgICAgaWYgKHV0aWwuaXNDYW52YXMobm9kZSkpIHJldHVybiB1dGlsLm1ha2VJbWFnZShub2RlLnRvRGF0YVVSTCgpKTtcbiAgICAgICAgICAgIHJldHVybiBub2RlLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjbG9uZUNoaWxkcmVuKG9yaWdpbmFsLCBjbG9uZSwgZmlsdGVyKSB7XG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IG9yaWdpbmFsLmNoaWxkTm9kZXM7XG4gICAgICAgICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID09PSAwKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNsb25lKTtcblxuICAgICAgICAgICAgcmV0dXJuIGNsb25lQ2hpbGRyZW5Jbk9yZGVyKGNsb25lLCB1dGlsLmFzQXJyYXkoY2hpbGRyZW4pLCBmaWx0ZXIpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNsb25lQ2hpbGRyZW5Jbk9yZGVyKHBhcmVudCwgY2hpbGRyZW4sIGZpbHRlcikge1xuICAgICAgICAgICAgICAgIGxldCBkb25lID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgZG9uZSA9IGRvbmVcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmVOb2RlKGNoaWxkLCBmaWx0ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChjaGlsZENsb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkQ2xvbmUpIHBhcmVudC5hcHBlbmRDaGlsZChjaGlsZENsb25lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBkb25lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcHJvY2Vzc0Nsb25lKG9yaWdpbmFsLCBjbG9uZSkge1xuICAgICAgICAgICAgaWYgKCF1dGlsLmlzRWxlbWVudChjbG9uZSkpIHJldHVybiBjbG9uZTtcblxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAgICAgICAgICAgLnRoZW4oY2xvbmVTdHlsZSlcbiAgICAgICAgICAgICAgICAudGhlbihjbG9uZVBzZXVkb0VsZW1lbnRzKVxuICAgICAgICAgICAgICAgIC50aGVuKGNvcHlVc2VySW5wdXQpXG4gICAgICAgICAgICAgICAgLnRoZW4oZml4U3ZnKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBjbG9uZVN0eWxlKCkge1xuICAgICAgICAgICAgICAgIGNvcHlTdHlsZShzZWxmLndpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG9yaWdpbmFsKSwgY2xvbmUuc3R5bGUpO1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY29weVN0eWxlKHNvdXJjZSwgdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2UuY3NzVGV4dCkgdGFyZ2V0LmNzc1RleHQgPSBzb3VyY2UuY3NzVGV4dDtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBjb3B5UHJvcGVydGllcyhzb3VyY2UsIHRhcmdldCk7XG5cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gY29weVByb3BlcnRpZXMoc291cmNlLCB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwuYXNBcnJheShzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQuc2V0UHJvcGVydHkoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UuZ2V0UHJvcGVydHlQcmlvcml0eShuYW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY2xvbmVQc2V1ZG9FbGVtZW50cygpIHtcbiAgICAgICAgICAgICAgICBbJzpiZWZvcmUnLCAnOmFmdGVyJ10uZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBjbG9uZVBzZXVkb0VsZW1lbnQoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjbG9uZVBzZXVkb0VsZW1lbnQoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHlsZSA9IHNlbGYud2luZG93LmdldENvbXB1dGVkU3R5bGUob3JpZ2luYWwsIGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50ID0gc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnY29udGVudCcpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250ZW50ID09PSAnJyB8fCBjb250ZW50ID09PSAnbm9uZScpIHJldHVybjtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjbGFzc05hbWUgPSB1dGlsLnVpZCgpO1xuICAgICAgICAgICAgICAgICAgICBjbG9uZS5jbGFzc05hbWUgPSBjbG9uZS5jbGFzc05hbWUgKyAnICcgKyBjbGFzc05hbWU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlRWxlbWVudCA9IHNlbGYuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGZvcm1hdFBzZXVkb0VsZW1lbnRTdHlsZShjbGFzc05hbWUsIGVsZW1lbnQsIHN0eWxlKSk7XG4gICAgICAgICAgICAgICAgICAgIGNsb25lLmFwcGVuZENoaWxkKHN0eWxlRWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZm9ybWF0UHNldWRvRWxlbWVudFN0eWxlKGNsYXNzTmFtZSwgZWxlbWVudCwgc3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdG9yID0gJy4nICsgY2xhc3NOYW1lICsgJzonICsgZWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNzc1RleHQgPSBzdHlsZS5jc3NUZXh0ID8gZm9ybWF0Q3NzVGV4dChzdHlsZSkgOiBmb3JtYXRDc3NQcm9wZXJ0aWVzKHN0eWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLmRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHNlbGVjdG9yICsgJ3snICsgY3NzVGV4dCArICd9Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZvcm1hdENzc1RleHQoc3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50ID0gc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnY29udGVudCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHlsZS5jc3NUZXh0ICsgJyBjb250ZW50OiAnICsgY29udGVudCArICc7JztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZm9ybWF0Q3NzUHJvcGVydGllcyhzdHlsZSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHV0aWwuYXNBcnJheShzdHlsZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmb3JtYXRQcm9wZXJ0eSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmpvaW4oJzsgJykgKyAnOyc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBmb3JtYXRQcm9wZXJ0eShuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuYW1lICsgJzogJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzdHlsZS5nZXRQcm9wZXJ0eVByaW9yaXR5KG5hbWUpID8gJyAhaW1wb3J0YW50JyA6ICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNvcHlVc2VySW5wdXQoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNUZXh0QXJlYShvcmlnaW5hbCkpIGNsb25lLmlubmVySFRNTCA9IG9yaWdpbmFsLnZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzSW5wdXQob3JpZ2luYWwpKSBjbG9uZS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBvcmlnaW5hbC52YWx1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGZpeFN2ZygpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaXNTVkcoY2xvbmUpKSByZXR1cm47XG4gICAgICAgICAgICAgICAgY2xvbmUuc2V0QXR0cmlidXRlKCd4bWxucycsICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF1dGlsLmlzU1ZHUmVjdChjbG9uZSkpIHJldHVybjtcbiAgICAgICAgICAgICAgICBbJ3dpZHRoJywgJ2hlaWdodCddLmZvckVhY2goZnVuY3Rpb24gKGF0dHJpYnV0ZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGNsb25lLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbHVlKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAgICAgY2xvbmUuc3R5bGUuc2V0UHJvcGVydHkoYXR0cmlidXRlLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbWJlZEZvbnRzKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIGZvbnRGYWNlcy5yZXNvbHZlQWxsKClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChjc3NUZXh0KSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3R5bGVOb2RlID0gc2VsZi5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgICAgICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoc3R5bGVOb2RlKTtcbiAgICAgICAgICAgICAgICBzdHlsZU5vZGUuYXBwZW5kQ2hpbGQoc2VsZi5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3NUZXh0KSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbmxpbmVJbWFnZXMobm9kZSkge1xuICAgICAgICByZXR1cm4gaW1hZ2VzLmlubGluZUFsbChub2RlKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZVN2Z0RhdGFVcmkobm9kZSwgd2lkdGgsIGhlaWdodCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5vZGUpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCd4bWxucycsICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBzZWxmLndpbmRvdy5YTUxTZXJpYWxpemVyKCkuc2VyaWFsaXplVG9TdHJpbmcobm9kZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4odXRpbC5lc2NhcGVYaHRtbClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh4aHRtbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbJ2RhdGE6aW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PXV0Zi04LCcsXG4gICAgICAgICAgICAgICAgJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiJywgd2lkdGgsICdcIiBoZWlnaHQ9XCInLCBoZWlnaHQsICdcIj4nLFxuICAgICAgICAgICAgICAgICAgJzxmb3JlaWduT2JqZWN0IHg9XCIwXCIgeT1cIjBcIiB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9XCIxMDAlXCI+JywgeGh0bWwsICc8L2ZvcmVpZ25PYmplY3Q+JyxcbiAgICAgICAgICAgICAgICAnPC9zdmc+J10uam9pbignJyk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBuZXdVdGlsKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZXNjYXBlOiBlc2NhcGUsXG4gICAgICAgICAgICBwYXJzZUV4dGVuc2lvbjogcGFyc2VFeHRlbnNpb24sXG4gICAgICAgICAgICBtaW1lVHlwZTogbWltZVR5cGUsXG4gICAgICAgICAgICBkYXRhQXNVcmw6IGRhdGFBc1VybCxcbiAgICAgICAgICAgIGlzRGF0YVVybDogaXNEYXRhVXJsLFxuICAgICAgICAgICAgY2FudmFzVG9CbG9iOiBjYW52YXNUb0Jsb2IsXG4gICAgICAgICAgICByZXNvbHZlVXJsOiByZXNvbHZlVXJsLFxuICAgICAgICAgICAgZ2V0QW5kRW5jb2RlOiBnZXRBbmRFbmNvZGUsXG4gICAgICAgICAgICB1aWQ6IHVpZCgpLFxuICAgICAgICAgICAgZGVsYXk6IGRlbGF5LFxuICAgICAgICAgICAgYXNBcnJheTogYXNBcnJheSxcbiAgICAgICAgICAgIGVzY2FwZVhodG1sOiBlc2NhcGVYaHRtbCxcbiAgICAgICAgICAgIG1ha2VJbWFnZTogbWFrZUltYWdlLFxuICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG5cbiAgICAgICAgICAgIGlzRWxlbWVudCxcbiAgICAgICAgICAgIGlzQ2FudmFzLFxuICAgICAgICAgICAgaXNUZXh0QXJlYSxcbiAgICAgICAgICAgIGlzSW5wdXQsXG4gICAgICAgICAgICBpc1NWRyxcbiAgICAgICAgICAgIGlzU1ZHUmVjdCxcbiAgICAgICAgICAgIGlzSW1hZ2VcbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiBtaW1lcygpIHtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBPbmx5IFdPRkYgYW5kIEVPVCBtaW1lIHR5cGVzIGZvciBmb250cyBhcmUgJ3JlYWwnXG4gICAgICAgICAgICAgKiBzZWUgaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy9tZWRpYS10eXBlcy9tZWRpYS10eXBlcy54aHRtbFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdCBXT0ZGID0gJ2FwcGxpY2F0aW9uL2ZvbnQtd29mZic7XG4gICAgICAgICAgICBjb25zdCBKUEVHID0gJ2ltYWdlL2pwZWcnO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICd3b2ZmJzogV09GRixcbiAgICAgICAgICAgICAgICAnd29mZjInOiBXT0ZGLFxuICAgICAgICAgICAgICAgICd0dGYnOiAnYXBwbGljYXRpb24vZm9udC10cnVldHlwZScsXG4gICAgICAgICAgICAgICAgJ2VvdCc6ICdhcHBsaWNhdGlvbi92bmQubXMtZm9udG9iamVjdCcsXG4gICAgICAgICAgICAgICAgJ3BuZyc6ICdpbWFnZS9wbmcnLFxuICAgICAgICAgICAgICAgICdqcGcnOiBKUEVHLFxuICAgICAgICAgICAgICAgICdqcGVnJzogSlBFRyxcbiAgICAgICAgICAgICAgICAnZ2lmJzogJ2ltYWdlL2dpZicsXG4gICAgICAgICAgICAgICAgJ3RpZmYnOiAnaW1hZ2UvdGlmZicsXG4gICAgICAgICAgICAgICAgJ3N2Zyc6ICdpbWFnZS9zdmcreG1sJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHBhcnNlRXh0ZW5zaW9uKHVybCkge1xuICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSAvXFwuKFteXFwuXFwvXSo/KSQvZy5leGVjKHVybCk7XG4gICAgICAgICAgICBpZiAobWF0Y2gpIHJldHVybiBtYXRjaFsxXTtcbiAgICAgICAgICAgIGVsc2UgcmV0dXJuICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbWltZVR5cGUodXJsKSB7XG4gICAgICAgICAgICBjb25zdCBleHRlbnNpb24gPSBwYXJzZUV4dGVuc2lvbih1cmwpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICByZXR1cm4gbWltZXMoKVtleHRlbnNpb25dIHx8ICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaXNEYXRhVXJsKHVybCkge1xuICAgICAgICAgICAgcmV0dXJuIHVybC5zZWFyY2goL14oZGF0YTopLykgIT09IC0xO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdG9CbG9iKGNhbnZhcykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYmluYXJ5U3RyaW5nID0gc2VsZi53aW5kb3cuYXRvYihjYW52YXMudG9EYXRhVVJMKCkuc3BsaXQoJywnKVsxXSk7XG4gICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gYmluYXJ5U3RyaW5nLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBjb25zdCBiaW5hcnlBcnJheSA9IG5ldyBzZWxmLndpbmRvdy5VaW50OEFycmF5KGxlbmd0aCk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgICAgICBiaW5hcnlBcnJheVtpXSA9IGJpbmFyeVN0cmluZy5jaGFyQ29kZUF0KGkpO1xuXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgc2VsZi53aW5kb3cuQmxvYihbYmluYXJ5QXJyYXldLCB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdpbWFnZS9wbmcnXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjYW52YXNUb0Jsb2IoY2FudmFzKSB7XG4gICAgICAgICAgICBpZiAoY2FudmFzLnRvQmxvYilcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FudmFzLnRvQmxvYihyZXNvbHZlKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHRvQmxvYihjYW52YXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZVVybCh1cmwsIGJhc2VVcmwpIHtcbiAgICAgICAgICAgIGNvbnN0IGRvYyA9IHNlbGYuZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCk7XG4gICAgICAgICAgICBjb25zdCBiYXNlID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2Jhc2UnKTtcbiAgICAgICAgICAgIGRvYy5oZWFkLmFwcGVuZENoaWxkKGJhc2UpO1xuICAgICAgICAgICAgY29uc3QgYSA9IGRvYy5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgICAgICBkb2MuYm9keS5hcHBlbmRDaGlsZChhKTtcbiAgICAgICAgICAgIGJhc2UuaHJlZiA9IGJhc2VVcmw7XG4gICAgICAgICAgICBhLmhyZWYgPSB1cmw7XG4gICAgICAgICAgICByZXR1cm4gYS5ocmVmO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdWlkKCkge1xuICAgICAgICAgICAgbGV0IGluZGV4ID0gMDtcblxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3UnICsgZm91clJhbmRvbUNoYXJzKCkgKyBpbmRleCsrO1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZm91clJhbmRvbUNoYXJzKCkge1xuICAgICAgICAgICAgICAgICAgICAvKiBzZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNjI0ODcyMi8yNTE5MzczICovXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoJzAwMDAnICsgKHNlbGYud2luZG93Lk1hdGgucmFuZG9tKCkgKiBzZWxmLndpbmRvdy5NYXRoLnBvdygzNiwgNCkgPDwgMCkudG9TdHJpbmcoMzYpKS5zbGljZSgtNCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG1ha2VJbWFnZSh1cmkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW1hZ2UgPSBuZXcgc2VsZi53aW5kb3cuSW1hZ2UoKTtcbiAgICAgICAgICAgICAgICBpbWFnZS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoaW1hZ2UpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaW1hZ2Uub25lcnJvciA9IHJlamVjdDtcbiAgICAgICAgICAgICAgICBpbWFnZS5zcmMgPSB1cmk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldEFuZEVuY29kZSh1cmwpIHtcbiAgICAgICAgICBsZXQgZGF0YSA9IHNlbGYuY2FjaGUuZ2V0KHVybCk7XG4gICAgICAgICAgaWYoZGF0YSkge1xuICAgICAgICAgICAgaWYoZGF0YS5jb250ZW50KSB7XG4gICAgICAgICAgICAgIHJldHVybiBkYXRhLmNvbnRlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKT0+IHtcbiAgICAgICAgICAgICAgICBpZihkYXRhLmNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgIHJlc29sdmUoZGF0YS5jb250ZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICBkYXRhLnBlbmRpbmdzLnB1c2gocmVzb2x2ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkYXRhID0gc2VsZi5jYWNoZS5wdXQodXJsLCB7cGVuZGluZ3M6IFtdfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IFRJTUVPVVQgPSAzMDAwMDtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBzZWxmLndpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBkb25lO1xuICAgICAgICAgICAgICAgIHJlcXVlc3Qub250aW1lb3V0ID0gdGltZW91dDtcbiAgICAgICAgICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9ICdibG9iJztcbiAgICAgICAgICAgICAgICByZXF1ZXN0LnRpbWVvdXQgPSBUSU1FT1VUO1xuICAgICAgICAgICAgICAgIHJlcXVlc3Qub3BlbignR0VUJywgdXJsLCB0cnVlKTtcbiAgICAgICAgICAgICAgICByZXF1ZXN0LnNlbmQoKTtcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHJldHVybjtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmFpbCgnY2Fubm90IGZldGNoIHJlc291cmNlOiAnICsgdXJsICsgJywgc3RhdHVzOiAnICsgcmVxdWVzdC5zdGF0dXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5jb2RlciA9IG5ldyBzZWxmLndpbmRvdy5GaWxlUmVhZGVyKCk7XG4gICAgICAgICAgICAgICAgICAgIGVuY29kZXIub25sb2FkZW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5jb250ZW50ID0gZW5jb2Rlci5yZXN1bHQuc3BsaXQoLywvKVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcihsZXQgcmVzb2x2ZSBvZiBkYXRhLnBlbmRpbmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZGF0YS5jb250ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucGVuZGluZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZGF0YS5jb250ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgZW5jb2Rlci5yZWFkQXNEYXRhVVJMKHJlcXVlc3QucmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHRpbWVvdXQoKSB7XG4gICAgICAgICAgICAgICAgICAgIGZhaWwoJ3RpbWVvdXQgb2YgJyArIFRJTUVPVVQgKyAnbXMgb2NjdXJlZCB3aGlsZSBmZXRjaGluZyByZXNvdXJjZTogJyArIHVybCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZmFpbChtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGRhdGFBc1VybChjb250ZW50LCB0eXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gWydkYXRhOicsdHlwZSwnO2Jhc2U2NCwnLGNvbnRlbnRdLmpvaW4oJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZXNjYXBlKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8oWy4qKz9eJHt9KCl8XFxbXFxdXFwvXFxcXF0pL2csICdcXFxcJDEnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGRlbGF5KG1zKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoYXJnKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgbXMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFzQXJyYXkoYXJyYXlMaWtlKSB7XG4gICAgICAgICAgICBjb25zdCBhcnJheSA9IFtdO1xuICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gYXJyYXlMaWtlLmxlbmd0aDtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIGFycmF5LnB1c2goYXJyYXlMaWtlW2ldKTtcbiAgICAgICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGVzY2FwZVhodG1sKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8oI3xcXG4pL2csIChjKT0+IGM9PT0nIyc/ICclMjMnOiAnJTBBJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB3aWR0aChub2RlKSB7XG4gICAgICAgICAgICBjb25zdCBsZWZ0Qm9yZGVyID0gcHgobm9kZSwgJ2JvcmRlci1sZWZ0LXdpZHRoJyk7XG4gICAgICAgICAgICBjb25zdCByaWdodEJvcmRlciA9IHB4KG5vZGUsICdib3JkZXItcmlnaHQtd2lkdGgnKTtcbiAgICAgICAgICAgIHJldHVybiBub2RlLnNjcm9sbFdpZHRoICsgbGVmdEJvcmRlciArIHJpZ2h0Qm9yZGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaGVpZ2h0KG5vZGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHRvcEJvcmRlciA9IHB4KG5vZGUsICdib3JkZXItdG9wLXdpZHRoJyk7XG4gICAgICAgICAgICBjb25zdCBib3R0b21Cb3JkZXIgPSBweChub2RlLCAnYm9yZGVyLWJvdHRvbS13aWR0aCcpO1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUuc2Nyb2xsSGVpZ2h0ICsgdG9wQm9yZGVyICsgYm90dG9tQm9yZGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcHgobm9kZSwgc3R5bGVQcm9wZXJ0eSkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBzZWxmLndpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG5vZGUpLmdldFByb3BlcnR5VmFsdWUoc3R5bGVQcm9wZXJ0eSk7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZS5yZXBsYWNlKCdweCcsICcnKSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc0VsZW1lbnQobm9kZSkge1xuICAgICAgICAgIHJldHVybiBub2RlIGluc3RhbmNlb2Ygc2VsZi53aW5kb3cuRWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzQ2FudmFzKG5vZGUpIHtcbiAgICAgICAgICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIHNlbGYud2luZG93LkhUTUxDYW52YXNFbGVtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaXNUZXh0QXJlYShub2RlKSB7XG4gICAgICAgICAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBzZWxmLndpbmRvdy5IVE1MVGV4dEFyZWFFbGVtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaXNJbnB1dChub2RlKSB7XG4gICAgICAgICAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBzZWxmLndpbmRvdy5IVE1MSW5wdXRFbGVtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaXNTVkcobm9kZSkge1xuICAgICAgICAgIHJldHVybiBub2RlIGluc3RhbmNlb2Ygc2VsZi53aW5kb3cuU1ZHRWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzU1ZHUmVjdChub2RlKSB7XG4gICAgICAgICAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBzZWxmLndpbmRvdy5TVkdSZWN0RWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzSW1hZ2Uobm9kZSkge1xuICAgICAgICAgIHJldHVybiBub2RlIGluc3RhbmNlb2Ygc2VsZi53aW5kb3cuSFRNTEltYWdlRWxlbWVudDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5ld0lubGluZXIoKSB7XG4gICAgICAgIGNvbnN0IFVSTF9SRUdFWCA9IC91cmxcXChbJ1wiXT8oW14nXCJdKz8pWydcIl0/XFwpL2c7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlubGluZUFsbDogaW5saW5lQWxsLFxuICAgICAgICAgICAgc2hvdWxkUHJvY2Vzczogc2hvdWxkUHJvY2VzcyxcbiAgICAgICAgICAgIGltcGw6IHtcbiAgICAgICAgICAgICAgICByZWFkVXJsczogcmVhZFVybHMsXG4gICAgICAgICAgICAgICAgaW5saW5lOiBpbmxpbmVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiBzaG91bGRQcm9jZXNzKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5zZWFyY2goVVJMX1JFR0VYKSAhPT0gLTE7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZWFkVXJscyhzdHJpbmcpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgbGV0IG1hdGNoO1xuICAgICAgICAgICAgd2hpbGUgKChtYXRjaCA9IFVSTF9SRUdFWC5leGVjKHN0cmluZykpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobWF0Y2hbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5maWx0ZXIoZnVuY3Rpb24gKHVybCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhdXRpbC5pc0RhdGFVcmwodXJsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaW5saW5lKHN0cmluZywgdXJsLCBiYXNlVXJsLCBnZXQpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodXJsKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJhc2VVcmwgPyB1dGlsLnJlc29sdmVVcmwodXJsLCBiYXNlVXJsKSA6IHVybDtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50aGVuKGdldCB8fCB1dGlsLmdldEFuZEVuY29kZSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXRpbC5kYXRhQXNVcmwoZGF0YSwgdXRpbC5taW1lVHlwZSh1cmwpKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhVXJsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSh1cmxBc1JlZ2V4KHVybCksIFsnJDEnLCBkYXRhVXJsLCAnJDMnXS5qb2luKCcnKSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHVybEFzUmVnZXgodXJsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBzZWxmLndpbmRvdy5SZWdFeHAoWycodXJsXFxcXChbXFwnXCJdPykoJywgdXRpbC5lc2NhcGUodXJsKSwgJykoW1xcJ1wiXT9cXFxcKSknXS5qb2luKCcnKSwgJ2cnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlubGluZUFsbChzdHJpbmcsIGJhc2VVcmwsIGdldCkge1xuICAgICAgICAgICAgaWYgKG5vdGhpbmdUb0lubGluZSgpKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHN0cmluZyk7XG5cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoc3RyaW5nKVxuICAgICAgICAgICAgICAgIC50aGVuKHJlYWRVcmxzKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh1cmxzKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkb25lID0gUHJvbWlzZS5yZXNvbHZlKHN0cmluZyk7XG4gICAgICAgICAgICAgICAgICAgIHVybHMuZm9yRWFjaChmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb25lID0gZG9uZS50aGVuKGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5saW5lKHN0cmluZywgdXJsLCBiYXNlVXJsLCBnZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9uZTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gbm90aGluZ1RvSW5saW5lKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhc2hvdWxkUHJvY2VzcyhzdHJpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbmV3Rm9udEZhY2VzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzb2x2ZUFsbDogcmVzb2x2ZUFsbCxcbiAgICAgICAgICAgIGltcGw6IHtcbiAgICAgICAgICAgICAgICByZWFkQWxsOiByZWFkQWxsXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZUFsbCgpIHtcbiAgICAgICAgICAgIHJldHVybiByZWFkQWxsKHNlbGYuZG9jdW1lbnQpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHdlYkZvbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlYkZvbnRzLm1hcChmdW5jdGlvbiAod2ViRm9udCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3ZWJGb250LnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoY3NzU3RyaW5ncykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3NzU3RyaW5ncy5qb2luKCdcXG4nKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlYWRBbGwoKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHV0aWwuYXNBcnJheShzZWxmLmRvY3VtZW50LnN0eWxlU2hlZXRzKSlcbiAgICAgICAgICAgICAgICAudGhlbihnZXRDc3NSdWxlcylcbiAgICAgICAgICAgICAgICAudGhlbihzZWxlY3RXZWJGb250UnVsZXMpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJ1bGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBydWxlcy5tYXAobmV3V2ViRm9udCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNlbGVjdFdlYkZvbnRSdWxlcyhjc3NSdWxlcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBjc3NSdWxlc1xuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcnVsZS50eXBlID09PSBDU1NSdWxlLkZPTlRfRkFDRV9SVUxFO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5saW5lci5zaG91bGRQcm9jZXNzKHJ1bGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnc3JjJykpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Q3NzUnVsZXMoc3R5bGVTaGVldHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjc3NSdWxlcyA9IFtdO1xuICAgICAgICAgICAgICAgIHN0eWxlU2hlZXRzLmZvckVhY2goZnVuY3Rpb24gKHNoZWV0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlsLmFzQXJyYXkoc2hlZXQuY3NzUnVsZXMgfHwgW10pLmZvckVhY2goY3NzUnVsZXMucHVzaC5iaW5kKGNzc1J1bGVzKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdFcnJvciB3aGlsZSByZWFkaW5nIENTUyBydWxlcyBmcm9tICcgKyBzaGVldC5ocmVmLCBlLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNzc1J1bGVzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBuZXdXZWJGb250KHdlYkZvbnRSdWxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJhc2VVcmwgPSAod2ViRm9udFJ1bGUucGFyZW50U3R5bGVTaGVldCB8fCB7fSkuaHJlZjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbmxpbmVyLmlubGluZUFsbCh3ZWJGb250UnVsZS5jc3NUZXh0LCBiYXNlVXJsKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc3JjOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2ViRm9udFJ1bGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnc3JjJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbmV3SW1hZ2VzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5saW5lQWxsOiBpbmxpbmVBbGwsXG4gICAgICAgICAgICBpbXBsOiB7XG4gICAgICAgICAgICAgICAgbmV3SW1hZ2U6IG5ld0ltYWdlXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gbmV3SW1hZ2UoZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpbmxpbmU6IGlubGluZVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gaW5saW5lKGdldCkge1xuICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzRGF0YVVybChlbGVtZW50LnNyYykpIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZWxlbWVudC5zcmMpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGdldCB8fCB1dGlsLmdldEFuZEVuY29kZSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1dGlsLmRhdGFBc1VybChkYXRhLCB1dGlsLm1pbWVUeXBlKGVsZW1lbnQuc3JjKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhVXJsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQub25sb2FkID0gcmVzb2x2ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50Lm9uZXJyb3IgPSByZWplY3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zcmMgPSBkYXRhVXJsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaW5saW5lQWxsKG5vZGUpIHtcbiAgICAgICAgICAgIGlmICghdXRpbC5pc0VsZW1lbnQobm9kZSkpIHJldHVybiBQcm9taXNlLnJlc29sdmUobm9kZSk7XG5cbiAgICAgICAgICAgIHJldHVybiBpbmxpbmVCYWNrZ3JvdW5kKG5vZGUpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0ltYWdlKG5vZGUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ld0ltYWdlKG5vZGUpLmlubGluZSgpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5hc0FycmF5KG5vZGUuY2hpbGROb2RlcykubWFwKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5saW5lQWxsKGNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gaW5saW5lQmFja2dyb3VuZChub2RlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYmFja2dyb3VuZCA9IG5vZGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnYmFja2dyb3VuZCcpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFiYWNrZ3JvdW5kKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5vZGUpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlubGluZXIuaW5saW5lQWxsKGJhY2tncm91bmQpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChpbmxpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLnN0eWxlLnNldFByb3BlcnR5KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdiYWNrZ3JvdW5kJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmxpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuc3R5bGUuZ2V0UHJvcGVydHlQcmlvcml0eSgnYmFja2dyb3VuZCcpXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0RvbTJJbWFnZS5qcyIsImltcG9ydCB7JCwgVEhSRUV9IGZyb20gJy4uL2xpYnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRHJhZyB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHduZCwgZG9jLCB2aXN1YWxXb3JsZCkge1xyXG4gICAgdGhpcy53bmQgPSB3bmQ7XHJcbiAgICB0aGlzLmRvYyA9IGRvYztcclxuICAgIHRoaXMudmlzdWFsID0gdmlzdWFsV29ybGQ7XHJcbiAgICB0aGlzLmNvb3JkcyA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XHJcbiAgICB0aGlzLmludGVyc2VjdGlvbiA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XHJcbiAgICB0aGlzLnJheWNhc3RlciA9IHRoaXMudmlzdWFsLnJheWNhc3RlcjtcclxuICAgIHRoaXMuY2FtZXJhID0gdGhpcy52aXN1YWwuY2FtZXJhO1xyXG4gICAgdGhpcy5wbGFuZSA9IG5ldyBUSFJFRS5QbGFuZSgpO1xyXG4gICAgdGhpcy50aHJlZXMgPSBbXTtcclxuICAgIHRoaXMuc2VsZWN0ZWQgPSBudWxsO1xyXG4gICAgdGhpcy5lbmFibGVkID0gdHJ1ZTtcclxuICAgIHRoaXMuY29udHJvbHNTdGF0ZSA9IHRoaXMudmlzdWFsLmdldENvbnRyb2xzU3RhdGUoKTtcclxuXHJcbiAgICB0aGlzLmVsZW1lbnQgPSB0aGlzLnZpc3VhbC5lbGVtZW50O1xyXG4gICAgdGhpcy5iaW5kcyA9IHtcclxuICAgICAgb25Nb3VzZU1vdmU6IHRoaXMub25Nb3VzZU1vdmUuYmluZCh0aGlzKSxcclxuICAgICAgb25Nb3VzZURvd246IHRoaXMub25Nb3VzZURvd24uYmluZCh0aGlzKSxcclxuICAgICAgb25Nb3VzZVVwOiB0aGlzLm9uTW91c2VVcC5iaW5kKHRoaXMpXHJcbiAgICB9O1xyXG4gICAgJCh0aGlzLmVsZW1lbnQpLm9uKCdtb3VzZW1vdmUnLCB0aGlzLmJpbmRzLm9uTW91c2VNb3ZlKTtcclxuICAgICQodGhpcy5lbGVtZW50KS5vbignbW91c2Vkb3duJywgdGhpcy5iaW5kcy5vbk1vdXNlRG93bik7XHJcbiAgICAkKHRoaXMuZG9jKS5vbignbW91c2V1cCcsIHRoaXMuYmluZHMub25Nb3VzZVVwKTtcclxuICB9XHJcblxyXG4gIGFkZFRocmVlKHRocmVlKSB7XHJcbiAgICB0aGlzLnRocmVlcy5wdXNoKHRocmVlKTtcclxuICB9XHJcblxyXG4gIHJlbW92ZVRocmVlKHRocmVlKSB7XHJcbiAgICBjb25zdCBpID0gdGhpcy50aHJlZXMuaW5kZXhPZih0aHJlZSk7XHJcbiAgICBpZih+aSkge1xyXG4gICAgICB0aGlzLnRocmVlcy5zcGxpY2UoaSwgMSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvblBpY2tDYWxsYmFjaygpIHtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgb25EcmFnQ2FsbGJhY2soKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIG9uUmVsZWFzZUNhbGxiYWNrKCkge1xyXG5cclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICAkKHRoaXMuZWxlbWVudCkub2ZmKCdtb3VzZW1vdmUnLCB0aGlzLmJpbmRzLm9uTW91c2VNb3ZlKTtcclxuICAgICQodGhpcy5lbGVtZW50KS5vZmYoJ21vdXNlZG93bicsIHRoaXMuYmluZHMub25Nb3VzZURvd24pO1xyXG4gICAgJCh0aGlzLmRvYykub2ZmKCdtb3VzZXVwJywgdGhpcy5iaW5kcy5vbk1vdXNlVXApO1xyXG4gIH1cclxuXHJcbiAgc2V0Q29vcmRzRnJvbUV2ZW50KGUpIHtcclxuICAgIGNvbnN0IGpFbGVtZW50ID0gJCh0aGlzLmVsZW1lbnQpO1xyXG4gICAgY29uc3Qgb2Zmc2V0ID0gakVsZW1lbnQub2Zmc2V0KCk7XHJcbiAgICB0aGlzLmNvb3Jkcy54ID0gKChlLnBhZ2VYLW9mZnNldC5sZWZ0KS9qRWxlbWVudC53aWR0aCgpKSoyLTE7XHJcbiAgICB0aGlzLmNvb3Jkcy55ID0gLSgoZS5wYWdlWS1vZmZzZXQudG9wKS9qRWxlbWVudC5oZWlnaHQoKSkqMisxO1xyXG4gICAgcmV0dXJuIHRoaXMuY29vcmRzO1xyXG4gIH1cclxuXHJcbiAgb25Nb3VzZURvd24oZSkge1xyXG4gICAgaWYoIXRoaXMuZW5hYmxlZCkgcmV0dXJuO1xyXG5cclxuICAgIGlmKHRoaXMuc2VsZWN0ZWQpIHRoaXMub25Nb3VzZVVwKGUpO1xyXG5cclxuICAgIHRoaXMuc2V0Q29vcmRzRnJvbUV2ZW50KGUpO1xyXG4gIFx0dGhpcy5yYXljYXN0ZXIuc2V0RnJvbUNhbWVyYSh0aGlzLmNvb3JkcywgdGhpcy5jYW1lcmEpO1xyXG5cclxuICBcdGNvbnN0IGludGVyc2VjdHMgPSB0aGlzLnJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzKHRoaXMudGhyZWVzKTtcclxuICBcdGlmKGludGVyc2VjdHMubGVuZ3RoID4gMCkge1xyXG4gICAgICBjb25zdCBzZWxlY3RlZCA9IGludGVyc2VjdHNbMF0ub2JqZWN0O1xyXG4gICAgICBpZighdGhpcy5vblBpY2tDYWxsYmFjayhpbnRlcnNlY3RzWzBdKSkgcmV0dXJuO1xyXG4gICAgICBjb25zdCB2ID0gaW50ZXJzZWN0c1swXS5wb2ludC5jbG9uZSgpO1xyXG4gICAgICB0aGlzLmRpc3RhbmNlID0gdi5zdWIodGhpcy5yYXljYXN0ZXIucmF5Lm9yaWdpbikubGVuZ3RoKCk7O1xyXG4gICAgICB0aGlzLmNvbnRyb2xzU3RhdGUgPSB0aGlzLnZpc3VhbC5nZXRDb250cm9sc1N0YXRlKCk7XHJcbiAgICAgIHRoaXMudmlzdWFsLnNldENvbnRyb2xzU3RhdGUoZmFsc2UpO1xyXG4gICAgICB0aGlzLnBsYW5lLnNldEZyb21Ob3JtYWxBbmRDb3BsYW5hclBvaW50KHRoaXMudmlzdWFsLmNhbWVyYS5nZXRXb3JsZERpcmVjdGlvbih0aGlzLnBsYW5lLm5vcm1hbCksIGludGVyc2VjdHNbMF0ucG9pbnQpO1xyXG4gICAgICAvL3RoaXMucGxhbmUuc2V0RnJvbU5vcm1hbEFuZENvcGxhbmFyUG9pbnQodGhpcy5wbGFuZS5ub3JtYWwuc2V0KDAsMCwxKSwgbmV3IFRIUkVFLlZlY3RvcjMoMCwwLDApKTtcclxuICAgICAgdGhpcy5zZWxlY3RlZCA9IHNlbGVjdGVkO1xyXG4gIFx0fVxyXG5cclxuICB9XHJcblxyXG4gIG9uTW91c2VNb3ZlKGUpIHtcclxuICAgIGlmKCF0aGlzLmVuYWJsZWQpIHJldHVybjtcclxuICBcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgXHRpZih0aGlzLnNlbGVjdGVkKSB7XHJcbiAgICAgIHRoaXMuc2V0Q29vcmRzRnJvbUV2ZW50KGUpO1xyXG4gICAgXHR0aGlzLnJheWNhc3Rlci5zZXRGcm9tQ2FtZXJhKHRoaXMuY29vcmRzLCB0aGlzLmNhbWVyYSk7XHJcblx0ICAgIGlmKHRoaXMucmF5Y2FzdGVyLnJheS5pbnRlcnNlY3RQbGFuZSh0aGlzLnBsYW5lLCB0aGlzLmludGVyc2VjdGlvbikpIHtcclxuICAgICAgICBpZighdGhpcy5vbkRyYWdDYWxsYmFjayh0aGlzLmludGVyc2VjdGlvbikpIHRoaXMub25Nb3VzZVVwKGUpO1xyXG4gICAgICB9LyoqL1xyXG4gICAgICAvL3RoaXMuaW50ZXJzZWN0aW9uLmNvcHkodGhpcy5yYXljYXN0ZXIucmF5LmRpcmVjdGlvbikubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIodGhpcy5kaXN0YW5jZSkuYWRkKHRoaXMucmF5Y2FzdGVyLnJheS5vcmlnaW4pOy8qKi9cclxuICAgICAgLy9pZighdGhpcy5vbkRyYWdDYWxsYmFjayh0aGlzLnNlbGVjdGVkLCB0aGlzLmludGVyc2VjdGlvbikpIHRoaXMub25Nb3VzZVVwKGUpO1xyXG4gIFx0fVxyXG4gIH1cclxuXHJcbiAgb25Nb3VzZVVwKGUpIHtcclxuICAgIGlmKHRoaXMuc2VsZWN0ZWQpIHtcclxuICAgICAgdGhpcy5vblJlbGVhc2VDYWxsYmFjaygpO1xyXG4gIFx0XHR0aGlzLnNlbGVjdGVkID0gbnVsbDtcclxuICAgICAgdGhpcy52aXN1YWwuc2V0Q29udHJvbHNTdGF0ZSh0aGlzLmNvbnRyb2xzU3RhdGUpO1xyXG4gIFx0fVxyXG4gICAgaWYoIXRoaXMuZW5hYmxlZCkgcmV0dXJuO1xyXG4gIFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvRHJhZy5qcyIsImltcG9ydCB7JH0gZnJvbSAnLi4vbGlicyc7XHJcbnJlcXVpcmUoJ2ltcG9ydHMtbG9hZGVyP2RlZmluZT0+ZmFsc2UhanF1ZXJ5LW1vdXNld2hlZWwnKSgkKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV2ZW50c1RvQWN0aW9ucyB7XHJcblxyXG4gIHN0YXRpYyBtb2RLZXlzID0ge1xyXG4gICAgQ3RybDogMSxcclxuICAgIFNoaWZ0OiAyLFxyXG4gICAgQWx0OiA0XHJcbiAgfTtcclxuXHJcbiAgc3RhdGljIG1vdXNlQnV0dG9ucyA9IHtcclxuICAgIExlZnQ6IDAsXHJcbiAgICBNaWRkbGU6IDEsXHJcbiAgICBSaWdodDogMlxyXG4gIH07XHJcblxyXG4gIHN0YXRpYyBnZXRFdmVudEZsYWdzKGUpIHtcclxuICAgIHJldHVybiBlLmN0cmxLZXk8PDAgfCBlLnNoaWZ0S2V5PDwxIHwgZS5hbHRLZXk8PDI7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0UG9zaXRpb24odG91Y2hlcykge1xyXG4gICAgbGV0IHgsIHk7XHJcbiAgICBpZih0b3VjaGVzLmxlbmd0aD09PTIpIHtcclxuICAgICAgeCA9IHRvdWNoZXNbMV0ucGFnZVgtdG91Y2hlc1swXS5wYWdlWDtcclxuICAgICAgeSA9IHRvdWNoZXNbMV0ucGFnZVktdG91Y2hlc1swXS5wYWdlWTtcclxuICAgICAgeSA9IC1NYXRoLnNxcnQoeCp4K3kqeSk7XHJcbiAgICAgIHggPSAwO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHggPSB0b3VjaGVzWzBdLnBhZ2VYO1xyXG4gICAgICB5ID0gdG91Y2hlc1swXS5wYWdlWTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHgsXHJcbiAgICAgIHlcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBhY3Rpb25zKSB7XHJcbiAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zIHx8IHt9O1xyXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICAgIHRoaXMuZG9jID0gZWxlbWVudFswXS5vd25lckRvY3VtZW50O1xyXG4gICAgdGhpcy53bmQgPSB0aGlzLmRvYy5kZWZhdWx0VmlldztcclxuICAgIHRoaXMuZW5hYmxlZCA9IHRydWU7XHJcblxyXG4gICAgdGhpcy5iaW5kcyA9IHtcclxuICAgICAgY29udGV4dE1lbnU6IHRoaXMuY29udGV4dE1lbnUuYmluZCh0aGlzKSxcclxuXHJcbiAgICAgIG1vdXNlRG93bjogdGhpcy5tb3VzZURvd24uYmluZCh0aGlzKSxcclxuICAgICAgbW91c2VNb3ZlOiB0aGlzLm1vdXNlTW92ZS5iaW5kKHRoaXMpLFxyXG4gICAgICBtb3VzZVVwOiB0aGlzLm1vdXNlVXAuYmluZCh0aGlzKSxcclxuICAgICAgbW91c2VXaGVlbDogdGhpcy5tb3VzZVdoZWVsLmJpbmQodGhpcyksXHJcblxyXG4gICAgICBtb3VzZU1vdmVEb2M6IHRoaXMubW91c2VNb3ZlRG9jLmJpbmQodGhpcyksXHJcbiAgICAgIG1vdXNlVXBEb2M6IHRoaXMubW91c2VVcERvYy5iaW5kKHRoaXMpLFxyXG5cclxuICAgICAgY2xpY2s6IHRoaXMuY2xpY2suYmluZCh0aGlzKSxcclxuICAgICAgZGJsY2xpY2s6IHRoaXMuZGJsY2xpY2suYmluZCh0aGlzKSxcclxuXHJcbiAgICAgIHRvdWNoU3RhcnQ6IHRoaXMudG91Y2hTdGFydC5iaW5kKHRoaXMpLFxyXG4gICAgICB0b3VjaE1vdmU6IHRoaXMudG91Y2hNb3ZlLmJpbmQodGhpcyksXHJcbiAgICAgIHRvdWNoRW5kOiB0aGlzLnRvdWNoRW5kLmJpbmQodGhpcyksXHJcblxyXG4gICAgICBrZXlEb3duOiB0aGlzLmtleURvd24uYmluZCh0aGlzKSxcclxuICAgICAga2V5UHJlc3M6IHRoaXMua2V5UHJlc3MuYmluZCh0aGlzKSxcclxuICAgICAga2V5VXA6IHRoaXMua2V5VXAuYmluZCh0aGlzKVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmVsZW1lbnQub24oJ2NvbnRleHRtZW51JywgdGhpcy5iaW5kcy5jb250ZXh0TWVudSk7XHJcblxyXG4gICAgdGhpcy5lbGVtZW50Lm9uKCdtb3VzZWRvd24nLCB0aGlzLmJpbmRzLm1vdXNlRG93bik7XHJcbiAgICB0aGlzLmVsZW1lbnQub24oJ21vdXNlbW92ZScsIHRoaXMuYmluZHMubW91c2VNb3ZlKTtcclxuICAgIHRoaXMuZWxlbWVudC5vbignbW91c2V1cCcsIHRoaXMuYmluZHMubW91c2VVcCk7XHJcbiAgICB0aGlzLmVsZW1lbnQub24oJ21vdXNld2hlZWwnLCB0aGlzLmJpbmRzLm1vdXNlV2hlZWwpO1xyXG5cclxuICAgICQodGhpcy5kb2MpLm9uKCdtb3VzZW1vdmUnLCB0aGlzLmJpbmRzLm1vdXNlTW92ZURvYyk7XHJcbiAgICAkKHRoaXMuZG9jKS5vbignbW91c2V1cCcsIHRoaXMuYmluZHMubW91c2VVcERvYyk7XHJcblxyXG4gICAgdGhpcy5lbGVtZW50Lm9uKCdjbGljaycsIHRoaXMuYmluZHMuY2xpY2spO1xyXG4gICAgdGhpcy5lbGVtZW50Lm9uKCdkYmxjbGljaycsIHRoaXMuYmluZHMuZGJsY2xpY2spO1xyXG5cclxuICAgIHRoaXMuZWxlbWVudC5vbigndG91Y2hzdGFydCcsIHRoaXMuYmluZHMudG91Y2hTdGFydCk7XHJcbiAgICB0aGlzLmVsZW1lbnQub24oJ3RvdWNobW92ZScsIHRoaXMuYmluZHMudG91Y2hNb3ZlKTtcclxuICAgIHRoaXMuZWxlbWVudC5vbigndG91Y2hlbmQnLCB0aGlzLmJpbmRzLnRvdWNoRW5kKTtcclxuXHJcbiAgICAkKHRoaXMud25kKS5vbigna2V5ZG93bicsIHRoaXMuYmluZHMua2V5RG93bik7XHJcbiAgICAkKHRoaXMud25kKS5vbigna2V5cHJlc3MnLCB0aGlzLmJpbmRzLmtleVByZXNzKTtcclxuICAgICQodGhpcy53bmQpLm9uKCdrZXl1cCcsIHRoaXMuYmluZHMua2V5VXApO1xyXG4gIH1cclxuXHJcbiAgYWRkQWN0aW9uKGFjdGlvbiwgdHlwZSwgY29kZSwgZmxhZ3MpIHtcclxuICAgIHR5cGUgPSB0eXBlLnRvTG93ZXJDYXNlKCk7XHJcbiAgICBpZighdGhpcy5hY3Rpb25zW3R5cGVdKSB7XHJcbiAgICAgIHRoaXMuYWN0aW9uc1t0eXBlXSA9IHt9O1xyXG4gICAgfVxyXG4gICAgaWYoIXRoaXMuYWN0aW9uc1t0eXBlXVtjb2RlXSkge1xyXG4gICAgICB0aGlzLmFjdGlvbnNbdHlwZV1bY29kZV0gPSB7fVxyXG4gICAgfVxyXG4gICAgaWYoIXRoaXMuYWN0aW9uc1t0eXBlXVtjb2RlXVtmbGFnc10pIHtcclxuICAgICAgdGhpcy5hY3Rpb25zW3R5cGVdW2NvZGVdW2ZsYWdzXSA9IFtdO1xyXG4gICAgfVxyXG4gICAgdGhpcy5hY3Rpb25zW3R5cGVdW2NvZGVdW2ZsYWdzXS5wdXNoKGFjdGlvbik7XHJcbiAgfVxyXG5cclxuICBnZXRBY3Rpb25zKHR5cGUsIGNvZGUsIGZsYWdzKSB7XHJcbiAgICByZXR1cm4gKCh0aGlzLmFjdGlvbnNbdHlwZV0gfHwge30pW2NvZGVdIHx8IHt9KVtmbGFnc10gfHwgW107XHJcbiAgfVxyXG5cclxuICBmaXJlQWN0aW9ucyhhY3Rpb25zLCBlLCBkYXRhKSB7XHJcbiAgICBmb3IobGV0IGFjdGlvbiBvZiBhY3Rpb25zKSB7XHJcbiAgICAgIGFjdGlvbihlLCBkYXRhKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbnRleHRNZW51KGUpIHtcclxuICAgIGlmKHRoaXMuZW5hYmxlZCkge1xyXG4gICAgICBjb25zdCBmbGFncyA9IEV2ZW50c1RvQWN0aW9ucy5nZXRFdmVudEZsYWdzKGUpO1xyXG4gICAgICB0aGlzLmZpcmVBY3Rpb25zKHRoaXMuZ2V0QWN0aW9ucygnY29udGV4dG1lbnUnLCBlLmJ1dHRvbiwgZmxhZ3MpLCBlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG1vdXNlRG93bihlKSB7XHJcbiAgICBpZih0aGlzLnBpY2tlZCkge1xyXG4gICAgICB0aGlzLm1vdXNlVXBEb2MoKTtcclxuICAgIH1cclxuICAgIGlmKHRoaXMuZW5hYmxlZCkge1xyXG4gICAgICBjb25zdCBmbGFncyA9IEV2ZW50c1RvQWN0aW9ucy5nZXRFdmVudEZsYWdzKGUpO1xyXG4gICAgICB0aGlzLmZpcmVBY3Rpb25zKHRoaXMuZ2V0QWN0aW9ucygnbW91c2Vkb3duJywgZS5idXR0b24sIGZsYWdzKSwgZSk7XHJcbiAgICAgIHRoaXMucGlja2VkID0ge1xyXG4gICAgICAgIHg6IGUucGFnZVgsXHJcbiAgICAgICAgeTogZS5wYWdlWSxcclxuICAgICAgICBhY3Rpb25zOiB0aGlzLmdldEFjdGlvbnMoJ21vdXNlZHJhZycsIGUuYnV0dG9uLCBmbGFncylcclxuICAgICAgfTtcclxuICAgICAgdGhpcy5maXJlQWN0aW9ucyh0aGlzLnBpY2tlZC5hY3Rpb25zLCBlLCB7XHJcbiAgICAgICAgc3RhdGU6ICdzdGFydCdcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBtb3VzZU1vdmUoZSkge1xyXG4gICAgaWYodGhpcy5lbmFibGVkKSB7XHJcbiAgICAgIGNvbnN0IGZsYWdzID0gRXZlbnRzVG9BY3Rpb25zLmdldEV2ZW50RmxhZ3MoZSk7XHJcbiAgICAgIHRoaXMuZmlyZUFjdGlvbnModGhpcy5nZXRBY3Rpb25zKCdtb3VzZW1vdmUnLCBlLmJ1dHRvbiwgZmxhZ3MpLCBlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG1vdXNlTW92ZURvYyhlKSB7XHJcbiAgICBpZih0aGlzLmVuYWJsZWQgJiYgdGhpcy5waWNrZWQpIHtcclxuICAgICAgdGhpcy5maXJlQWN0aW9ucyh0aGlzLnBpY2tlZC5hY3Rpb25zLCBlLCB7XHJcbiAgICAgICAgc3RhdGU6ICdtb3ZlJyxcclxuICAgICAgICBkeDogZS5wYWdlWC10aGlzLnBpY2tlZC54LFxyXG4gICAgICAgIGR5OiBlLnBhZ2VZLXRoaXMucGlja2VkLnlcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMucGlja2VkID0ge1xyXG4gICAgICAgIHg6IGUucGFnZVgsXHJcbiAgICAgICAgeTogZS5wYWdlWSxcclxuICAgICAgICBhY3Rpb25zOiB0aGlzLnBpY2tlZC5hY3Rpb25zXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBtb3VzZVVwKGUpIHtcclxuICAgIGlmKHRoaXMuZW5hYmxlZCkge1xyXG4gICAgICBjb25zdCBmbGFncyA9IEV2ZW50c1RvQWN0aW9ucy5nZXRFdmVudEZsYWdzKGUpO1xyXG4gICAgICB0aGlzLmZpcmVBY3Rpb25zKHRoaXMuZ2V0QWN0aW9ucygnbW91c2V1cCcsIGUuYnV0dG9uLCBmbGFncyksIGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbW91c2VVcERvYyhlKSB7XHJcbiAgICBpZih0aGlzLnBpY2tlZCkge1xyXG4gICAgICB0aGlzLmZpcmVBY3Rpb25zKHRoaXMucGlja2VkLmFjdGlvbnMsIGUsIHtcclxuICAgICAgICBzdGF0ZTogJ2VuZCdcclxuICAgICAgfSk7XHJcbiAgICAgIGRlbGV0ZSB0aGlzLnBpY2tlZDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG1vdXNlV2hlZWwoZSkge1xyXG4gICAgaWYodGhpcy5lbmFibGVkKSB7XHJcbiAgICAgIGNvbnN0IGZsYWdzID0gRXZlbnRzVG9BY3Rpb25zLmdldEV2ZW50RmxhZ3MoZSk7XHJcbiAgICAgIHRoaXMuZmlyZUFjdGlvbnModGhpcy5nZXRBY3Rpb25zKCdtb3VzZXdoZWVsJywgMCwgZmxhZ3MpLCBlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNsaWNrcyhlLCB0eXBlKSB7XHJcbiAgICBpZih0aGlzLmVuYWJsZWQpIHtcclxuICAgICAgY29uc3QgZmxhZ3MgPSBFdmVudHNUb0FjdGlvbnMuZ2V0RXZlbnRGbGFncyhlKTtcclxuICAgICAgdGhpcy5maXJlQWN0aW9ucyh0aGlzLmdldEFjdGlvbnModHlwZSwgZS5idXR0b24sIGZsYWdzKSwgZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjbGljayhlKSB7XHJcbiAgICB0aGlzLmNsaWNrcyhlLCAnY2xpY2snKTtcclxuICB9XHJcblxyXG4gIGRibGNsaWNrKGUpIHtcclxuICAgIHRoaXMuY2xpY2tzKGUsICdkYmxjbGljaycpO1xyXG4gIH1cclxuXHJcbiAgdG91Y2hQaWNrKGUsIGZsYWdzLCB0b3VjaGVzKSB7XHJcbiAgICB0aGlzLnBpY2tlZCA9IHtcclxuICAgICAgLi4uRXZlbnRzVG9BY3Rpb25zLmdldFBvc2l0aW9uKHRvdWNoZXMpLFxyXG4gICAgICBhY3Rpb25zOiB0aGlzLmdldEFjdGlvbnMoJ3RvdWNoZHJhZycsIHRvdWNoZXMubGVuZ3RoLCBmbGFncyksXHJcbiAgICAgIGNvZGU6IHRvdWNoZXMubGVuZ3RoLFxyXG4gICAgICBmbGFnc1xyXG4gICAgfTtcclxuICAgIHRoaXMuZmlyZUFjdGlvbnModGhpcy5waWNrZWQuYWN0aW9ucywgZSwge1xyXG4gICAgICBzdGF0ZTogJ3N0YXJ0J1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICB0b3VjaFN0YXJ0KGUpIHtcclxuICAgIGlmKHRoaXMucGlja2VkKSB7XHJcbiAgICAgIHRoaXMudG91Y2hFbmQoZSk7XHJcbiAgICB9XHJcbiAgICBpZih0aGlzLmVuYWJsZWQpIHtcclxuICAgICAgY29uc3QgZmxhZ3MgPSBFdmVudHNUb0FjdGlvbnMuZ2V0RXZlbnRGbGFncyhlKSwgdG91Y2hlcyA9IGUudG91Y2hlcyB8fCBlLm9yaWdpbmFsRXZlbnQudG91Y2hlcztcclxuICAgICAgdGhpcy5maXJlQWN0aW9ucyh0aGlzLmdldEFjdGlvbnMoJ3RvdWNoc3RhcnQnLCB0b3VjaGVzLmxlbmd0aCwgZmxhZ3MpLCBlKTtcclxuICAgICAgdGhpcy50b3VjaFBpY2soZSwgZmxhZ3MsIHRvdWNoZXMpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdG91Y2hNb3ZlKGUpIHtcclxuICAgIGlmKHRoaXMuZW5hYmxlZCkge1xyXG4gICAgICBjb25zdCBmbGFncyA9IEV2ZW50c1RvQWN0aW9ucy5nZXRFdmVudEZsYWdzKGUpLCB0b3VjaGVzID0gZS50b3VjaGVzIHx8IGUub3JpZ2luYWxFdmVudC50b3VjaGVzO1xyXG4gICAgICB0aGlzLmZpcmVBY3Rpb25zKHRoaXMuZ2V0QWN0aW9ucygndG91Y2htb3ZlJywgdG91Y2hlcy5sZW5ndGgsIGZsYWdzKSwgZSk7XHJcbiAgICAgIGlmKHRoaXMucGlja2VkKSB7XHJcbiAgICAgICAgaWYodGhpcy5waWNrZWQuY29kZT09PXRvdWNoZXMubGVuZ3RoICYmIHRoaXMucGlja2VkLmZsYWdzPT09ZmxhZ3MpIHtcclxuICAgICAgICAgIGNvbnN0IHBvcyA9IEV2ZW50c1RvQWN0aW9ucy5nZXRQb3NpdGlvbih0b3VjaGVzKTtcclxuICAgICAgICAgIHRoaXMuZmlyZUFjdGlvbnModGhpcy5waWNrZWQuYWN0aW9ucywgZSwge1xyXG4gICAgICAgICAgICBzdGF0ZTogJ21vdmUnLFxyXG4gICAgICAgICAgICBkeDogcG9zLngtdGhpcy5waWNrZWQueCxcclxuICAgICAgICAgICAgZHk6IHBvcy55LXRoaXMucGlja2VkLnlcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgdGhpcy5waWNrZWQgPSB7XHJcbiAgICAgICAgICAgIC4uLnRoaXMucGlja2VkLFxyXG4gICAgICAgICAgICAuLi5wb3NcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy50b3VjaEVuZChlKTtcclxuICAgICAgICAgIHRoaXMudG91Y2hQaWNrKGUsIGZsYWdzLCB0b3VjaGVzKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHRvdWNoRW5kKGUpIHtcclxuICAgIGlmKHRoaXMucGlja2VkKSB7XHJcbiAgICAgIHRoaXMuZmlyZUFjdGlvbnModGhpcy5waWNrZWQuYWN0aW9ucywgZSwge1xyXG4gICAgICAgIHN0YXRlOiAnZW5kJ1xyXG4gICAgICB9KTtcclxuICAgICAgZGVsZXRlIHRoaXMucGlja2VkO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAga2V5KGUsIHR5cGUpIHtcclxuICAgIGlmKHRoaXMuZW5hYmxlZCkge1xyXG4gICAgICBjb25zdCBmbGFncyA9IEV2ZW50c1RvQWN0aW9ucy5nZXRFdmVudEZsYWdzKGUpO1xyXG4gICAgICB0aGlzLmZpcmVBY3Rpb25zKHRoaXMuZ2V0QWN0aW9ucyh0eXBlLCBlLmtleUNvZGUsIGZsYWdzKSwgZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBrZXlEb3duKGUpIHtcclxuICAgIHRoaXMua2V5KGUsICdrZXlkb3duJyk7XHJcbiAgfVxyXG5cclxuICBrZXlQcmVzcyhlKSB7XHJcbiAgICB0aGlzLmtleShlLCAna2V5cHJlc3MnKTtcclxuICB9XHJcblxyXG4gIGtleVVwKGUpIHtcclxuICAgIHRoaXMua2V5KGUsICdrZXl1cCcpO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMuZWxlbWVudC5vZmYoJ2NvbnRleHRtZW51JywgdGhpcy5iaW5kcy5jb250ZXh0TWVudSk7XHJcblxyXG4gICAgdGhpcy5lbGVtZW50Lm9mZignbW91c2Vkb3duJywgdGhpcy5iaW5kcy5tb3VzZURvd24pO1xyXG4gICAgdGhpcy5lbGVtZW50Lm9mZignbW91c2Vtb3ZlJywgdGhpcy5iaW5kcy5tb3VzZU1vdmUpO1xyXG4gICAgdGhpcy5lbGVtZW50Lm9mZignbW91c2V1cCcsIHRoaXMuYmluZHMubW91c2VVcCk7XHJcbiAgICB0aGlzLmVsZW1lbnQub2ZmKCdtb3VzZXdoZWVsJywgdGhpcy5iaW5kcy5tb3VzZVdoZWVsKTtcclxuXHJcbiAgICAkKHRoaXMuZG9jKS5vZmYoJ21vdXNlbW92ZScsIHRoaXMuYmluZHMubW91c2VNb3ZlRG9jKTtcclxuICAgICQodGhpcy5kb2MpLm9mZignbW91c2V1cCcsIHRoaXMuYmluZHMubW91c2VVcERvYyk7XHJcblxyXG4gICAgdGhpcy5lbGVtZW50Lm9mZignY2xpY2snLCB0aGlzLmJpbmRzLmNsaWNrKTtcclxuICAgIHRoaXMuZWxlbWVudC5vZmYoJ2RibGNsaWNrJywgdGhpcy5iaW5kcy5kYmxjbGljayk7XHJcblxyXG4gICAgdGhpcy5lbGVtZW50Lm9mZigndG91Y2hzdGFydCcsIHRoaXMuYmluZHMudG91Y2hTdGFydCk7XHJcbiAgICB0aGlzLmVsZW1lbnQub2ZmKCd0b3VjaG1vdmUnLCB0aGlzLmJpbmRzLnRvdWNoTW92ZSk7XHJcbiAgICB0aGlzLmVsZW1lbnQub2ZmKCd0b3VjaGVuZCcsIHRoaXMuYmluZHMudG91Y2hFbmQpO1xyXG5cclxuICAgICQodGhpcy53bmQpLm9mZigna2V5ZG93bicsIHRoaXMuYmluZHMua2V5RG93bik7XHJcbiAgICAkKHRoaXMud25kKS5vZmYoJ2tleXByZXNzJywgdGhpcy5iaW5kcy5rZXlQcmVzcyk7XHJcbiAgICAkKHRoaXMud25kKS5vZmYoJ2tleXVwJywgdGhpcy5iaW5kcy5rZXlVcCk7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9FdmVudHNUb0FjdGlvbnMuanMiLCJpbXBvcnQgeyQsIGh0bWwyY2FudmFzfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IEltYWdlQmFzZSBmcm9tICcuL0ltYWdlQmFzZSc7XHJcbmltcG9ydCBCYXNlTWF0aFV0aWxzIGZyb20gJy4vQmFzZU1hdGhVdGlscyc7XHJcbmltcG9ydCBEb20ySW1hZ2UgZnJvbSAnLi9Eb20ySW1hZ2UnO1xyXG5pbXBvcnQgRG9jTW91c2VTaW11bGF0b3IgZnJvbSAnLi9Eb2NNb3VzZVNpbXVsYXRvcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnRlcmFjdGl2ZUltYWdlIGV4dGVuZHMgSW1hZ2VCYXNlIHtcclxuXHJcbiAgY29uc3RydWN0b3IoY29udGV4dCwgd2lkdGgsIGhlaWdodCwgY29sb3IsIHNyYywgY2FjaGUsIGluamVjdG9yKSB7XHJcbiAgICBzdXBlcihjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LCBjb2xvcik7XHJcblxyXG4gICAgdGhpcy5pSWQgPSAnaScrQmFzZU1hdGhVdGlscy5nZXRVbmlxdWUoKTtcclxuICAgIGNvbnN0IGpGcmFtZSA9ICQoJzxpZnJhbWUgaWQ9XCInK3RoaXMuaUlkKydcIiBzcmM9XCInICsgc3JjICsgJ1wiIHN0eWxlPVwicG9zaXRpb246IGZpeGVkOyBsZWZ0OiAtMTAwMHB4O1wiPjwvaWZyYW1lPicpO1xyXG4gICAgJCh0aGlzLmRvYy5ib2R5KS5hcHBlbmQoakZyYW1lKTtcclxuICAgIHRoaXMuZnJhbWUgPSBqRnJhbWVbMF07XHJcblxyXG4gICAgdGhpcy5iaW5kcyA9IHt9O1xyXG5cclxuICAgIGlmKGluamVjdG9yKSB7XHJcbiAgICAgIGluamVjdG9yKHRoaXMuZnJhbWUuY29udGVudFdpbmRvdyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYodGhpcy5kb2MuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnd3d3Lmh0dHA6Ly93My5vcmcvVFIvU1ZHMTEvZmVhdHVyZSNFeHRlbnNpYmlsaXR5JywgJzEuMScpKSB7IC8vIHN2ZyBmb3JlaWduT2JqZWN0IHJlbmRlcmVyXHJcbiAgICAgIHRoaXMuaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgdGhpcy5iaW5kcy5pbWFnZUxvYWQgPSAoKT0+IHtcclxuICAgICAgICB0aGlzLnJlbmRlckltYWdlKHRoaXMuaW1hZ2UpO1xyXG4gICAgICAgIHRoaXMuZmluaXNoUmVuZGVyKCk7XHJcbiAgICAgIH07XHJcbiAgICAgICQodGhpcy5pbWFnZSkub24oJ2xvYWQnLCB0aGlzLmJpbmRzLmltYWdlTG9hZCk7XHJcbiAgICAgIHRoaXMuc3ZnUmVuZGVyID0gbmV3IERvbTJJbWFnZSh0aGlzLmZyYW1lLmNvbnRlbnRXaW5kb3csIHRoaXMuZnJhbWUuY29udGVudERvY3VtZW50LCBjYWNoZSk7XHJcbiAgICB9IC8vIG90aGVyd2lzZSAtIGh0bWwyY2FudmFzXHJcblxyXG4gICAgdGhpcy5iaW5kcy5mcmFtZUxvYWQgPSAoKT0+IHtcclxuICAgICAgaWYofnRoaXMuZnJhbWUuY29udGVudERvY3VtZW50LnRpdGxlLmluZGV4T2YoJzQwNCcpKSB7XHJcbiAgICAgICAgdGhpcy5zdGFydFJlbmRlciA9ICgpPT4ge1xyXG4gICAgICAgICAgdGhpcy5yZW5kZXJOb3RGb3VuZFBhZ2UoKTtcclxuICAgICAgICAgIHRoaXMuZmluaXNoUmVuZGVyKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmZpbmlzaExvYWQoKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpPT4ge1xyXG4gICAgICAgICAgaWYodGhpcy5mcmFtZSkge1xyXG4gICAgICAgICAgICB0aGlzLndpZHRoID0gJCh0aGlzLmZyYW1lLmNvbnRlbnREb2N1bWVudC5ib2R5KS53aWR0aCgpO1xyXG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9ICQodGhpcy5mcmFtZS5jb250ZW50RG9jdW1lbnQuYm9keSkuaGVpZ2h0KCk7XHJcbiAgICAgICAgICAgIGpGcmFtZS5jc3MoJ3dpZHRoJywgdGhpcy53aWR0aCsncHgnKS5jc3MoJ2hlaWdodCcsIHRoaXMuaGVpZ2h0KydweCcpO1xyXG4gICAgICAgICAgICBqRnJhbWUub2Zmc2V0KHtsZWZ0OiAtdGhpcy53aWR0aC0xMDAsIHRvcDogMH0pO1xyXG4gICAgICAgICAgICBpZih0aGlzLnN2Z1JlbmRlcikge1xyXG4gICAgICAgICAgICAgIHRoaXMuc2ltdWxhdG9yID0gbmV3IERvY01vdXNlU2ltdWxhdG9yKGpGcmFtZSwgdGhpcy5mcmFtZS5jb250ZW50RG9jdW1lbnQuYm9keSwgdGhpcy5lbGVtZW50KTtcclxuICAgICAgICAgICAgICB0aGlzLnNpbXVsYXRvci5hZGREb2NDaGFuZ2VDbGIodGhpcy5maW5pc2hMb2FkLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRSZW5kZXIgPSAoKT0+IHtcclxuICAgICAgICAgICAgICB0aGlzLnJlbmRlcigpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0aGlzLmZpbmlzaExvYWQoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LCA1MDApO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgJCh0aGlzLmZyYW1lLmNvbnRlbnRXaW5kb3cpLm9uKCdsb2FkJywgdGhpcy5iaW5kcy5mcmFtZUxvYWQpO1xyXG4gIH1cclxuXHJcbiAgZ2V0U2ltdWxhdGVkRG9jKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZnJhbWUuY29udGVudERvY3VtZW50O1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgaWYodGhpcy5zdmdSZW5kZXIpIHtcclxuICAgICAgdGhpcy5zdmdSZW5kZXIudG9TdmcodGhpcy5zaW11bGF0b3IuZWxlbWVudCwge2hlaWdodDogdGhpcy5oZWlnaHQrJ3B4Jywgd2lkdGg6IHRoaXMud2lkdGgrJ3B4J30pXHJcbiAgICAgICAgLnRoZW4oKGRhdGFVcmwpPT4ge1xyXG4gICAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBkYXRhVXJsO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKChlcnJvcik9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdEb20ySW1hZ2U6ICcsIGVycm9yKTtcclxuICAgICAgICAgIHRoaXMucmVuZGVyQmxhbmtQYWdlKCk7XHJcbiAgICAgICAgICB0aGlzLmZpbmlzaFJlbmRlcigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGh0bWwyY2FudmFzKHRoaXMuZnJhbWUuY29udGVudERvY3VtZW50LmJvZHksIHt0aW1lb3V0OiAzMDAwMH0pLlxyXG4gICAgICAgIHRoZW4oKGNhbnZhcyk9PiB7XHJcbiAgICAgICAgICB0aGlzLnJlbmRlckltYWdlKGNhbnZhcyk7XHJcbiAgICAgICAgICB0aGlzLmZpbmlzaFJlbmRlcigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgICQodGhpcy5pbWFnZSkub2ZmKCdsb2FkJywgdGhpcy5iaW5kcy5pbWFnZUxvYWQpO1xyXG4gICAgJCh0aGlzLmZyYW1lLmNvbnRlbnRXaW5kb3cpLm9mZignbG9hZCcsIHRoaXMuYmluZHMuZnJhbWVMb2FkKTtcclxuICAgICQodGhpcy5kb2MuYm9keSkuZmluZCgnIycrdGhpcy5pSWQpLnJlbW92ZSgpO1xyXG4gICAgaWYodGhpcy5pbWFnZSkge1xyXG4gICAgICB0aGlzLmltYWdlLnNyYyA9ICcnO1xyXG4gICAgICBkZWxldGUgdGhpcy5pbWFnZTtcclxuICAgIH1cclxuICAgIHRoaXMuZnJhbWUuc3JjID0gJyc7XHJcbiAgICBkZWxldGUgdGhpcy5mcmFtZTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG4gIHNpbXVsYXRlKGUsIGRvYywgeCwgeSkge1xyXG4gICAgaWYodGhpcy5zaW11bGF0b3IpIHtcclxuICAgICAgdGhpcy5zaW11bGF0b3Iuc2ltdWxhdGUoZSwgZG9jLCB4LCB5KTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0ludGVyYWN0aXZlSW1hZ2UuanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgR3JhcGhVdGlscyBmcm9tICcuL0dyYXBoVXRpbHMnO1xyXG5pbXBvcnQgTWF0aFV0aWxzIGZyb20gJy4vTWF0aFV0aWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvYWRpbmdBbmltYXRpb24ge1xyXG5cclxuICBkeSh0LHkpIHtcclxuICAgIGNvbnN0IHc9eVswXSwgYT15WzFdO1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgLXRoaXMuZypNYXRoLmNvcyhhKSxcclxuICAgICAgd1xyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIGludGVncmF0ZShUKSB7XHJcbiAgICBsZXQgdD0wLCBkdD10aGlzLnAuZHQsIG9zID0gdGhpcy5vcztcclxuICAgIHdoaWxlKHQ8VCkge1xyXG4gICAgICBpZih0K2R0PlQpIHtcclxuICAgICAgICBkdD1ULXQ7XHJcbiAgICAgIH1cclxuICAgICAgb3M9TWF0aFV0aWxzLnJrNCh0aGlzLmR5LmJpbmQoe2c6IHRoaXMucC5nfSksIDAsIGR0LCBvcyk7XHJcbiAgICAgIHQrPWR0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9zO1xyXG4gIH1cclxuXHJcbiAgY2FsY1RpbWVUbyh0YXJnZXQpIHtcclxuICAgIGxldCB0PTAsIGR0PXRoaXMucC5kdCwgb3MgPSB0aGlzLm9zO1xyXG4gICAgd2hpbGUoTWF0aC5hYnMob3NbMV0tdGFyZ2V0KT4xZS00KSB7XHJcbiAgICAgIGNvbnN0IG5vcz1NYXRoVXRpbHMucms0KHRoaXMuZHkuYmluZCh7ZzogdGhpcy5wLmd9KSwgMCwgZHQsIG9zKTtcclxuICAgICAgaWYobm9zWzBdPDAgJiYgbm9zWzFdPHRhcmdldCB8fCBub3NbMF0+MCAmJiBub3NbMV0+dGFyZ2V0KSB7XHJcbiAgICAgICAgZHQvPTI7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgb3MgPSBub3M7XHJcbiAgICAgICAgdCs9ZHQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0O1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKFQpIHtcclxuICAgIHRoaXMub3MgPSB0aGlzLmludGVncmF0ZShUKTtcclxuXHJcbiAgICB0aGlzLnQrPVRcclxuICAgIGlmKHRoaXMudD49dGhpcy5wLnVwZGF0ZUludGVydmFsKSB7XHJcbiAgICAgIHRoaXMudCA9IDA7XHJcbiAgICAgIGNvbnN0IHIgPSAwLjEqTWF0aC5taW4odGhpcy5jLndpZHRoLCB0aGlzLmMuaGVpZ2h0KSxcclxuICAgICAgICAgICAgYSA9IHRoaXMub3NbMV0sXHJcbiAgICAgICAgICAgIHgwID0gMC41KnRoaXMuYy53aWR0aCxcclxuICAgICAgICAgICAgeTAgPSAwLjUqdGhpcy5jLmhlaWdodCxcclxuICAgICAgICAgICAgY3R4ID0gdGhpcy5jdHg7XHJcblxyXG4gICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIHRoaXMuYy53aWR0aCwgdGhpcy5jLmhlaWdodCk7XHJcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgY3R4LmZpbGxTdHlsZSA9IEdyYXBoVXRpbHMuY29sb3IyUmdiYSh0aGlzLnAuY29sb3IsMSk7XHJcbiAgICAgIGN0eC5yZWN0KDAsIDAsIHRoaXMuYy53aWR0aCwgdGhpcy5jLmhlaWdodCk7XHJcbiAgICAgIGN0eC5maWxsKCk7XHJcblxyXG4gICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgIGN0eC5zaGFkb3dCbHVyID0gNTA7XHJcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBHcmFwaFV0aWxzLmNvbG9yMlJnYmEoR3JhcGhVdGlscy5pbnZlcnNlQ29sb3IodGhpcy5wLmNvbG9yLDAuOSksTWF0aC5hYnModGhpcy5vc1swXS82LjM2KSk7XHJcbiAgICAgIGN0eC5zaGFkb3dDb2xvciA9IEdyYXBoVXRpbHMuY29sb3IyUmdiYShHcmFwaFV0aWxzLmludmVyc2VDb2xvcih0aGlzLnAuY29sb3IsMSksMC45KTtcclxuICAgICAgY3R4LnNoYWRvd09mZnNldFggPSAwO1xyXG4gICAgICBjdHguc2hhZG93T2Zmc2V0WSA9IDA7XHJcbiAgICAgIGN0eC5mb250PSdib2xkICcrTWF0aC5yb3VuZCgwLjI1KnIpKydweCBBcmlhbCc7XHJcbiAgICAgIGN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJztcclxuICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xyXG4gICAgICBjdHguZmlsbFRleHQoXCJMb2FkaW5nLi4uXCIseDAseTApO1xyXG5cclxuICAgICAgY29uc3QgcHMgPSAxMCwgZGE9MipNYXRoLlBJL3BzOy8vMi41Kl9yL3JcclxuICAgICAgY3R4LnNoYWRvd0NvbG9yID0gR3JhcGhVdGlscy5jb2xvcjJSZ2JhKEdyYXBoVXRpbHMuaW52ZXJzZUNvbG9yKHRoaXMucC5jb2xvciwxKSwwLjcpO1xyXG4gICAgICBmb3IobGV0IGk9MCwgX2E9YSwgX3I9MC4yKnI7IGk8cHM7ICsraSwgX3IqPTAuOSwgX2ErPWRhKSB7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBHcmFwaFV0aWxzLmNvbG9yMlJnYmEoR3JhcGhVdGlscy5pbnZlcnNlQ29sb3IodGhpcy5wLmNvbG9yLChwcy1pKS9wcyksMC43Kihwcy1pKS9wcyk7XHJcbiAgICAgICAgY29uc3QgY3g9eDArcipNYXRoLmNvcyhfYSksIGN5PXkwLXIqTWF0aC5zaW4oX2EpLCBueD14MCtyKk1hdGguY29zKF9hK2RhKSwgbnk9eTAtcipNYXRoLnNpbihfYStkYSk7XHJcbiAgICAgICAgY3R4LnNoYWRvd09mZnNldFggPSAwLjIqKG54LWN4KTtcclxuICAgICAgICBjdHguc2hhZG93T2Zmc2V0WSA9IDAuMioobnktY3kpO1xyXG4gICAgICAgIGN0eC5hcmMoY3gsIGN5LCBfciwgMCwgTWF0aC5QSSoyLCAxKTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmKHRoaXMub25DaGFuZ2UpIHtcclxuICAgICAgICB0aGlzLm9uQ2hhbmdlKHRoaXMuYywgdGhpcy5wLmNvbG9yKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0SW1hZ2UoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMuYy53aWR0aCA9IDA7XHJcbiAgICB0aGlzLmMuaGVpZ2h0ID0gMDtcclxuICAgIGRlbGV0ZSB0aGlzLmN0eDtcclxuICAgIGRlbGV0ZSB0aGlzLmM7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVTcHJpdGUobikge1xyXG4gICAgY29uc3QgYyA9ICQoJzxjYW52YXMgd2lkdGg9XCInK3RoaXMuYy53aWR0aCpuKydcIiBoZWlnaHQ9XCInK3RoaXMuYy5oZWlnaHQrJ1wiPjwvY2FudmFzPicpWzBdLCBjdHggPSBjLmdldENvbnRleHQoJzJkJyksXHJcbiAgICB0ID0gdGhpcy5jYWxjVGltZVRvKHRoaXMub3NbMV0rTWF0aC5zaWduKHRoaXMub3NbMF0pKjIqTWF0aC5QSSksIGR0PXQvKG4rMSk7XHJcbiAgICBjb25zdCB7dXBkYXRlSW50ZXJ2YWx9ID0gdGhpcy5wO1xyXG4gICAgdGhpcy5wLnVwZGF0ZUludGVydmFsID0gMDtcclxuICAgIGZvcihsZXQgaT0wOyBpPG47ICsraSkge1xyXG4gICAgICB0aGlzLnVwZGF0ZShkdCk7XHJcbiAgICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5jLCBpKnRoaXMuYy53aWR0aCwgMCk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnAudXBkYXRlSW50ZXJ2YWwgPSB1cGRhdGVJbnRlcnZhbDtcclxuICAgIHJldHVybiBjO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3Iod2lkdGgsIGhlaWdodCwgY29sb3IpIHtcclxuICAgIGNvbnN0IGpDID0gJCgnPGNhbnZhcyB3aWR0aD1cIicrd2lkdGgrJ1wiIGhlaWdodD1cIicraGVpZ2h0KydcIj48L2NhbnZhcz4nKTtcclxuICAgIHRoaXMuYyA9IGpDWzBdO1xyXG4gICAgdGhpcy5wID0ge1xyXG4gICAgICBnOiA5LjgsXHJcbiAgICAgIGR0OiAxLzYwLFxyXG4gICAgICBjb2xvcixcclxuICAgICAgdXBkYXRlSW50ZXJ2YWw6IDAuMjVcclxuICAgIH07XHJcbiAgICB0aGlzLmN0eCA9IHRoaXMuYy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gICAgdGhpcy5vcyA9IFstMiwgTWF0aC5QSS8yXTtcclxuICAgIHRoaXMudCA9IHRoaXMucC51cGRhdGVJbnRlcnZhbDtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0xvYWRpbmdBbmltYXRpb24uanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9hZGluZ0NvbnRyb2xsZXIge1xyXG5cclxuICBjb25zdHJ1Y3Rvcih2aWV3LCBzaG93UHJvZ3Jlc3M9dHJ1ZSwgbG9hZGluZ01zZz11bmRlZmluZWQpIHtcclxuICAgIHRoaXMudmlldyA9IHZpZXc7XHJcbiAgICB0aGlzLnByb2dyZXNzID0gMDtcclxuICAgIHRoaXMuc2hvd1Byb2dyZXNzID0gc2hvd1Byb2dyZXNzO1xyXG4gICAgdGhpcy5nZXRMb2FkaW5nTXNnID0gbG9hZGluZ01zZyB8fCBMb2FkaW5nQ29udHJvbGxlci5kZWZhdWx0TG9hZGluZ01zZztcclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGRlZmF1bHRMb2FkaW5nTXNnKHByb2dyZXNzKSB7XHJcbiAgICByZXR1cm4gWydQbGVhc2Ugd2FpdC4uLiB0aGUgQXBwbGljYXRpb24gaXMgTG9hZGluZzogJywgcHJvZ3Jlc3MsICclJ10uam9pbignJyk7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgdGhpcy5zaG93UHJvZ3Jlc3MgPSBmYWxzZTtcclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gICAgZGVsZXRlIHRoaXMudmlldztcclxuICB9XHJcblxyXG4gIHNldFByb2dyZXNzKHYpIHtcclxuICAgIHRoaXMucHJvZ3Jlc3MgPSB2O1xyXG4gICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVWaWV3KCkge1xyXG4gICAgaWYodGhpcy52aWV3KSB7XHJcblxyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ3dpZExvYWRpbmdQcm9ncmVzcycsIHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy5zaG93UHJvZ3Jlc3MsXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMudmlldy5zZXRTdGF0ZSgndHh0TG9hZGluZ1Byb2dyZXNzJywge1xyXG4gICAgICAgIHZhbHVlOiB0aGlzLmdldExvYWRpbmdNc2codGhpcy5wcm9ncmVzcyksXHJcbiAgICAgICAgdmlzaWJsZTogdHJ1ZVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGZvcihsZXQgbmFtZSBvZiB0aGlzLnZpZXcuZ2V0TGlua3MoKSkge1xyXG4gICAgICAgIHRoaXMudmlldy5zZXRTdGF0ZShuYW1lLCB7XHJcbiAgICAgICAgICBlbmFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgdmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCdpbnBQYWdlcycsIHtcclxuICAgICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgICAgIHZhbHVlOiAnJ1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMudmlldy5zZXRTdGF0ZSgnaW5wUGFnZScsIHtcclxuICAgICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZTogZmFsc2UsXHJcbiAgICAgICAgdmFsdWU6ICcnXHJcbiAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0xvYWRpbmdDb250cm9sbGVyLmpzIiwiaW1wb3J0IHskfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IEV2ZW50Q29udmVydGVyIGZyb20gJy4vRXZlbnRDb252ZXJ0ZXInO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW91c2VFdmVudENvbnZlcnRlciBleHRlbmRzIEV2ZW50Q29udmVydGVyIHtcclxuXHJcbiAgY29uc3RydWN0b3Iod25kLCBkb2MsIGVsZW1lbnQpIHtcclxuICAgIHN1cGVyKHduZCwgZG9jKTtcclxuXHJcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgdGhpcy5iaW5kcyA9IHtcclxuICAgICAgY29udmVydDogdGhpcy5jb252ZXJ0LmJpbmQodGhpcylcclxuICAgIH07XHJcbiAgICAkKHRoaXMuZWxlbWVudCkub24oJ21vdXNlbW92ZSBtb3VzZWRvd24gbW91c2VvdmVyIG1vdXNlb3V0IGNsaWNrJywgdGhpcy5iaW5kcy5jb252ZXJ0KTtcclxuICAgICQodGhpcy5kb2MpLm9uKCdtb3VzZXVwJywgdGhpcy5iaW5kcy5jb252ZXJ0KTtcclxuICB9XHJcblxyXG4gIGNvbnZlcnQoZSwgZGF0YSkge1xyXG4gICAgc3VwZXIuY29udmVydCh0aGlzLmZpbHRlcj8gdGhpcy5maWx0ZXIodGhpcy5lbGVtZW50LCBlKTogZSwgZGF0YSk7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgJCh0aGlzLmVsZW1lbnQpLm9mZignbW91c2Vtb3ZlIG1vdXNlZG93biBtb3VzZW92ZXIgbW91c2VvdXQgY2xpY2snLCB0aGlzLmJpbmRzLmNvbnZlcnQpO1xyXG4gICAgJCh0aGlzLmRvYykub2ZmKCdtb3VzZXVwJywgdGhpcy5iaW5kcy5jb252ZXJ0KTtcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvTW91c2VFdmVudENvbnZlcnRlci5qcyIsImltcG9ydCB7VEhSRUV9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgTWF0aFV0aWxzIGZyb20gJy4vTWF0aFV0aWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9iamVjdDNEV2F0Y2hlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZpc3VhbCwgYm91bmRCb3hDbGIsIHRlc3RTY2FsZT10aGlzLnRlc3RTY2FsZSkge1xyXG4gICAgdGhpcy52aXN1YWwgPSB2aXN1YWw7XHJcbiAgICB0aGlzLmJvdW5kQm94Q2xiID0gYm91bmRCb3hDbGI7XHJcbiAgICB0aGlzLnRlc3RTY2FsZSA9IHRlc3RTY2FsZTtcclxuICAgIHRoaXMuY2FtZXJhID0gdmlzdWFsLmNhbWVyYTtcclxuICAgIHRoaXMuZWxlbWVudCA9IHRoaXMudmlzdWFsLmVsZW1lbnQ7XHJcbiAgICB0aGlzLmVsZW1lbnRTaXplID0ge3c6IDEsIGg6IDF9O1xyXG4gICAgdGhpcy5kZXZpY2VQaXhlbFJhdGlvID0gdGhpcy52aXN1YWwud25kLmRldmljZVBpeGVsUmF0aW8gfHwgMTtcclxuICAgIHRoaXMub3JiaXQgPSB2aXN1YWwuZ2V0T3JiaXQoKTtcclxuICAgIHRoaXMuc2NhbGUgPSAxO1xyXG5cclxuICAgIHRoaXMuZXBzID0gMWUtNDtcclxuICAgIHRoaXMudiA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XHJcbiAgICB0aGlzLmR2ID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcclxuXHJcbiAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZTtcclxuXHJcbiAgICB2aXN1YWwuYWRkUmVuZGVyQ2FsbGJhY2sodGhpcy51cGRhdGUuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgdGhpcy5vcyA9IHtcclxuICAgICAgdng6IDAsXHJcbiAgICAgIHZ5OiAwLFxyXG4gICAgICB4OiAwLFxyXG4gICAgICB5OiAwXHJcbiAgICB9O1xyXG4gICAgdGhpcy5vcmJpdC51cGRhdGUoKTtcclxuICAgIHRoaXMuY2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XHJcbiAgICBsZXQgYm94ID0gdGhpcy5jb21wdXRlQ2xpZW50Qm91bmRCb3goKSwgaz0xLjExO1xyXG4gICAgdGhpcy5tb3ZlUGFuKHt4OiAtaypib3gubWlkLngsIHk6IC1rKmJveC5taWQueX0pO1xyXG4gIH1cclxuXHJcbiAgbW92ZVBhbihkdikge1xyXG4gICAgdGhpcy5vcmJpdC5wYW4oZHYueCp0aGlzLnZpc3VhbC53aWR0aCgpLCAtZHYueSp0aGlzLnZpc3VhbC5oZWlnaHQoKSk7XHJcbiAgfVxyXG5cclxuICB2VG9DYW1lcmEodikge1xyXG4gICAgdi5wcm9qZWN0KHRoaXMuY2FtZXJhKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHg6IDAuNSp2LngsXHJcbiAgICAgIHk6IDAuNSp2LnlcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjb21wdXRlQ2xpZW50Qm91bmRCb3goKSB7XHJcbiAgICBjb25zdCBib3ggPSB0aGlzLmJvdW5kQm94Q2xiKCksXHJcbiAgICAgIHhzID0gW2JveC5taW4ueCwgYm94Lm1heC54XSxcclxuICAgICAgeXMgPSBbMCwgMF0sXHJcbiAgICAgIHpzID0gW2JveC5taW4ueiwgYm94Lm1heC56XTtcclxuXHJcbiAgICBjb25zdCBwcyA9IFtdLCByZXMgPSB7bWF4OiB7fSwgbWluOiB7fX07XHJcbiAgICBmb3IobGV0IHggb2YgeHMpIHtcclxuICAgICAgZm9yKGxldCB5IG9mIHlzKSB7XHJcbiAgICAgICAgZm9yKGxldCB6IG9mIHpzKSB7XHJcbiAgICAgICAgICBwcy5wdXNoKHRoaXMudlRvQ2FtZXJhKHRoaXMudi5zZXQoeCx5LHopKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHMuc29ydCgocDEsIHAyKT0+IHAxLngtcDIueCk7XHJcbiAgICByZXMubWluLnggPSBwc1swXS54O1xyXG4gICAgcmVzLm1heC54ID0gcHNbcHMubGVuZ3RoLTFdLng7XHJcbiAgICBwcy5zb3J0KChwMSwgcDIpPT4gcDEueS1wMi55KTtcclxuICAgIHJlcy5taW4ueSA9IHBzWzBdLnk7XHJcbiAgICByZXMubWF4LnkgPSBwc1twcy5sZW5ndGgtMV0ueTtcclxuXHJcbiAgICByZXMud2lkdGggPSByZXMubWF4LngtcmVzLm1pbi54O1xyXG4gICAgcmVzLmhlaWdodCA9IHJlcy5tYXgueS1yZXMubWluLnk7XHJcblxyXG4gICAgcmVzLm1pZCA9IHtcclxuICAgICAgeDogMC41KihyZXMubWF4LngrcmVzLm1pbi54KSxcclxuICAgICAgeTogMC41KihyZXMubWF4LnkrcmVzLm1pbi55KVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgc2V0T2JqZWN0KGJvdW5kQm94Q2xiKSB7XHJcbiAgICB0aGlzLmJvdW5kQm94Q2xiID0gYm91bmRCb3hDbGI7XHJcbiAgfVxyXG5cclxuICB0ZXN0U2NhbGUoKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGNvbXB1dGVDb3JyKEssIG1pbiwgbWF4KSB7XHJcbiAgICBsZXQgY29yciA9IDA7XHJcbiAgICBpZihLPDEpIHtcclxuICAgICAgaWYobWluPi0wLjUpIHtcclxuICAgICAgICBjb3JyID0gLTAuNS1taW47XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihtYXg8MC41KSB7XHJcbiAgICAgICAgY29yciA9IDAuNS1tYXg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBpZihtaW48LTAuNSkge1xyXG4gICAgICAgIGNvcnIgPSAtMC41LW1pbjtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKG1heD4wLjUpIHtcclxuICAgICAgICBjb3JyID0gMC41LW1heDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvcnI7XHJcbiAgfVxyXG5cclxuICBnZXRTY2FsZSgpIHtcclxuICAgIGNvbnN0IGJveCA9IHRoaXMuY29tcHV0ZUNsaWVudEJvdW5kQm94KCksXHJcbiAgICAgIEt4ID0gdGhpcy5lbGVtZW50U2l6ZS53L2JveC53aWR0aCxcclxuICAgICAgS3kgPSB0aGlzLmVsZW1lbnRTaXplLmgvYm94LmhlaWdodDtcclxuICAgIHJldHVybiAxL01hdGgubWluKEt4LCBLeSk7XHJcbiAgfVxyXG5cclxuICBjZW50ZXJWaWV3KFQpIHtcclxuICAgIGxldCBib3ggPSB0aGlzLmNvbXB1dGVDbGllbnRCb3VuZEJveCgpLFxyXG4gICAgICBLeCA9IHRoaXMuZWxlbWVudFNpemUudy9ib3gud2lkdGgsXHJcbiAgICAgIEt5ID0gdGhpcy5lbGVtZW50U2l6ZS5oL2JveC5oZWlnaHQsXHJcbiAgICAgIEsgPSBNYXRoLm1pbihLeCwgS3kpO1xyXG5cclxuICAgIGlmKHRoaXMudGVzdFNjYWxlKCkgJiYgTWF0aC5hYnMoMS9LLXRoaXMuc2NhbGUpPnRoaXMuZXBzKSB7XHJcbiAgICAgIGNvbnN0IHNjYWxlID0gMS9LKzAuMioodGhpcy5zY2FsZS0xL0spO1xyXG4gICAgICB0aGlzLm9yYml0LnNldFNjYWxlKHRoaXMub3JiaXQuZ2V0U2NhbGUoKS8oSypzY2FsZSkpO1xyXG4gICAgICB0aGlzLm9yYml0LnVwZGF0ZSgpO1xyXG4gICAgICB0aGlzLmNhbWVyYS51cGRhdGVNYXRyaXhXb3JsZCgpO1xyXG4gICAgICBib3ggPSB0aGlzLmNvbXB1dGVDbGllbnRCb3VuZEJveCgpO1xyXG4gICAgICAgIEt4ID0gdGhpcy5lbGVtZW50U2l6ZS53L2JveC53aWR0aDtcclxuICAgICAgICBLeSA9IHRoaXMuZWxlbWVudFNpemUuaC9ib3guaGVpZ2h0O1xyXG4gICAgICAgIEsgPSBNYXRoLm1pbihLeCwgS3kpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGR2ID0gdGhpcy5kdjtcclxuICAgIGlmKEs+MS10aGlzLmVwcykge1xyXG4gICAgICBkdi5zZXQoLWJveC5taWQueCwgLWJveC5taWQueSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgZHYuc2V0KHRoaXMuY29tcHV0ZUNvcnIoS3gsIGJveC5taW4ueCwgYm94Lm1heC54KSxcclxuICAgICAgICAgICAgIHRoaXMuY29tcHV0ZUNvcnIoS3ksIGJveC5taW4ueSwgYm94Lm1heC55KSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYoTWF0aC5zcXJ0KHRoaXMub3MudngqdGhpcy5vcy52eCt0aGlzLm9zLnZ5KnRoaXMub3MudnkpPjAuMDAzIHx8IGR2Lmxlbmd0aCgpPjAuMDAzKSB7XHJcbiAgICAgIGxldCBkdCA9IDEvNjAsIHQ9MCwgb3MgPSB7XHJcbiAgICAgICAgLi4udGhpcy5vcyxcclxuICAgICAgICB4OiAwLFxyXG4gICAgICAgIHk6IDBcclxuICAgICAgfTtcclxuICAgICAgb3MudGYgPSAodngsIHZ5LCB4LCB5KT0+ICh7XHJcbiAgICAgICAgeDogNzUqKGR2LngteCkvTWF0aC5wb3codGhpcy5kZXZpY2VQaXhlbFJhdGlvLCAxLjUpLFxyXG4gICAgICAgIHk6IDc1Kihkdi55LXkpL01hdGgucG93KHRoaXMuZGV2aWNlUGl4ZWxSYXRpbywgMS41KVxyXG4gICAgICB9KTtcclxuICAgICAgd2hpbGUodDxUKSB7XHJcbiAgICAgICAgaWYodCtkdD5UKSB7XHJcbiAgICAgICAgICBkdCA9IFQtdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgb3MgPSB0aGlzLmludGVncmF0ZShvcywgZHQpO1xyXG4gICAgICAgIHQgKz0gZHQ7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5tb3ZlUGFuKG9zKTtcclxuICAgICAgdGhpcy5vcyA9IG9zO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaW50ZWdyYXRlKG9zLCBkdCkge1xyXG4gICAgY29uc3QgW3Z4LCB2eSwgeCwgeV0gPSBNYXRoVXRpbHMucms0KFxyXG4gICAgICB0aGlzLmR5LmJpbmQob3MpLFxyXG4gICAgICAwLFxyXG4gICAgICBkdCxcclxuICAgICAgW29zLnZ4LCBvcy52eSwgb3MueCwgb3MueV1cclxuICAgICk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAuLi5vcyxcclxuICAgICAgdngsIHZ5LCB4LCB5XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZHkodCxZKSB7XHJcbiAgICBjb25zdCBbdngsIHZ5LCB4LCB5XSA9IFksIHZkID0gMTUsIHRmID0gdGhpcy50Zih2eCwgdnksIHgsIHkpO1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgdGYueC12ZCp2eCxcclxuICAgICAgdGYueS12ZCp2eSxcclxuICAgICAgdngsXHJcbiAgICAgIHZ5XHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKGR0KSB7XHJcbiAgICBpZih0aGlzLmVuYWJsZWQgJiYgdGhpcy5ib3VuZEJveENsYikge1xyXG4gICAgICB0aGlzLmNlbnRlclZpZXcoZHQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvT2JqZWN0M0RXYXRjaGVyLmpzIiwiaW1wb3J0IHtUSFJFRX0gZnJvbSAnLi4vbGlicyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcmJpdCBleHRlbmRzIFRIUkVFLkV2ZW50RGlzcGF0Y2hlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKG9iamVjdCwgZG9tRWxlbWVudCkge1xyXG4gICAgc3VwZXIoKTtcclxuICBcdHRoaXMub2JqZWN0ID0gb2JqZWN0O1xyXG4gIFx0dGhpcy5kb21FbGVtZW50ID0gZG9tRWxlbWVudCB8fCBkb2N1bWVudC5ib2R5O1xyXG5cclxuICBcdC8vIFNldCB0byBmYWxzZSB0byBkaXNhYmxlIHRoaXMgY29udHJvbFxyXG4gIFx0dGhpcy5lbmFibGVkID0gdHJ1ZTtcclxuXHJcbiAgXHQvLyBcInRhcmdldFwiIHNldHMgdGhlIGxvY2F0aW9uIG9mIGZvY3VzLCB3aGVyZSB0aGUgb2JqZWN0IG9yYml0cyBhcm91bmRcclxuICBcdHRoaXMudGFyZ2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuXHJcbiAgXHQvLyBIb3cgZmFyIHlvdSBjYW4gZG9sbHkgaW4gYW5kIG91dChQZXJzcGVjdGl2ZUNhbWVyYSBvbmx5KVxyXG4gIFx0dGhpcy5taW5EaXN0YW5jZSA9IDA7XHJcbiAgXHR0aGlzLm1heERpc3RhbmNlID0gSW5maW5pdHk7XHJcblxyXG4gIFx0Ly8gSG93IGZhciB5b3UgY2FuIHpvb20gaW4gYW5kIG91dChPcnRob2dyYXBoaWNDYW1lcmEgb25seSlcclxuICBcdHRoaXMubWluWm9vbSA9IDA7XHJcbiAgXHR0aGlzLm1heFpvb20gPSBJbmZpbml0eTtcclxuXHJcbiAgXHQvLyBIb3cgZmFyIHlvdSBjYW4gb3JiaXQgdmVydGljYWxseSwgdXBwZXIgYW5kIGxvd2VyIGxpbWl0cy5cclxuICBcdC8vIFJhbmdlIGlzIDAgdG8gTWF0aC5QSSByYWRpYW5zLlxyXG4gIFx0dGhpcy5taW5Qb2xhckFuZ2xlID0gMDsgLy8gcmFkaWFuc1xyXG4gIFx0dGhpcy5tYXhQb2xhckFuZ2xlID0gTWF0aC5QSTsgLy8gcmFkaWFuc1xyXG5cclxuICBcdC8vIEhvdyBmYXIgeW91IGNhbiBvcmJpdCBob3Jpem9udGFsbHksIHVwcGVyIGFuZCBsb3dlciBsaW1pdHMuXHJcbiAgXHQvLyBJZiBzZXQsIG11c3QgYmUgYSBzdWItaW50ZXJ2YWwgb2YgdGhlIGludGVydmFsIFstTWF0aC5QSSwgTWF0aC5QSSBdLlxyXG4gIFx0dGhpcy5taW5BemltdXRoQW5nbGUgPSAtSW5maW5pdHk7IC8vIHJhZGlhbnNcclxuICBcdHRoaXMubWF4QXppbXV0aEFuZ2xlID0gSW5maW5pdHk7IC8vIHJhZGlhbnNcclxuXHJcbiAgXHQvLyBTZXQgdG8gdHJ1ZSB0byBlbmFibGUgZGFtcGluZyAoaW5lcnRpYSlcclxuICBcdC8vIElmIGRhbXBpbmcgaXMgZW5hYmxlZCwgeW91IG11c3QgY2FsbCBjb250cm9scy51cGRhdGUoKSBpbiB5b3VyIGFuaW1hdGlvbiBsb29wXHJcbiAgXHR0aGlzLmVuYWJsZURhbXBpbmcgPSBmYWxzZTtcclxuICBcdHRoaXMuZGFtcGluZ0ZhY3RvciA9IDAuMjU7XHJcblxyXG4gIFx0Ly8gVGhpcyBvcHRpb24gYWN0dWFsbHkgZW5hYmxlcyBkb2xseWluZyBpbiBhbmQgb3V0OyBsZWZ0IGFzIFwiem9vbVwiIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cclxuICBcdC8vIFNldCB0byBmYWxzZSB0byBkaXNhYmxlIHpvb21pbmdcclxuICBcdHRoaXMuZW5hYmxlWm9vbSA9IHRydWU7XHJcbiAgXHR0aGlzLnpvb21TcGVlZCA9IDEuMDtcclxuXHJcbiAgXHQvLyBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSByb3RhdGluZ1xyXG4gIFx0dGhpcy5lbmFibGVSb3RhdGUgPSB0cnVlO1xyXG4gIFx0dGhpcy5yb3RhdGVTcGVlZCA9IDEuMDtcclxuXHJcbiAgXHQvLyBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSBwYW5uaW5nXHJcbiAgXHR0aGlzLmVuYWJsZVBhbiA9IHRydWU7XHJcblxyXG4gIFx0Ly8gU2V0IHRvIHRydWUgdG8gYXV0b21hdGljYWxseSByb3RhdGUgYXJvdW5kIHRoZSB0YXJnZXRcclxuICBcdC8vIElmIGF1dG8tcm90YXRlIGlzIGVuYWJsZWQsIHlvdSBtdXN0IGNhbGwgY29udHJvbHMudXBkYXRlKCkgaW4geW91ciBhbmltYXRpb24gbG9vcFxyXG4gIFx0dGhpcy5hdXRvUm90YXRlID0gZmFsc2U7XHJcbiAgXHR0aGlzLmF1dG9Sb3RhdGVTcGVlZCA9IDIuMDsgLy8gMzAgc2Vjb25kcyBwZXIgcm91bmQgd2hlbiBmcHMgaXMgNjBcclxuXHJcbiAgXHQvLyBmb3IgcmVzZXRcclxuICBcdHRoaXMudGFyZ2V0MCA9IHRoaXMudGFyZ2V0LmNsb25lKCk7XHJcbiAgXHR0aGlzLnBvc2l0aW9uMCA9IHRoaXMub2JqZWN0LnBvc2l0aW9uLmNsb25lKCk7XHJcbiAgXHR0aGlzLnpvb20wID0gdGhpcy5vYmplY3Quem9vbTtcclxuXHJcbiAgXHQvL1xyXG4gIFx0Ly8gcHVibGljIG1ldGhvZHNcclxuICBcdC8vXHJcbiAgXHR0aGlzLmdldFBvbGFyQW5nbGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgXHRcdHJldHVybiBzcGhlcmljYWwucGhpO1xyXG4gIFx0fTtcclxuXHJcbiAgXHR0aGlzLmdldEF6aW11dGhhbEFuZ2xlID0gZnVuY3Rpb24gKCkge1xyXG4gIFx0XHRyZXR1cm4gc3BoZXJpY2FsLnRoZXRhO1xyXG4gIFx0fTtcclxuXHJcbiAgXHR0aGlzLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gIFx0XHRzY29wZS50YXJnZXQuY29weShzY29wZS50YXJnZXQwKTtcclxuICBcdFx0c2NvcGUub2JqZWN0LnBvc2l0aW9uLmNvcHkoc2NvcGUucG9zaXRpb24wKTtcclxuICBcdFx0c2NvcGUub2JqZWN0Lnpvb20gPSBzY29wZS56b29tMDtcclxuXHJcbiAgXHRcdHNjb3BlLm9iamVjdC51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XHJcbiAgXHRcdHNjb3BlLmRpc3BhdGNoRXZlbnQoY2hhbmdlRXZlbnQpO1xyXG5cclxuICBcdFx0c2NvcGUudXBkYXRlKCk7XHJcbiAgXHR9O1xyXG5cclxuICAgIHRoaXMuem9vbU91dCA9IGZ1bmN0aW9uKHNwZWVkPXRoaXMuem9vbVNwZWVkKSB7XHJcbiAgICAgIGNvbnN0IF9zcGVlZCA9IHRoaXMuem9vbVNwZWVkO1xyXG4gICAgICB0aGlzLnpvb21TcGVlZCA9IHNwZWVkO1xyXG4gICAgICBkb2xseUluKGdldFpvb21TY2FsZSgpKTtcclxuICAgICAgdGhpcy56b29tU3BlZWQgPSBfc3BlZWQ7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuem9vbUluID0gZnVuY3Rpb24oc3BlZWQ9dGhpcy56b29tU3BlZWQpIHtcclxuICAgICAgY29uc3QgX3NwZWVkID0gdGhpcy56b29tU3BlZWQ7XHJcbiAgICAgIHRoaXMuem9vbVNwZWVkID0gc3BlZWQ7XHJcbiAgICAgIGRvbGx5T3V0KGdldFpvb21TY2FsZSgpKTtcclxuICAgICAgdGhpcy56b29tU3BlZWQgPSBfc3BlZWQ7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuZ2V0U2NhbGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHNjYWxlO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc2V0U2NhbGUgPSBmdW5jdGlvbihuZXdTY2FsZSkge1xyXG4gICAgICBzY2FsZSA9IG5ld1NjYWxlO1xyXG4gICAgfVxyXG5cclxuICBcdC8vIHRoaXMgbWV0aG9kIGlzIGV4cG9zZWQsIGJ1dCBwZXJoYXBzIGl0IHdvdWxkIGJlIGJldHRlciBpZiB3ZSBjYW4gbWFrZSBpdCBwcml2YXRlLi4uXHJcbiAgXHR0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIFx0XHR2YXIgb2Zmc2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuICBcdFx0Ly8gc28gY2FtZXJhLnVwIGlzIHRoZSBvcmJpdCBheGlzXHJcbiAgXHRcdHZhciBxdWF0ID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKS5zZXRGcm9tVW5pdFZlY3RvcnMob2JqZWN0LnVwLCBuZXcgVEhSRUUuVmVjdG9yMygwLCAxLCAwKSk7XHJcbiAgXHRcdHZhciBxdWF0SW52ZXJzZSA9IHF1YXQuY2xvbmUoKS5pbnZlcnNlKCk7XHJcbiAgXHRcdHZhciBsYXN0UG9zaXRpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG4gIFx0XHR2YXIgbGFzdFF1YXRlcm5pb24gPSBuZXcgVEhSRUUuUXVhdGVybmlvbigpO1xyXG5cclxuICBcdFx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAoKSB7XHJcbiAgXHRcdFx0dmFyIHBvc2l0aW9uID0gc2NvcGUub2JqZWN0LnBvc2l0aW9uO1xyXG4gIFx0XHRcdG9mZnNldC5jb3B5KHBvc2l0aW9uKS5zdWIoc2NvcGUudGFyZ2V0KTtcclxuICBcdFx0XHQvLyByb3RhdGUgb2Zmc2V0IHRvIFwieS1heGlzLWlzLXVwXCIgc3BhY2VcclxuICBcdFx0XHRvZmZzZXQuYXBwbHlRdWF0ZXJuaW9uKHF1YXQpO1xyXG4gIFx0XHRcdC8vIGFuZ2xlIGZyb20gei1heGlzIGFyb3VuZCB5LWF4aXNcclxuICBcdFx0XHRzcGhlcmljYWwuc2V0RnJvbVZlY3RvcjMob2Zmc2V0KTtcclxuICBcdFx0XHRpZihzY29wZS5hdXRvUm90YXRlKSB7XHJcbiAgXHRcdFx0XHRyb3RhdGVMZWZ0KGdldEF1dG9Sb3RhdGlvbkFuZ2xlKCkpO1xyXG4gIFx0XHRcdH1cclxuICBcdFx0XHRzcGhlcmljYWwudGhldGEgKz0gc3BoZXJpY2FsRGVsdGEudGhldGE7XHJcbiAgXHRcdFx0c3BoZXJpY2FsLnBoaSArPSBzcGhlcmljYWxEZWx0YS5waGk7XHJcbiAgXHRcdFx0Ly8gcmVzdHJpY3QgdGhldGEgdG8gYmUgYmV0d2VlbiBkZXNpcmVkIGxpbWl0c1xyXG4gIFx0XHRcdHNwaGVyaWNhbC50aGV0YSA9IE1hdGgubWF4KHNjb3BlLm1pbkF6aW11dGhBbmdsZSwgTWF0aC5taW4oc2NvcGUubWF4QXppbXV0aEFuZ2xlLCBzcGhlcmljYWwudGhldGEpKTtcclxuICBcdFx0XHQvLyByZXN0cmljdCBwaGkgdG8gYmUgYmV0d2VlbiBkZXNpcmVkIGxpbWl0c1xyXG4gIFx0XHRcdHNwaGVyaWNhbC5waGkgPSBNYXRoLm1heChzY29wZS5taW5Qb2xhckFuZ2xlLCBNYXRoLm1pbihzY29wZS5tYXhQb2xhckFuZ2xlLCBzcGhlcmljYWwucGhpKSk7XHJcbiAgXHRcdFx0c3BoZXJpY2FsLm1ha2VTYWZlKCk7XHJcbiAgXHRcdFx0c3BoZXJpY2FsLnJhZGl1cyAqPSBzY2FsZTtcclxuICBcdFx0XHQvLyByZXN0cmljdCByYWRpdXMgdG8gYmUgYmV0d2VlbiBkZXNpcmVkIGxpbWl0c1xyXG4gIFx0XHRcdHNwaGVyaWNhbC5yYWRpdXMgPSBNYXRoLm1heChzY29wZS5taW5EaXN0YW5jZSwgTWF0aC5taW4oc2NvcGUubWF4RGlzdGFuY2UsIHNwaGVyaWNhbC5yYWRpdXMpKTtcclxuICBcdFx0XHQvLyBtb3ZlIHRhcmdldCB0byBwYW5uZWQgbG9jYXRpb25cclxuICBcdFx0XHRzY29wZS50YXJnZXQuYWRkKHBhbk9mZnNldCk7XHJcbiAgXHRcdFx0b2Zmc2V0LnNldEZyb21TcGhlcmljYWwoc3BoZXJpY2FsKTtcclxuICBcdFx0XHQvLyByb3RhdGUgb2Zmc2V0IGJhY2sgdG8gXCJjYW1lcmEtdXAtdmVjdG9yLWlzLXVwXCIgc3BhY2VcclxuICBcdFx0XHRvZmZzZXQuYXBwbHlRdWF0ZXJuaW9uKHF1YXRJbnZlcnNlKTtcclxuICBcdFx0XHRwb3NpdGlvbi5jb3B5KHNjb3BlLnRhcmdldCkuYWRkKG9mZnNldCk7XHJcbiAgXHRcdFx0c2NvcGUub2JqZWN0Lmxvb2tBdChzY29wZS50YXJnZXQpO1xyXG5cclxuICBcdFx0XHRpZihzY29wZS5lbmFibGVEYW1waW5nPT09dHJ1ZSkge1xyXG4gIFx0XHRcdFx0c3BoZXJpY2FsRGVsdGEudGhldGEgKj0oMS1zY29wZS5kYW1waW5nRmFjdG9yKTtcclxuICBcdFx0XHRcdHNwaGVyaWNhbERlbHRhLnBoaSAqPSgxLXNjb3BlLmRhbXBpbmdGYWN0b3IpO1xyXG4gIFx0XHRcdH0gZWxzZSB7XHJcbiAgXHRcdFx0XHRzcGhlcmljYWxEZWx0YS5zZXQoMCwgMCwgMCk7XHJcbiAgXHRcdFx0fVxyXG5cclxuICBcdFx0XHRzY2FsZSA9IDE7XHJcbiAgXHRcdFx0cGFuT2Zmc2V0LnNldCgwLCAwLCAwKTtcclxuXHJcbiAgXHRcdFx0Ly8gdXBkYXRlIGNvbmRpdGlvbiBpczpcclxuICBcdFx0XHQvLyBtaW4oY2FtZXJhIGRpc3BsYWNlbWVudCwgY2FtZXJhIHJvdGF0aW9uIGluIHJhZGlhbnMpXjIgPiBFUFNcclxuICBcdFx0XHQvLyB1c2luZyBzbWFsbC1hbmdsZSBhcHByb3hpbWF0aW9uIGNvcyh4LzIpID0gMS14XjIgLyA4XHJcblxyXG4gIFx0XHRcdGlmKHpvb21DaGFuZ2VkIHx8XHJcbiAgXHRcdFx0XHRsYXN0UG9zaXRpb24uZGlzdGFuY2VUb1NxdWFyZWQoc2NvcGUub2JqZWN0LnBvc2l0aW9uKSA+IEVQUyB8fFxyXG4gIFx0XHRcdFx0OCAqKDEtbGFzdFF1YXRlcm5pb24uZG90KHNjb3BlLm9iamVjdC5xdWF0ZXJuaW9uKSkgPiBFUFMpIHtcclxuXHJcbiAgXHRcdFx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KGNoYW5nZUV2ZW50KTtcclxuXHJcbiAgXHRcdFx0XHRsYXN0UG9zaXRpb24uY29weShzY29wZS5vYmplY3QucG9zaXRpb24pO1xyXG4gIFx0XHRcdFx0bGFzdFF1YXRlcm5pb24uY29weShzY29wZS5vYmplY3QucXVhdGVybmlvbik7XHJcbiAgXHRcdFx0XHR6b29tQ2hhbmdlZCA9IGZhbHNlO1xyXG5cclxuICBcdFx0XHRcdHJldHVybiB0cnVlO1xyXG4gIFx0XHRcdH1cclxuICBcdFx0XHRyZXR1cm4gZmFsc2U7XHJcbiAgXHRcdH07XHJcbiAgXHR9KCk7XHJcblxyXG4gICAgdGhpcy5kaXNwb3NlID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgXHQvL1xyXG4gIFx0Ly8gaW50ZXJuYWxzXHJcbiAgXHQvL1xyXG4gIFx0dmFyIHNjb3BlID0gdGhpcztcclxuICBcdHZhciBjaGFuZ2VFdmVudCA9IHsgdHlwZTogJ2NoYW5nZScgfTtcclxuICBcdHZhciBFUFMgPSAxZS02O1xyXG4gIFx0Ly8gY3VycmVudCBwb3NpdGlvbiBpbiBzcGhlcmljYWwgY29vcmRpbmF0ZXNcclxuICBcdHZhciBzcGhlcmljYWwgPSBuZXcgVEhSRUUuU3BoZXJpY2FsKCk7XHJcbiAgXHR2YXIgc3BoZXJpY2FsRGVsdGEgPSBuZXcgVEhSRUUuU3BoZXJpY2FsKCk7XHJcblxyXG4gIFx0dmFyIHNjYWxlID0gMTtcclxuICBcdHZhciBwYW5PZmZzZXQgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG4gIFx0dmFyIHpvb21DaGFuZ2VkID0gZmFsc2U7XHJcblxyXG4gIFx0ZnVuY3Rpb24gZ2V0QXV0b1JvdGF0aW9uQW5nbGUoKSB7XHJcbiAgXHRcdHJldHVybiAyICogTWF0aC5QSSAvIDYwIC8gNjAgKiBzY29wZS5hdXRvUm90YXRlU3BlZWQ7XHJcbiAgXHR9XHJcblxyXG4gIFx0ZnVuY3Rpb24gZ2V0Wm9vbVNjYWxlKCkge1xyXG4gIFx0XHRyZXR1cm4gTWF0aC5wb3coMC45NSwgc2NvcGUuem9vbVNwZWVkKTtcclxuICBcdH1cclxuXHJcbiAgXHRmdW5jdGlvbiByb3RhdGVMZWZ0KGFuZ2xlKSB7XHJcbiAgXHRcdHNwaGVyaWNhbERlbHRhLnRoZXRhIC09IGFuZ2xlO1xyXG4gIFx0fVxyXG5cclxuICBcdGZ1bmN0aW9uIHJvdGF0ZVVwKGFuZ2xlKSB7XHJcbiAgXHRcdHNwaGVyaWNhbERlbHRhLnBoaSAtPSBhbmdsZTtcclxuICBcdH1cclxuXHJcbiAgXHR2YXIgcGFuTGVmdCA9IGZ1bmN0aW9uKCkge1xyXG4gIFx0XHR2YXIgdiA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XHJcbiAgXHRcdHJldHVybiBmdW5jdGlvbiBwYW5MZWZ0KGRpc3RhbmNlLCBvYmplY3RNYXRyaXgpIHtcclxuICBcdFx0XHR2LnNldEZyb21NYXRyaXhDb2x1bW4ob2JqZWN0TWF0cml4LCAwKTsgLy8gZ2V0IFggY29sdW1uIG9mIG9iamVjdE1hdHJpeFxyXG4gIFx0XHRcdHYubXVsdGlwbHlTY2FsYXIoLSBkaXN0YW5jZSk7XHJcbiAgXHRcdFx0cGFuT2Zmc2V0LmFkZCh2KTtcclxuICBcdFx0fTtcclxuICBcdH0oKTtcclxuXHJcbiAgXHR2YXIgcGFuVXAgPSBmdW5jdGlvbigpIHtcclxuICBcdFx0dmFyIHYgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG4gIFx0XHRyZXR1cm4gZnVuY3Rpb24gcGFuVXAoZGlzdGFuY2UsIG9iamVjdE1hdHJpeCkge1xyXG4gIFx0XHRcdHYuc2V0RnJvbU1hdHJpeENvbHVtbihvYmplY3RNYXRyaXgsIDEpOyAvLyBnZXQgWSBjb2x1bW4gb2Ygb2JqZWN0TWF0cml4XHJcbiAgXHRcdFx0di5tdWx0aXBseVNjYWxhcihkaXN0YW5jZSk7XHJcbiAgXHRcdFx0cGFuT2Zmc2V0LmFkZCh2KTtcclxuICBcdFx0fTtcclxuICBcdH0oKTtcclxuXHJcbiAgXHQvLyBkZWx0YVggYW5kIGRlbHRhWSBhcmUgaW4gcGl4ZWxzOyByaWdodCBhbmQgZG93biBhcmUgcG9zaXRpdmVcclxuICBcdHNjb3BlLnBhbiA9IGZ1bmN0aW9uKCkge1xyXG4gIFx0XHR2YXIgb2Zmc2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuICBcdFx0cmV0dXJuIGZ1bmN0aW9uIHBhbihkZWx0YVgsIGRlbHRhWSkge1xyXG4gIFx0XHRcdHZhciBlbGVtZW50ID0gc2NvcGUuZG9tRWxlbWVudDtcclxuICBcdFx0XHRpZihzY29wZS5vYmplY3QgaW5zdGFuY2VvZiBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSkge1xyXG4gIFx0XHRcdFx0Ly8gcGVyc3BlY3RpdmVcclxuICBcdFx0XHRcdHZhciBwb3NpdGlvbiA9IHNjb3BlLm9iamVjdC5wb3NpdGlvbjtcclxuICBcdFx0XHRcdG9mZnNldC5jb3B5KHBvc2l0aW9uKS5zdWIoc2NvcGUudGFyZ2V0KTtcclxuICBcdFx0XHRcdHZhciB0YXJnZXREaXN0YW5jZSA9IG9mZnNldC5sZW5ndGgoKTtcclxuICBcdFx0XHRcdC8vIGhhbGYgb2YgdGhlIGZvdiBpcyBjZW50ZXIgdG8gdG9wIG9mIHNjcmVlblxyXG4gIFx0XHRcdFx0dGFyZ2V0RGlzdGFuY2UgKj0gTWF0aC50YW4oKHNjb3BlLm9iamVjdC5mb3YgLyAyKSAqIE1hdGguUEkgLyAxODAuMCk7XHJcbiAgXHRcdFx0XHQvLyB3ZSBhY3R1YWxseSBkb24ndCB1c2Ugc2NyZWVuV2lkdGgsIHNpbmNlIHBlcnNwZWN0aXZlIGNhbWVyYSBpcyBmaXhlZCB0byBzY3JlZW4gaGVpZ2h0XHJcbiAgXHRcdFx0XHRwYW5MZWZ0KDIgKiBkZWx0YVggKiB0YXJnZXREaXN0YW5jZSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0LCBzY29wZS5vYmplY3QubWF0cml4KTtcclxuICBcdFx0XHRcdHBhblVwKDIgKiBkZWx0YVkgKiB0YXJnZXREaXN0YW5jZSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0LCBzY29wZS5vYmplY3QubWF0cml4KTtcclxuICBcdFx0XHR9IGVsc2UgaWYoc2NvcGUub2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhKSB7XHJcbiAgXHRcdFx0XHQvLyBvcnRob2dyYXBoaWNcclxuICBcdFx0XHRcdHBhbkxlZnQoZGVsdGFYICooc2NvcGUub2JqZWN0LnJpZ2h0LXNjb3BlLm9iamVjdC5sZWZ0KSAvIHNjb3BlLm9iamVjdC56b29tIC8gZWxlbWVudC5jbGllbnRXaWR0aCwgc2NvcGUub2JqZWN0Lm1hdHJpeCk7XHJcbiAgXHRcdFx0XHRwYW5VcChkZWx0YVkgKihzY29wZS5vYmplY3QudG9wLXNjb3BlLm9iamVjdC5ib3R0b20pIC8gc2NvcGUub2JqZWN0Lnpvb20gLyBlbGVtZW50LmNsaWVudEhlaWdodCwgc2NvcGUub2JqZWN0Lm1hdHJpeCk7XHJcbiAgXHRcdFx0fSBlbHNlIHtcclxuICBcdFx0XHRcdC8vIGNhbWVyYSBuZWl0aGVyIG9ydGhvZ3JhcGhpYyBub3IgcGVyc3BlY3RpdmVcclxuICBcdFx0XHRcdGNvbnNvbGUud2FybignV0FSTklORzogT3JiaXRDb250cm9scy5qcyBlbmNvdW50ZXJlZCBhbiB1bmtub3duIGNhbWVyYSB0eXBlLXBhbiBkaXNhYmxlZC4nKTtcclxuICBcdFx0XHRcdHNjb3BlLmVuYWJsZVBhbiA9IGZhbHNlO1xyXG4gIFx0XHRcdH1cclxuICBcdFx0fTtcclxuICBcdH0oKTtcclxuXHJcbiAgXHRmdW5jdGlvbiBkb2xseUluKGRvbGx5U2NhbGUpIHtcclxuICAgICAgaWYoc2NvcGUub2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEpIHtcclxuICBcdFx0XHRzY2FsZSAvPSBkb2xseVNjYWxlO1xyXG4gIFx0XHR9IGVsc2UgaWYoc2NvcGUub2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhKSB7XHJcbiAgXHRcdFx0c2NvcGUub2JqZWN0Lnpvb20gPSBNYXRoLm1heChzY29wZS5taW5ab29tLCBNYXRoLm1pbihzY29wZS5tYXhab29tLCBzY29wZS5vYmplY3Quem9vbSAqIGRvbGx5U2NhbGUpKTtcclxuICBcdFx0XHRzY29wZS5vYmplY3QudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xyXG4gIFx0XHRcdHpvb21DaGFuZ2VkID0gdHJ1ZTtcclxuICBcdFx0fSBlbHNlIHtcclxuICBcdFx0XHRjb25zb2xlLndhcm4oJ1dBUk5JTkc6IE9yYml0Q29udHJvbHMuanMgZW5jb3VudGVyZWQgYW4gdW5rbm93biBjYW1lcmEgdHlwZS1kb2xseS96b29tIGRpc2FibGVkLicpO1xyXG4gIFx0XHRcdHNjb3BlLmVuYWJsZVpvb20gPSBmYWxzZTtcclxuICBcdFx0fVxyXG4gIFx0fVxyXG5cclxuICBcdGZ1bmN0aW9uIGRvbGx5T3V0KGRvbGx5U2NhbGUpIHtcclxuICAgICAgaWYoc2NvcGUub2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEpIHtcclxuICBcdFx0XHRzY2FsZSAqPSBkb2xseVNjYWxlO1xyXG4gIFx0XHR9IGVsc2UgaWYoc2NvcGUub2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhKSB7XHJcbiAgXHRcdFx0c2NvcGUub2JqZWN0Lnpvb20gPSBNYXRoLm1heChzY29wZS5taW5ab29tLCBNYXRoLm1pbihzY29wZS5tYXhab29tLCBzY29wZS5vYmplY3Quem9vbSAvIGRvbGx5U2NhbGUpKTtcclxuICBcdFx0XHRzY29wZS5vYmplY3QudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xyXG4gIFx0XHRcdHpvb21DaGFuZ2VkID0gdHJ1ZTtcclxuICBcdFx0fSBlbHNlIHtcclxuICBcdFx0XHRjb25zb2xlLndhcm4oJ1dBUk5JTkc6IE9yYml0Q29udHJvbHMuanMgZW5jb3VudGVyZWQgYW4gdW5rbm93biBjYW1lcmEgdHlwZS1kb2xseS96b29tIGRpc2FibGVkLicpO1xyXG4gIFx0XHRcdHNjb3BlLmVuYWJsZVpvb20gPSBmYWxzZTtcclxuICBcdFx0fVxyXG4gIFx0fVxyXG5cclxuICAgIC8qIEFjdGlvbnMgKi9cclxuXHJcbiAgICBmdW5jdGlvbiByb3RhdGUoZXZlbnQsIGRhdGEpIHtcclxuICAgICAgaWYoc2NvcGUuZW5hYmxlZCAmJiBzY29wZS5lbmFibGVSb3RhdGUgJiYgZGF0YS5zdGF0ZT09PSdtb3ZlJykge1xyXG4gICAgICAgIHZhciBlbGVtZW50ID0gc2NvcGUuZG9tRWxlbWVudDtcclxuICAgICAgICAvLyByb3RhdGluZyBhY3Jvc3Mgd2hvbGUgc2NyZWVuIGdvZXMgMzYwIGRlZ3JlZXMgYXJvdW5kXHJcbiAgICAgICAgcm90YXRlTGVmdCgyICogTWF0aC5QSSAqIGRhdGEuZHggLyBlbGVtZW50LmNsaWVudFdpZHRoICogc2NvcGUucm90YXRlU3BlZWQpO1xyXG4gICAgICAgIC8vIHJvdGF0aW5nIHVwIGFuZCBkb3duIGFsb25nIHdob2xlIHNjcmVlbiBhdHRlbXB0cyB0byBnbyAzNjAsIGJ1dCBsaW1pdGVkIHRvIDE4MFxyXG4gICAgICAgIHJvdGF0ZVVwKDIgKiBNYXRoLlBJICogZGF0YS5keSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0ICogc2NvcGUucm90YXRlU3BlZWQpO1xyXG4gICAgICAgIHNjb3BlLnVwZGF0ZSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcGFuKGV2ZW50LCBkYXRhKSB7XHJcbiAgICAgIGlmKHNjb3BlLmVuYWJsZWQgJiYgc2NvcGUuZW5hYmxlUGFuICYmIGRhdGEuc3RhdGU9PT0nbW92ZScpIHtcclxuICAgICAgICBzY29wZS5wYW4oZGF0YS5keCwgZGF0YS5keSk7XHJcbiAgICAgICAgc2NvcGUudXBkYXRlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBvZmZzZXREb2xseShldmVudCwgZGF0YSkge1xyXG4gICAgICBpZihzY29wZS5lbmFibGVkICYmIHNjb3BlLmVuYWJsZVpvb20gJiYgZGF0YS5zdGF0ZT09PSdtb3ZlJykge1xyXG4gICAgICAgIGlmKGRhdGEuZHk+MCkge1xyXG4gICAgICAgICAgZG9sbHlJbihnZXRab29tU2NhbGUoKSk7XHJcbiAgICAgICAgfSBlbHNlIGlmKGRhdGEuZHk8MCkge1xyXG4gICAgICAgICAgZG9sbHlPdXQoZ2V0Wm9vbVNjYWxlKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzY29wZS51cGRhdGUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHdoZWVsRG9sbHkoZXZlbnQpIHtcclxuICAgICAgaWYoc2NvcGUuZW5hYmxlZCAmJiBzY29wZS5lbmFibGVab29tKSB7XHJcbiAgICAgICAgaWYoZXZlbnQuZGVsdGFZPjApIHtcclxuICAgICAgICAgIGRvbGx5T3V0KGdldFpvb21TY2FsZSgpKTtcclxuICAgICAgICB9IGVsc2UgaWYoZXZlbnQuZGVsdGFZPDApIHtcclxuICAgICAgICAgIGRvbGx5SW4oZ2V0Wm9vbVNjYWxlKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzY29wZS51cGRhdGUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuYWN0aW9ucyA9IHtcclxuICAgICAgcm90YXRlLFxyXG4gICAgICBwYW4sXHJcbiAgICAgIG9mZnNldERvbGx5LFxyXG4gICAgICB3aGVlbERvbGx5XHJcbiAgICB9XHJcblxyXG4gIFx0Ly8gZm9yY2UgYW4gdXBkYXRlIGF0IHN0YXJ0XHJcbiAgXHR0aGlzLnVwZGF0ZSgpO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvT3JiaXQuanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgSW1hZ2VCYXNlIGZyb20gJy4vSW1hZ2VCYXNlJztcclxuaW1wb3J0IFBkZiBmcm9tICcuL1BkZic7XHJcbmltcG9ydCBCYXNlTWF0aFV0aWxzIGZyb20gJy4vQmFzZU1hdGhVdGlscyc7XHJcbmltcG9ydCBDdXN0b21FdmVudENvbnZlcnRlciBmcm9tICcuL0N1c3RvbUV2ZW50Q29udmVydGVyJztcclxuaW1wb3J0IFBvbHlUYXJnZXQgZnJvbSAnLi90YXJnZXRzL1BvbHlUYXJnZXQnO1xyXG5cclxuaW1wb3J0IEZpbmRlciBmcm9tICcuL0ZpbmRlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQZGZJbWFnZSBleHRlbmRzIEltYWdlQmFzZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsIGNvbG9yLCBwZGYsIG4pIHtcclxuICAgIHN1cGVyKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsIGNvbG9yKTtcclxuXHJcbiAgICB0aGlzLnF1ZXJ5ID0gJyc7XHJcbiAgICB0aGlzLm4gPSBuO1xyXG4gICAgdGhpcy5wZGYgPSBwZGY7XHJcbiAgICB0aGlzLnYgPSB7eDogMCwgeTogMCwgejogMCwgc2V0OiBmdW5jdGlvbih4LHkseikge1xyXG4gICAgICB0aGlzLng9eDsgdGhpcy55PXk7IHRoaXMuej16O1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH0sIHRyYW5zZm9ybTogZnVuY3Rpb24obSkge1xyXG4gICAgICBjb25zdCB4PW0ubVswXVswXSp0aGlzLngrbS5tWzFdWzBdKnRoaXMueSttLm1bMl1bMF0qdGhpcy56LFxyXG4gICAgICAgICAgICB5PW0ubVswXVsxXSp0aGlzLngrbS5tWzFdWzFdKnRoaXMueSttLm1bMl1bMV0qdGhpcy56LFxyXG4gICAgICAgICAgICB6PW0ubVswXVsyXSp0aGlzLngrbS5tWzBdWzJdKnRoaXMueSttLm1bMl1bMF0qdGhpcy56O1xyXG4gICAgICB0aGlzLng9eDtcclxuICAgICAgdGhpcy55PXk7XHJcbiAgICAgIHRoaXMuej16O1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH19O1xyXG4gICAgdGhpcy5tID0ge206IFtbMSwwLDBdLFswLDEsMF0sWzAsMCwxXV0sIHNldDogZnVuY3Rpb24obTAwLG0wMSxtMDIsbTEwLG0xMSxtMTIsbTIwLG0yMSxtMjIpIHtcclxuICAgICAgdGhpcy5tPVtbbTAwLG0wMSxtMDJdLFttMTAsbTExLG0xMl0sW20yMCxtMjEsbTIyXV07XHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfX07XHJcblxyXG4gICAgdGhpcy5zdGFydFJlbmRlciA9ICgpPT4ge1xyXG4gICAgICB0aGlzLnBkZi5nZXRIYW5kbGVyKHRoaXMucmVuZGVyLmJpbmQodGhpcykpO1xyXG4gICAgfTtcclxuICAgIFByb21pc2UucmVzb2x2ZSgpLlxyXG4gICAgICB0aGVuKCgpPT4gdGhpcy5wZGYuZ2V0SGFuZGxlcih0aGlzLmluaXQuYmluZCh0aGlzKSkpO1xyXG4gIH1cclxuXHJcbiAgc2V0UXVlcnkocXVlcnkpIHtcclxuICAgIHRoaXMucXVlcnkgPSBxdWVyeS50cmltKCk7XHJcbiAgICBpZih0aGlzLnRleHRDb250ZW50KSB7XHJcbiAgICAgIHRoaXMuc2V0SGl0cyh0aGlzLnRleHRDb250ZW50KTtcclxuICAgICAgdGhpcy5maW5pc2hMb2FkKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZWN0U2l6ZShyKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB3aWR0aDogclsyXS1yWzBdLFxyXG4gICAgICBoZWlnaHQ6IHJbM10tclsxXVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZVBvbHkobSwgcCwgcykge1xyXG4gICAgY29uc3QgcG9seSA9IFtdLCB2ID0gdGhpcy52O1xyXG4gICAgdi5zZXQocC54LCBwLnksIDEpLnRyYW5zZm9ybShtKTtcclxuICAgIHBvbHkucHVzaCh7eDogdi54LCB5OiB2Lnl9KTtcclxuICAgIHYuc2V0KHAueCwgcC55K3MuaGVpZ2h0LCAxKS50cmFuc2Zvcm0obSk7XHJcbiAgICBwb2x5LnB1c2goe3g6IHYueCwgeTogdi55fSk7XHJcbiAgICB2LnNldChwLngrcy53aWR0aCwgcC55K3MuaGVpZ2h0LCAxKS50cmFuc2Zvcm0obSk7XHJcbiAgICBwb2x5LnB1c2goe3g6IHYueCwgeTogdi55fSk7XHJcbiAgICB2LnNldChwLngrcy53aWR0aCwgcC55LCAxKS50cmFuc2Zvcm0obSk7XHJcbiAgICBwb2x5LnB1c2goe3g6IHYueCwgeTogdi55fSk7XHJcbiAgICByZXR1cm4gcG9seTtcclxuICB9XHJcblxyXG4gIGdldFNpbXVsYXRlZERvYygpIHtcclxuICAgIHJldHVybiB0aGlzLnBhZ2U7XHJcbiAgfVxyXG5cclxuICBzaW11bGF0ZShlLCBkb2MsIHgsIHkpIHtcclxuICAgIGlmKHRoaXMuZXZlbnRDb252ZXJ0ZXIpIHtcclxuICAgICAgdGhpcy5ldmVudENvbnZlcnRlci5jb252ZXJ0KGUsIHtkb2MsIHgsIHl9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldEFubm90YXRpb25zKGFubm9zKSB7XHJcbiAgICBjb25zdCB2aWV3ID0gdGhpcy5wYWdlLnZpZXcsXHJcbiAgICAgIHZTeiA9IHRoaXMucmVjdFNpemUodmlldyksXHJcbiAgICAgIHQgPSB0aGlzLnZpZXdwb3J0LmNsb25lKHtcclxuICAgICAgICBkb250RmxpcDogdHJ1ZVxyXG4gICAgICB9KS50cmFuc2Zvcm0sXHJcbiAgICAgIHRhcmdldHMgPSBbXTtcclxuICAgIHRoaXMubS5zZXQoXHJcbiAgICAgIDEsdFsxXSwwLFxyXG4gICAgICB0WzJdLDEsMCxcclxuICAgICAgdFs0XS92U3oud2lkdGgsdFs1XS92U3ouaGVpZ2h0LDEpO1xyXG5cclxuICAgIGZvcihsZXQgYW5ubyBvZiBhbm5vcykge1xyXG4gICAgICBpZiAoYW5uby5zdWJ0eXBlPT09J0xpbmsnKSB7XHJcbiAgICAgICAgY29uc3QgcmVjdCA9IGFubm8ucmVjdCxcclxuICAgICAgICAgIGFQb3MgPSB7XHJcbiAgICAgICAgICAgIHg6IChyZWN0WzBdLXZpZXdbMF0pL3ZTei53aWR0aCxcclxuICAgICAgICAgICAgeTogKHJlY3RbMV0tdmlld1sxXSkvdlN6LmhlaWdodFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGFTeiA9IHRoaXMucmVjdFNpemUocmVjdCk7XHJcbiAgICAgICAgYVN6LndpZHRoLz12U3oud2lkdGg7XHJcbiAgICAgICAgYVN6LmhlaWdodC89dlN6LmhlaWdodDtcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSBuZXcgUG9seVRhcmdldCh0aGlzLmNyZWF0ZVBvbHkodGhpcy5tLCBhUG9zLCBhU3opKTtcclxuICAgICAgICB0YXJnZXQuYW5ubyA9IGFubm87XHJcbiAgICAgICAgdGFyZ2V0LmNhbGxiYWNrID0gdGhpcy5hbm5vQ2xiLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGFyZ2V0cy5wdXNoKHRhcmdldCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmKHRhcmdldHMubGVuZ3RoKSB7XHJcbiAgICAgIHRoaXMuZXZlbnRDb252ZXJ0ZXIgPSBuZXcgQ3VzdG9tRXZlbnRDb252ZXJ0ZXIodGhpcy53bmQsIHRoaXMuZG9jLCBQb2x5VGFyZ2V0LnRlc3QsIHRoaXMucGFnZSk7XHJcbiAgICAgIGZvcihsZXQgdGFyZ2V0IG9mIHRhcmdldHMpIHtcclxuICAgICAgICB0aGlzLmV2ZW50Q29udmVydGVyLmFkZEN1c3RvbSh0YXJnZXQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRIaXRzKHRleHRDb250ZW50KSB7XHJcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdGV4dENvbnRlbnQ7XHJcbiAgICBpZih0aGlzLnF1ZXJ5IT09JycpIHtcclxuICAgICAgdGhpcy5maW5kZXIgPSBuZXcgRmluZGVyKHRleHRDb250ZW50Lml0ZW1zLm1hcCgoaXRlbSk9PiBpdGVtLnN0ciksIHRoaXMucXVlcnksIHtjb250ZXh0czogZmFsc2V9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbmRlckhpdHMoKSB7XHJcbiAgICBpZih0aGlzLmZpbmRlcikge1xyXG4gICAgICBjb25zdCB2aWV3ID0gdGhpcy5wYWdlLnZpZXcsXHJcbiAgICAgICAgdlN6ID0gdGhpcy5yZWN0U2l6ZSh2aWV3KSxcclxuICAgICAgICB0ZXN0U3ogPSAkKCc8ZGl2IHN0eWxlPVwicG9zaXRpb246IGFic29sdXRlOyB2aXNpYmlsaXR5OiBoaWRkZW47XCI+PC9kaXY+JykuYXBwZW5kVG8oJ2JvZHknKSxcclxuICAgICAgICBiYXNlT2Zmc2V0ID0gdGVzdFN6Lm9mZnNldCgpLmxlZnQ7XHJcbiAgICAgIGZvcihsZXQgaGl0IG9mIHRoaXMuZmluZGVyLmdldEhpdHMoKSkge1xyXG4gICAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMudGV4dENvbnRlbnQuaXRlbXNbaGl0LmluZGV4XSwgdCA9IGl0ZW0udHJhbnNmb3JtO1xyXG4gICAgICAgICAgdGVzdFN6Lmh0bWwoaXRlbS5zdHIuc3Vic3RyKDAsIGhpdC5vZmZzZXQpKyc8c3Bhbj4nK2l0ZW0uc3RyLnN1YnN0cihoaXQub2Zmc2V0LCBoaXQubGVuZ3RoKSsnPC9zcGFuPicraXRlbS5zdHIuc3Vic3RyKGhpdC5vZmZzZXQraGl0Lmxlbmd0aCkpO1xyXG4gICAgICAgICAgdGVzdFN6LmNzcyh0aGlzLnRleHRDb250ZW50LnN0eWxlc1tpdGVtLmZvbnROYW1lXSk7XHJcbiAgICAgICAgICBjb25zdCB0ZXN0U3BhbiA9IHRlc3RTei5maW5kKCdzcGFuJyksXHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSB0ZXN0U3Bhbi5vZmZzZXQoKS5sZWZ0LFxyXG4gICAgICAgICAgICAgICAgd2lkdGggPSB0ZXN0U3Bhbi53aWR0aCgpLFxyXG4gICAgICAgICAgICAgICAgYmFzZVdpZHRoID0gdGVzdFN6LndpZHRoKCksXHJcbiAgICAgICAgICAgICAgICByZWxhdGl2ZU9mZnNldCA9IChvZmZzZXQtYmFzZU9mZnNldCkvYmFzZVdpZHRoLFxyXG4gICAgICAgICAgICAgICAgcmVsYXRpdmVXaWR0aCA9ICh3aWR0aCkvYmFzZVdpZHRoO1xyXG4gICAgICAgICAgdGhpcy5tLnNldChcclxuICAgICAgICAgICAgMSx0WzFdLDAsXHJcbiAgICAgICAgICAgIHRbMl0sMSwwLFxyXG4gICAgICAgICAgICB0WzRdK3JlbGF0aXZlT2Zmc2V0Kml0ZW0ud2lkdGgsdFs1XSwxKTtcclxuICAgICAgICAgIGxldCBwb2x5ID0gdGhpcy5jcmVhdGVQb2x5KHRoaXMubSwge3g6IDAsIHk6IDB9LCB7d2lkdGg6IHJlbGF0aXZlV2lkdGgqaXRlbS53aWR0aCwgaGVpZ2h0OiBpdGVtLmhlaWdodH0pO1xyXG4gICAgICAgICAgcG9seSA9IHBvbHkubWFwKChwKT0+ICh7eDogcC54L3ZTei53aWR0aCwgeTogcC55L3ZTei5oZWlnaHR9KSk7XHJcbiAgICAgICAgICB0aGlzLnJlbmRlckhpdChwb2x5KTtcclxuICAgICAgfVxyXG4gICAgICB0ZXN0U3oucmVtb3ZlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhbm5vQ2xiKGUsIGRhdGEpIHtcclxuICAgIGlmKHRoaXMuY29udGV4dC5kaXNwYXRjaEV2ZW50KSB7XHJcbiAgICAgIHRoaXMuY29udGV4dC5kaXNwYXRjaEV2ZW50KHtcclxuICAgICAgICB0eXBlOiAncGRmQW5ub3RhdGlvbicsXHJcbiAgICAgICAgZXZlbnQ6IGUsXHJcbiAgICAgICAgYW5ub3RhdGlvbjogZGF0YS50YXJnZXQuYW5ub1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGluaXQoaGFuZGxlcikge1xyXG4gICAgaGFuZGxlci5nZXRQYWdlKHRoaXMubisxKS5cclxuICAgICAgdGhlbigocGFnZSk9PiB7XHJcbiAgICAgICAgdGhpcy5wYWdlID0gcGFnZTtcclxuICAgICAgICB0aGlzLnNpemUgPSBQZGYuZ2V0UGFnZVNpemUocGFnZSk7XHJcbiAgICAgICAgcGFnZS5nZXRBbm5vdGF0aW9ucygpLlxyXG4gICAgICAgICAgdGhlbih0aGlzLnNldEFubm90YXRpb25zLmJpbmQodGhpcykpO1xyXG4gICAgICAgIHBhZ2UuZ2V0VGV4dENvbnRlbnQoKS5cclxuICAgICAgICAgIHRoZW4odGhpcy5zZXRIaXRzLmJpbmQodGhpcykpO1xyXG4gICAgICAgIGNvbnN0IHNjYWxlID0gQmFzZU1hdGhVdGlscy5jYWxjU2NhbGUodGhpcy5zaXplLndpZHRoLCB0aGlzLnNpemUuaGVpZ2h0LCB0aGlzLnJlc1csIHRoaXMucmVzSCk7XHJcbiAgICAgICAgdGhpcy52aWV3cG9ydCA9IHBhZ2UuZ2V0Vmlld3BvcnQoc2NhbGUpO1xyXG4gICAgICAgIHRoaXMucmVzVyA9IHRoaXMud2lkdGggPSB0aGlzLnZpZXdwb3J0LndpZHRoO1xyXG4gICAgICAgIHRoaXMucmVzSCA9IHRoaXMuaGVpZ2h0ID0gdGhpcy52aWV3cG9ydC5oZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5maW5pc2hMb2FkKCk7XHJcbiAgICAgIH0pLlxyXG4gICAgICBjYXRjaCgoZSk9PiB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignQ2Fubm90IGxvYWQgUERGIHBhZ2U6ICcrKHRoaXMubisxKSk7XHJcbiAgICAgICAgdGhpcy5maW5pc2hMb2FkKCk7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKGhhbmRsZXIpIHtcclxuICAgIGlmKHRoaXMucGFnZSkge1xyXG4gICAgICB0aGlzLnBhZ2UucmVuZGVyKHtcclxuICAgICAgICBjYW52YXNDb250ZXh0OiB0aGlzLnB1c2hDdHgoKSxcclxuICAgICAgICB2aWV3cG9ydDogdGhpcy52aWV3cG9ydFxyXG4gICAgICB9KS5cclxuICAgICAgdGhlbigoKT0+IHtcclxuICAgICAgICB0aGlzLnJlbmRlckhpdHMoKTtcclxuICAgICAgICB0aGlzLnBvcEN0eCgpO1xyXG4gICAgICAgIHRoaXMuZmluaXNoUmVuZGVyKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMucmVuZGVyQmxhbmtQYWdlKCk7XHJcbiAgICAgIHRoaXMuZmluaXNoUmVuZGVyKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9QZGZJbWFnZS5qcyIsImltcG9ydCB7JH0gZnJvbSAnLi4vbGlicyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWFyY2gge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihjb250YWluZXIsIHBhZ2VzKSB7XHJcbiAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgIHRoaXMucGFnZXMgPSBwYWdlcztcclxuICAgIHRoaXMucHJldlJlc3VsdHMgPSBbXTtcclxuICAgIGNvbnRhaW5lci5odG1sKGBcclxuICAgICAgPGRpdiBjbGFzcz1cInNlYXJjaFwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJxdWVyeVwiPlxyXG4gICAgICAgICAgPGlucHV0IGNsYXNzPVwiaW5wUXVlcnlcIiB0eXBlPVwidGV4dFwiIG1heGxlbmd0aD1cIjMwXCIgdmFsdWU9XCJcIiAvPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJyZXN1bHRzXCI+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInN0YXR1c1wiPlxyXG5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICBgKTtcclxuICAgIHRoaXMucXVlcnkgPSBjb250YWluZXIuZmluZCgnLnF1ZXJ5IGlucHV0Jyk7XHJcbiAgICB0aGlzLnJlc3VsdHMgPSBjb250YWluZXIuZmluZCgnLnJlc3VsdHMnKTtcclxuICAgIHRoaXMuc3RhdHVzID0gY29udGFpbmVyLmZpbmQoJy5zdGF0dXMnKTtcclxuXHJcbiAgICB0aGlzLmJpbmRzID0ge1xyXG4gICAgICBuYXZpZ2F0ZTogdGhpcy5uYXZpZ2F0ZS5iaW5kKHRoaXMpLFxyXG4gICAgICBkb1F1ZXJ5OiB0aGlzLmRvUXVlcnkuYmluZCh0aGlzKVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnF1ZXJ5Lm9uKCdrZXlkb3duJywgdGhpcy5iaW5kcy5kb1F1ZXJ5KTtcclxuICAgIHRoaXMucmVzdWx0cy5vbignY2xpY2snLCB0aGlzLmJpbmRzLm5hdmlnYXRlKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLnJlc3VsdHMub2ZmKCdjbGljaycsIHRoaXMuYmluZHMubmF2aWdhdGUpO1xyXG4gICAgdGhpcy5xdWVyeS5vZmYoJ2tleWRvd24nLCB0aGlzLmJpbmRzLmRvUXVlcnkpO1xyXG4gIH1cclxuXHJcbiAgbmF2aWdhdGUoZSkge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgaWYodGhpcy5vbk5hdmlnYXRlIT09dW5kZWZpbmVkKSB7XHJcbiAgICAgIGxldCB0YXJnZXQgPSAkKGUudGFyZ2V0KTtcclxuICAgICAgaWYoIXRhcmdldC5oYXNDbGFzcygncmVzdWx0JykpIHtcclxuICAgICAgICBjb25zdCB0ID0gdGFyZ2V0LmZpbmQoJy5yZXN1bHQnKTtcclxuICAgICAgICBpZih0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgdGFyZ2V0ID0gdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICB3aGlsZSh0YXJnZXQubGVuZ3RoICYmICF0YXJnZXQuaGFzQ2xhc3MoJ3Jlc3VsdCcpKSB7XHJcbiAgICAgICAgICAgIHRhcmdldCA9ICQodGFyZ2V0WzBdLnBhcmVudE5vZGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBjb25zdCBwYWdlID0gdGFyZ2V0LmF0dHIoJ2RhdGEnKTtcclxuICAgICAgaWYocGFnZSE9PXVuZGVmaW5lZCkge1xyXG4gICAgICAgIHRoaXMub25OYXZpZ2F0ZShwYXJzZUludChwYWdlKSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRvUXVlcnkoKSB7XHJcbiAgICBpZih0aGlzLm9uUXVlcnkpIHtcclxuICAgICAgY29uc3QgcXVlcnlTdGFtcCA9IHRoaXMucXVlcnlTdGFtcCA9IERhdGUubm93KCk7XHJcbiAgICAgIHNldFRpbWVvdXQoKCk9PiB7XHJcbiAgICAgICAgaWYocXVlcnlTdGFtcCA9PT0gdGhpcy5xdWVyeVN0YW1wKSB7XHJcbiAgICAgICAgICB0aGlzLm9uUXVlcnkodGhpcy5xdWVyeVswXS52YWx1ZS50cmltKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSwgMTAwMCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRSZXN1bHRzKHJlc3VsdHMsIGxhc3RQYWdlKSB7XHJcbiAgICBpZih0aGlzLnByZXZSZXN1bHRzLmxlbmd0aCAmJiByZXN1bHRzWzBdIT09dGhpcy5wcmV2UmVzdWx0c1swXSkge1xyXG4gICAgICB0aGlzLnByZXZSZXN1bHRzID0gW107XHJcbiAgICAgIHRoaXMucmVzdWx0cy5odG1sKCcnKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGh0bWxzID0gW107XHJcbiAgICBmb3IobGV0IGk9dGhpcy5wcmV2UmVzdWx0cy5sZW5ndGg7IGk8cmVzdWx0cy5sZW5ndGg7ICsraSkge1xyXG4gICAgICBjb25zdCByZXN1bHQgPSByZXN1bHRzW2ldO1xyXG4gICAgICBodG1scy5wdXNoKCc8ZGl2IGNsYXNzPVwicmVzdWx0XCIgZGF0YT1cIicrcmVzdWx0LnBhZ2UrJ1wiPicpO1xyXG4gICAgICAgIGh0bWxzLnB1c2goJzxhIGhyZWY9XCIjXCI+Jyk7XHJcbiAgICAgICAgICBodG1scy5wdXNoKCc8ZGl2PicrcmVzdWx0LmNvbnRleHRzLmpvaW4oJzwvZGl2PjxkaXY+JykrJzwvZGl2PicpO1xyXG4gICAgICAgIGh0bWxzLnB1c2goJzwvYT4nKTtcclxuICAgICAgaHRtbHMucHVzaCgnPC9kaXY+Jyk7XHJcbiAgICB9XHJcbiAgICAkKGh0bWxzLmpvaW4oJycpKS5hcHBlbmRUbyh0aGlzLnJlc3VsdHMpO1xyXG4gICAgdGhpcy5wcmV2UmVzdWx0cyA9IFsuLi5yZXN1bHRzXTtcclxuICAgIGlmKGxhc3RQYWdlPT09dW5kZWZpbmVkKSB7XHJcbiAgICAgIHRoaXMuc3RhdHVzLmh0bWwoJycpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMuc3RhdHVzLmh0bWwobGFzdFBhZ2UrJyBvZiAnK3RoaXMucGFnZXMpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvU2VhcmNoLmpzIiwiaW1wb3J0IHskfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IEltYWdlQmFzZSBmcm9tICcuL0ltYWdlQmFzZSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGF0aWNJbWFnZSBleHRlbmRzIEltYWdlQmFzZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsIGNvbG9yLCBzcmMpIHtcclxuICAgIHN1cGVyKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsIGNvbG9yKTtcclxuXHJcbiAgICB0aGlzLmJpbmRzID0ge31cclxuICAgIHRoaXMuaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgIHRoaXMuaW1hZ2UuY3Jvc3NPcmlnaW4gPSAnQW5vbnltb3VzJztcclxuICAgIHRoaXMuYmluZHMuaW1hZ2VMb2FkID0gKCk9PiB7XHJcbiAgICAgIHRoaXMud2lkdGggPSB0aGlzLmltYWdlLndpZHRoO1xyXG4gICAgICB0aGlzLmhlaWdodCA9IHRoaXMuaW1hZ2UuaGVpZ2h0O1xyXG4gICAgICB0aGlzLnN0YXJ0UmVuZGVyID0gKCk9PiB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJJbWFnZSh0aGlzLmltYWdlKTtcclxuICAgICAgICB0aGlzLmZpbmlzaFJlbmRlcigpO1xyXG4gICAgICB9O1xyXG4gICAgICB0aGlzLmZpbmlzaExvYWQoKTtcclxuICAgIH07XHJcbiAgICB0aGlzLmJpbmRzLmltYWdlRXJyb3IgPSAoKT0+IHtcclxuICAgICAgdGhpcy5zdGFydFJlbmRlciA9ICgpPT4ge1xyXG4gICAgICAgIHRoaXMucmVuZGVyTm90Rm91bmRQYWdlKCk7XHJcbiAgICAgICAgdGhpcy5maW5pc2hSZW5kZXIoKTtcclxuICAgICAgfTtcclxuICAgICAgdGhpcy5maW5pc2hMb2FkKCk7XHJcbiAgICB9O1xyXG4gICAgJCh0aGlzLmltYWdlKS5vbignbG9hZCcsIHRoaXMuYmluZHMuaW1hZ2VMb2FkKS5vbignZXJyb3InLCB0aGlzLmJpbmRzLmltYWdlRXJyb3IpO1xyXG4gICAgdGhpcy5pbWFnZS5zcmMgPSBzcmM7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgJCh0aGlzLmltYWdlKS5vZmYoJ2xvYWQnLCB0aGlzLmJpbmRzLmltYWdlTG9hZCkub2ZmKCdlcnJvcicsIHRoaXMuYmluZHMuaW1hZ2VFcnJvcik7XHJcbiAgICB0aGlzLmltYWdlLnNyYyA9ICcnO1xyXG4gICAgZGVsZXRlIHRoaXMuaW1hZ2U7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9TdGF0aWNJbWFnZS5qcyIsImltcG9ydCB7VEhSRUV9IGZyb20gJy4uL2xpYnMnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXh0dXJlQW5pbWF0b3Ige1xyXG4gIGNvbnN0cnVjdG9yKGltZywgdGlsZXNIb3JpeiwgdGlsZXNWZXJ0LCBudW1UaWxlcywgdGlsZURpc3BEdXJhdGlvbikge1xyXG5cclxuICAgIGNvbnN0IHRleHR1cmUgPSBuZXcgVEhSRUUuVGV4dHVyZSgpO1xyXG4gICAgdGV4dHVyZS5taW5GaWx0ZXIgPSBUSFJFRS5MaW5lYXJGaWx0ZXI7XHJcbiAgICB0ZXh0dXJlLmltYWdlID0gaW1nO1xyXG4gICAgdGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG4gIFx0Ly8gbm90ZTogdGV4dHVyZSBwYXNzZWQgYnkgcmVmZXJlbmNlLCB3aWxsIGJlIHVwZGF0ZWQgYnkgdGhlIHVwZGF0ZSBmdW5jdGlvbi5cclxuICAgIHRoaXMudGV4dHVyZSA9IHRleHR1cmU7XHJcbiAgXHR0aGlzLnRpbGVzSG9yaXpvbnRhbCA9IHRpbGVzSG9yaXo7XHJcbiAgXHR0aGlzLnRpbGVzVmVydGljYWwgPSB0aWxlc1ZlcnQ7XHJcbiAgXHQvLyBob3cgbWFueSBpbWFnZXMgZG9lcyB0aGlzIHNwcml0ZXNoZWV0IGNvbnRhaW4/XHJcbiAgXHQvLyAgdXN1YWxseSBlcXVhbHMgdGlsZXNIb3JpeiAqIHRpbGVzVmVydCwgYnV0IG5vdCBuZWNlc3NhcmlseSxcclxuICBcdC8vICBpZiB0aGVyZSBhdCBibGFuayB0aWxlcyBhdCB0aGUgYm90dG9tIG9mIHRoZSBzcHJpdGVzaGVldC5cclxuICBcdHRoaXMubnVtYmVyT2ZUaWxlcyA9IG51bVRpbGVzO1xyXG4gIFx0dGV4dHVyZS5yZXBlYXQuc2V0KDEvdGhpcy50aWxlc0hvcml6b250YWwsIDEvdGhpcy50aWxlc1ZlcnRpY2FsKTtcclxuXHJcbiAgXHQvLyBob3cgbG9uZyBzaG91bGQgZWFjaCBpbWFnZSBiZSBkaXNwbGF5ZWQ/XHJcbiAgXHR0aGlzLnRpbGVEaXNwbGF5RHVyYXRpb24gPSB0aWxlRGlzcER1cmF0aW9uO1xyXG5cclxuICBcdC8vIGhvdyBsb25nIGhhcyB0aGUgY3VycmVudCBpbWFnZSBiZWVuIGRpc3BsYXllZD9cclxuICBcdHRoaXMuY3VycmVudERpc3BsYXlUaW1lID0gMDtcclxuXHJcbiAgXHQvLyB3aGljaCBpbWFnZSBpcyBjdXJyZW50bHkgYmVpbmcgZGlzcGxheWVkP1xyXG4gIFx0dGhpcy5jdXJyZW50VGlsZSA9IDA7XHJcbiAgfVxyXG5cclxuICB1cGRhdGUobWlsbGlTZWMpIHtcclxuICAgIHRoaXMuY3VycmVudERpc3BsYXlUaW1lICs9IG1pbGxpU2VjO1xyXG4gICAgd2hpbGUodGhpcy5jdXJyZW50RGlzcGxheVRpbWUgPiB0aGlzLnRpbGVEaXNwbGF5RHVyYXRpb24pIHtcclxuICAgICAgdGhpcy5jdXJyZW50RGlzcGxheVRpbWUgLT0gdGhpcy50aWxlRGlzcGxheUR1cmF0aW9uO1xyXG4gICAgICArK3RoaXMuY3VycmVudFRpbGU7XHJcbiAgICAgIGlmKHRoaXMuY3VycmVudFRpbGUgPT0gdGhpcy5udW1iZXJPZlRpbGVzKVxyXG4gICAgICAgIHRoaXMuY3VycmVudFRpbGUgPSAwO1xyXG4gICAgICB2YXIgY3VycmVudENvbHVtbiA9IHRoaXMuY3VycmVudFRpbGUldGhpcy50aWxlc0hvcml6b250YWw7XHJcbiAgICAgIHRoaXMudGV4dHVyZS5vZmZzZXQueCA9IGN1cnJlbnRDb2x1bW4vdGhpcy50aWxlc0hvcml6b250YWw7XHJcbiAgICAgIHZhciBjdXJyZW50Um93ID0gTWF0aC5mbG9vcih0aGlzLmN1cnJlbnRUaWxlL3RoaXMudGlsZXNIb3Jpem9udGFsKTtcclxuICAgICAgdGhpcy50ZXh0dXJlLm9mZnNldC55ID0gY3VycmVudFJvdy90aGlzLnRpbGVzVmVydGljYWw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgY29uc3QgaW1nID0gdGhpcy50ZXh0dXJlLmltYWdlO1xyXG4gICAgaW1nLmhlaWdodCA9IGltZy53aWR0aCA9IDA7XHJcbiAgICB0aGlzLnRleHR1cmUuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9UZXh0dXJlQW5pbWF0b3IuanMiLCJpbXBvcnQge1RIUkVFLCAkfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IE1vdXNlRXZlbnRDb252ZXJ0ZXIgZnJvbSAnLi9Nb3VzZUV2ZW50Q29udmVydGVyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRocmVlTW91c2VFdmVudENvbnZlcnRlciBleHRlbmRzIE1vdXNlRXZlbnRDb252ZXJ0ZXIge1xyXG5cclxuICBzdGF0aWMgb2JqZWN0c1Rlc3Qob2JqZWN0MSwgb2JqZWN0Mikge1xyXG4gICAgcmV0dXJuIG9iamVjdDEgJiYgb2JqZWN0Mj8gb2JqZWN0MS5vYmplY3Q9PT1vYmplY3QyLm9iamVjdDogZmFsc2U7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgb2JqZWN0c0FuZEZhY2VzVGVzdChvYmplY3QxLCBvYmplY3QyKSB7XHJcbiAgICByZXR1cm4gb2JqZWN0MSAmJiBvYmplY3QyPyBvYmplY3QxLm9iamVjdD09PW9iamVjdDIub2JqZWN0ICYmIG9iamVjdDEuZmFjZS5tYXRlcmlhbEluZGV4PT09b2JqZWN0Mi5mYWNlLm1hdGVyaWFsSW5kZXg6IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3Iod25kLCBkb2MsIHZpc3VhbFdvcmxkLCB0ZXN0PVRocmVlTW91c2VFdmVudENvbnZlcnRlci5vYmplY3RzQW5kRmFjZXNUZXN0KSB7XHJcbiAgICBzdXBlcih3bmQsIGRvYywgdmlzdWFsV29ybGQuZWxlbWVudCk7XHJcblxyXG4gICAgdGhpcy52aXN1YWwgPSB2aXN1YWxXb3JsZDtcclxuICAgIHRoaXMuY29vcmRzID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcclxuICAgIHRoaXMucmF5Y2FzdGVyID0gdGhpcy52aXN1YWwucmF5Y2FzdGVyO1xyXG4gICAgdGhpcy5jYW1lcmEgPSB0aGlzLnZpc3VhbC5jYW1lcmE7XHJcbiAgICB0aGlzLnRocmVlcyA9IFtdO1xyXG4gICAgdGhpcy50ZXN0ID0gdGVzdDtcclxuICB9XHJcblxyXG4gIGdldENhbGxiYWNrKG9iamVjdCkge1xyXG4gICAgcmV0dXJuIG9iamVjdC5vYmplY3QudXNlckRhdGEubW91c2VDYWxsYmFjaztcclxuICB9XHJcblxyXG4gIGFkZFRocmVlKHRocmVlKSB7XHJcbiAgICB0aGlzLnRocmVlcy5wdXNoKHRocmVlKTtcclxuICB9XHJcblxyXG4gIHJlbW92ZVRocmVlKHRocmVlKSB7XHJcbiAgICBjb25zdCBpID0gdGhpcy50aHJlZXMuaW5kZXhPZih0aHJlZSk7XHJcbiAgICBpZih+aSkge1xyXG4gICAgICB0aGlzLnRocmVlcy5zcGxpY2UoaSwgMSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRDb29yZHNGcm9tRXZlbnQoZSkge1xyXG4gICAgY29uc3QgakVsZW1lbnQgPSAkKHRoaXMuZWxlbWVudCk7XHJcbiAgICBjb25zdCBvZmZzZXQgPSBqRWxlbWVudC5vZmZzZXQoKTtcclxuICAgIHRoaXMuY29vcmRzLnggPSAoKGUucGFnZVgtb2Zmc2V0LmxlZnQpL2pFbGVtZW50LndpZHRoKCkpKjItMTtcclxuICAgIHRoaXMuY29vcmRzLnkgPSAtKChlLnBhZ2VZLW9mZnNldC50b3ApL2pFbGVtZW50LmhlaWdodCgpKSoyKzE7XHJcbiAgICByZXR1cm4gdGhpcy5jb29yZHM7XHJcbiAgfVxyXG5cclxuICBnZXRPYmplY3QoZSkge1xyXG4gICAgdGhpcy5zZXRDb29yZHNGcm9tRXZlbnQoZSk7XHJcbiAgICB0aGlzLnJheWNhc3Rlci5zZXRGcm9tQ2FtZXJhKHRoaXMuY29vcmRzLCB0aGlzLmNhbWVyYSk7XHJcbiAgICBjb25zdCBpbnRlcnNlY3RzID0gdGhpcy5yYXljYXN0ZXIuaW50ZXJzZWN0T2JqZWN0cyh0aGlzLnRocmVlcyk7XHJcbiAgICByZXR1cm4gaW50ZXJzZWN0c1swXTtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1RocmVlTW91c2VFdmVudENvbnZlcnRlci5qcyIsImltcG9ydCB7JH0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBJbWFnZUZhY3RvcnkgZnJvbSAnLi9JbWFnZUZhY3RvcnknO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGh1bWJuYWlscyB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQsIGNvbnRhaW5lciwgdGh1bWJuYWlsc0NsYiwgc2l6ZSwgcHJvcHM9e2tXdG9IOiAyMTAvMjk3fSkge1xyXG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICB0aGlzLnAgPSBwcm9wcztcclxuICAgIHRoaXMudGh1bWJuYWlsc0NsYiA9IHRodW1ibmFpbHNDbGI7XHJcbiAgICB0aGlzLnNpemUgPSBzaXplO1xyXG4gICAgdGhpcy5jYW52YXMgPSAkKCc8Y2FudmFzPicpWzBdO1xyXG4gICAgdGhpcy5pbWFnZUZhY3RvcnkgPSBuZXcgSW1hZ2VGYWN0b3J5KHtcclxuICAgICAgLi4uY29udGV4dCxcclxuICAgICAgcmVuZGVyQ2FudmFzOiB0aGlzLmNhbnZhcyxcclxuICAgICAgcmVuZGVyQ2FudmFzQ3R4OiB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpXHJcbiAgICB9KTtcclxuICAgIHRoaXMudGh1bWJuYWlscyA9IFtdO1xyXG4gICAgZm9yKGxldCBpPTA7IGk8c2l6ZTsgKytpKSB7XHJcbiAgICAgIGNvbnN0IGluZm8gPSB0aGlzLnRodW1ibmFpbHNDbGIoaSk7XHJcbiAgICAgIHRoaXMudGh1bWJuYWlscy5wdXNoKHtcclxuICAgICAgICAuLi5pbmZvLFxyXG4gICAgICAgIGluZGV4OiBpLFxyXG4gICAgICAgIGxvYWRlZDogaW5mby50eXBlPT09J3RodW1ibmFpbC1pbWFnZScsXHJcbiAgICAgICAgaGVhZGluZzogbnVsbCxcclxuICAgICAgICB0aHVtYm5haWw6IG51bGwsXHJcbiAgICAgICAgdGl0bGU6IGluZm8udGl0bGUgfHwgaVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmJpbmRzID0ge1xyXG4gICAgICB1cGRhdGU6IHRoaXMudXBkYXRlLmJpbmQodGhpcyksXHJcbiAgICAgIG5hdmlnYXRlOiAoZSk9PiB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGlmKHRoaXMub25OYXZpZ2F0ZSkge1xyXG4gICAgICAgICAgbGV0IG5vZGUgPSBlLnRhcmdldDtcclxuICAgICAgICAgIHdoaWxlKG5vZGUgJiYgIW5vZGUuZGF0YVRodW1ibmFpbCkge1xyXG4gICAgICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdGhpcy5vbk5hdmlnYXRlKG5vZGUuZGF0YVRodW1ibmFpbC5pbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhpcy5jb250YWluZXIub24oJ3Njcm9sbCcsIHRoaXMuYmluZHMudXBkYXRlKTtcclxuICB9XHJcblxyXG4gIGdldFNpemUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zaXplO1xyXG4gIH1cclxuXHJcbiAgc2V0RW5hYmxlKGVuYWJsZSkge1xyXG4gICAgdGhpcy5lbmFibGUgPSBlbmFibGU7XHJcbiAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMuY29udGFpbmVyLmZpbmQoJ2EnKS5vZmYoJ2NsaWNrJywgdGhpcy5iaW5kcy5uYXZpZ2F0ZSk7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5vZmYoJ3Njcm9sbCcsIHRoaXMuYmluZHMudXBkYXRlKTtcclxuICAgIHRoaXMuY29udGFpbmVyLmh0bWwoJycpO1xyXG4gICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gdGhpcy5jYW52YXMud2lkdGggPSAwO1xyXG4gICAgZGVsZXRlIHRoaXMuY2FudmFzO1xyXG4gIH1cclxuXHJcbiAgbG9hZCh0aHVtYm5haWwpIHtcclxuICAgIHRoaXMubG9hZGluZyA9IHRydWU7XHJcbiAgICBjb25zdCB3cmFwcGVyID0gdGhpcy5pbWFnZUZhY3RvcnkuYnVpbGQodGh1bWJuYWlsLCB0aHVtYm5haWwubnVtYmVyPT09dW5kZWZpbmVkPyB0aHVtYm5haWwuaW5kZXg6IHRodW1ibmFpbC5udW1iZXIsIHRoaXMucC5rV3RvSCoxNTAsIDE1MCk7XHJcbiAgICB3cmFwcGVyLm9uQ2hhbmdlID0gKGNhbnZhcyk9PiB7XHJcbiAgICAgIHRoaXMuc2V0SW1hZ2UodGh1bWJuYWlsLCBjYW52YXMudG9EYXRhVVJMKCdpbWFnZS9wbmcnKSk7XHJcbiAgICAgIHRodW1ibmFpbC5sb2FkZWQgPSB0cnVlO1xyXG4gICAgICB3cmFwcGVyLmRpc3Bvc2UoKTtcclxuICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCk9PiB0aGlzLnVwZGF0ZSgpKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBnZXRBY3RpdmUoKSB7XHJcbiAgICBjb25zdCBmaXJzdCA9IHRoaXMuY29udGFpbmVyLnNjcm9sbFRvcCgpLCBsYXN0ID0gZmlyc3QgKyB0aGlzLmNvbnRhaW5lci5oZWlnaHQoKSwgcmVzID0gW107XHJcbiAgICBmb3IobGV0IHRodW1ibmFpbCBvZiB0aGlzLnRodW1ibmFpbHMpIHtcclxuICAgICAgaWYoTWF0aC5tYXgodGh1bWJuYWlsLmZpcnN0LCBmaXJzdCk8TWF0aC5taW4odGh1bWJuYWlsLmxhc3QsIGxhc3QpKSB7XHJcbiAgICAgICAgcmVzLnB1c2godGh1bWJuYWlsKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIHVwZGF0ZSgpIHtcclxuICAgIGlmKCF0aGlzLmxvYWRpbmcgJiYgdGhpcy5jYW52YXMgJiYgdGhpcy5lbmFibGUpIHtcclxuICAgICAgaWYoIXRoaXMuYnVpbHQpIHtcclxuICAgICAgICB0aGlzLnJlbmRlcigpO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuZ2V0QWN0aXZlKCk7XHJcbiAgICAgIGZvcihsZXQgdGh1bWJuYWlsIG9mIGFjdGl2ZSkge1xyXG4gICAgICAgIGlmKCF0aHVtYm5haWwubG9hZGVkKSB7XHJcbiAgICAgICAgICB0aGlzLmxvYWQodGh1bWJuYWlsKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0SW1hZ2UodGh1bWJuYWlsLCBpbWcpIHtcclxuICAgIHRodW1ibmFpbC5pbWcgPSBpbWc7XHJcbiAgICB0aHVtYm5haWwudGh1bWJuYWlsLmNzcygnYmFja2dyb3VuZC1pbWFnZScsIFsndXJsKFxcJycsIGltZywnXFwnKSddLmpvaW4oJycpKTtcclxuICAgIHRodW1ibmFpbC50aHVtYm5haWwucmVtb3ZlQ2xhc3MoJ2xvYWRpbmcnKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IGVsZW1lbnRzID0gWyc8ZGl2IGNsYXNzPVwidGh1bWJuYWlsc1wiPiddXHJcbiAgICBmb3IobGV0IGk9MDsgaTx0aGlzLnNpemU7ICsraSkge1xyXG4gICAgICBlbGVtZW50cy5wdXNoKFsnPGRpdiBjbGFzcz1cIml0ZW1cIj48YSBocmVmPVwiI1wiPjxkaXYgY2xhc3M9XCJ0aHVtYm5haWwgbG9hZGluZ1wiPjwvZGl2PjwvYT48ZGl2IGNsYXNzPVwiaGVhZGluZ1wiPjxhIGhyZWY9XCIjXCIgdGl0bGU9XCInLCBpKzEsJ1wiPicsIGkrMSwgJzwvYT48L2Rpdj48L2Rpdj4nXS5qb2luKCcnKSk7XHJcbiAgICB9XHJcbiAgICBlbGVtZW50cy5wdXNoKCc8L2Rpdj4nKTtcclxuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZChlbGVtZW50cy5qb2luKCcnKSk7XHJcbiAgICBjb25zdCBpdGVtcyA9IHRoaXMuY29udGFpbmVyLmZpbmQoJy5pdGVtJyksIGJhc2UgPSB0aGlzLmNvbnRhaW5lci5maW5kKCcudGh1bWJuYWlscycpLm9mZnNldCgpLnRvcDtcclxuICAgIGZvcihsZXQgaT0wOyBpPGl0ZW1zLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIGNvbnN0IGl0ZW0gPSAkKGl0ZW1zW2ldKTtcclxuICAgICAgdGhpcy50aHVtYm5haWxzW2ldLmhlYWRpbmcgPSBpdGVtLmZpbmQoJy5oZWFkaW5nJyk7XHJcbiAgICAgIHRoaXMudGh1bWJuYWlsc1tpXS50aHVtYm5haWwgPSBpdGVtLmZpbmQoJy50aHVtYm5haWwnKTtcclxuICAgICAgdGhpcy50aHVtYm5haWxzW2ldLmZpcnN0ID0gaXRlbS5vZmZzZXQoKS50b3AtYmFzZTtcclxuICAgICAgdGhpcy50aHVtYm5haWxzW2ldLmxhc3QgPSB0aGlzLnRodW1ibmFpbHNbaV0uZmlyc3QraXRlbS5oZWlnaHQoKTtcclxuICAgICAgaWYodGhpcy50aHVtYm5haWxzW2ldLmxvYWRlZCkge1xyXG4gICAgICAgIHRoaXMuc2V0SW1hZ2UodGhpcy50aHVtYm5haWxzW2ldLCB0aGlzLnRodW1ibmFpbHNbaV0uc3JjKTtcclxuICAgICAgfVxyXG4gICAgICBmb3IobGV0IGEgb2YgaXRlbS5maW5kKCdhJykpIHtcclxuICAgICAgICBhLmRhdGFUaHVtYm5haWwgPSB0aGlzLnRodW1ibmFpbHNbaV07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMuY29udGFpbmVyLmZpbmQoJ2EnKS5vbignY2xpY2snLCB0aGlzLmJpbmRzLm5hdmlnYXRlKTtcclxuICAgIHRoaXMuYnVpbHQgPSB0cnVlO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvVGh1bWJuYWlscy5qcyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFV0aWxzIHtcclxuXHJcbiAgc3RhdGljIGRlZmF1bHRDbXAoYSwgYikge1xyXG4gICAgcmV0dXJuIGEtYjtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBsb3dlckJvdW5kKGEsIHgsIGNtcCkge1xyXG4gICAgY21wID0gY21wIHx8IFV0aWxzLmRlZmF1bHRDbXA7XHJcbiAgICBsZXQgbCA9IDAsIGggPSBhLmxlbmd0aC0xO1xyXG4gICAgd2hpbGUoaC1sPjEpIHtcclxuICAgICAgbGV0IG1pZCA9IE1hdGguZmxvb3IoKGwgKyBoKSAvIDIpO1xyXG4gICAgICBpZihjbXAoeCwgYVttaWRdKTwwKSB7XHJcbiAgICAgICAgaCA9IG1pZDtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBsID0gbWlkO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY21wKHgsIGFbaF0pPj0wPyBoOiBsO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvVXRpbHMuanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmlldyB7XHJcblxyXG4gIHN0YXRpYyBsaW5rU3RhdGVIYW5kbGVycyA9IHtcclxuICAgIHZpc2libGU6IChjdHJsLCB2YWx1ZSk9PiBWaWV3LmNsYXNzUHJvcGVydHkoY3RybCwgJ2hpZGRlbicsICF2YWx1ZSksXHJcbiAgICBhY3RpdmU6IChjdHJsLCB2YWx1ZSk9PiBWaWV3LmNsYXNzUHJvcGVydHkoY3RybCwgJ2FjdGl2ZScsIHZhbHVlKSxcclxuICAgIGVuYWJsZTogKGN0cmwsIHZhbHVlKT0+IFZpZXcuY2xhc3NQcm9wZXJ0eShjdHJsLCAnZGlzYWJsZWQnLCAhdmFsdWUpXHJcbiAgfTtcclxuXHJcbiAgc3RhdGljIHdpZGdldFN0YXRlSGFuZGxlcnMgPSB7XHJcbiAgICB2aXNpYmxlOiAoY3RybCwgdmFsdWUpPT4gVmlldy5jbGFzc1Byb3BlcnR5KGN0cmwsICdoaWRkZW4nLCAhdmFsdWUpLFxyXG4gICAgYWN0aXZlOiAoY3RybCwgdmFsdWUpPT4gVmlldy5jbGFzc1Byb3BlcnR5KGN0cmwsICdhY3RpdmUnLCB2YWx1ZSksXHJcbiAgICBlbmFibGU6IChjdHJsLCB2YWx1ZSk9PiBWaWV3LmNsYXNzUHJvcGVydHkoY3RybCwgJ2Rpc2FibGVkJywgIXZhbHVlKVxyXG4gIH07XHJcblxyXG4gIHN0YXRpYyBpbnB1dFN0YXRlSGFuZGxlcnMgPSB7XHJcbiAgICB2aXNpYmxlOiAoY3RybCwgdmFsdWUpPT4gVmlldy5jbGFzc1Byb3BlcnR5KGN0cmwsICdoaWRkZW4nLCAhdmFsdWUpLFxyXG4gICAgdmFsdWU6IChjdHJsLCB2YWx1ZSk9PiBjdHJsWzBdLnZhbHVlID0gdmFsdWUsXHJcbiAgICBlbmFibGU6IChjdHJsLCB2YWx1ZSk9PiBWaWV3LmF0dHJpYnV0ZVByb3BlcnR5KGN0cmwsICdkaXNhYmxlZCcsICF2YWx1ZSlcclxuICB9O1xyXG5cclxuICBzdGF0aWMgdGV4dFN0YXRlSGFuZGxlcnMgPSB7XHJcbiAgICB2aXNpYmxlOiAoY3RybCwgdmFsdWUpPT4gVmlldy5jbGFzc1Byb3BlcnR5KGN0cmwsICdoaWRkZW4nLCAhdmFsdWUpLFxyXG4gICAgdmFsdWU6IChjdHJsLCB2YWx1ZSk9PiBjdHJsLnRleHQodmFsdWUpXHJcbiAgfTtcclxuXHJcbiAgc3RhdGljIGNsYXNzUHJvcGVydHkoY3RybCwgY2xhc3NOYW1lLCB2YWx1ZSkge1xyXG4gICAgaWYodmFsdWUpIHtcclxuICAgICAgY3RybC5hZGRDbGFzcyhjbGFzc05hbWUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGN0cmwucmVtb3ZlQ2xhc3MoY2xhc3NOYW1lKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBhdHRyaWJ1dGVQcm9wZXJ0eShjdHJsLCBhdHRyaWJ1dGVOYW1lLCB2YWx1ZSkge1xyXG4gICAgaWYodmFsdWUpIHtcclxuICAgICAgY3RybC5hdHRyKGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZU5hbWUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGN0cmwucmVtb3ZlQXR0cihhdHRyaWJ1dGVOYW1lKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBjYWxsSGFuZGxlcnMoaGFuZGxlcnMsIGlkLCBlLCBkYXRhKSB7XHJcbiAgICBmb3IobGV0IGhhbmRsZXIgb2YgaGFuZGxlcnMpIHtcclxuICAgICAgaWYoaGFuZGxlcltpZF0pIHtcclxuICAgICAgICBoYW5kbGVyW2lkXShlLCBkYXRhKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKGhhbmRsZXIuaGFuZGxlRGVmYXVsdCkge1xyXG4gICAgICAgIGhhbmRsZXIuaGFuZGxlRGVmYXVsdChpZCwgZSwgZGF0YSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBoYW5kbGVFdmVudChpZCwgZ2V0SGFuZGxlcnMsIGUsIGRhdGEpIHtcclxuICAgIFZpZXcuY2FsbEhhbmRsZXJzKGdldEhhbmRsZXJzKGlkKSwgaWQsIGUsIGRhdGEpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGhhbmRsZUxpbmtFdmVudChlKSB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBWaWV3LmhhbmRsZUV2ZW50KHRoaXMuaWQsIHRoaXMuZ2V0SGFuZGxlcnMsIGUpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGhhbmRsZUlucHV0RXZlbnQoZSkge1xyXG4gICAgVmlldy5oYW5kbGVFdmVudCh0aGlzLmlkLCB0aGlzLmdldEhhbmRsZXJzLCBlLCBlLnRhcmdldC52YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaGFuZGxlRm9ybUV2ZW50KGUpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIFZpZXcuaGFuZGxlRXZlbnQodGhpcy5pZCwgdGhpcy5nZXRIYW5kbGVycywgZSk7XHJcbiAgfVxyXG5cclxuICAvLyB2aXJ0dWFsIGZ1bmN0aW9ucyB7XHJcbiAgZ2V0TGlua3MoKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIGdldFdpZGdldHMoKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIGdldElucHV0cygpIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgZ2V0VGV4dHMoKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIGdldFRlbXBsYXRlKCkge1xyXG4gICAgcmV0dXJuIHt9O1xyXG4gIH1cclxuXHJcbiAgZ2V0SGFuZGxlcnMoaWQpIHtcclxuICAgIHJldHVybiB0aGlzLmhhbmRsZXJzO1xyXG4gIH1cclxuICAvLyB9XHJcblxyXG4gIGNhbGxMYXRlcihoYW5kbGVycywgaWQsIGUsIGRhdGEsIG1zKSB7XHJcbiAgICB0aGlzLnBlbmRpbmdzW2lkXSA9IHtcclxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLmdldFRpbWUoKVxyXG4gICAgfTtcclxuICAgIHNldFRpbWVvdXQoKCk9PiB7XHJcbiAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpLCBwZW5kaW5nID0gdGhpcy5wZW5kaW5nc1tpZF07XHJcbiAgICAgIGlmKHBlbmRpbmcgJiYgdGltZXN0YW1wLXBlbmRpbmcudGltZXN0YW1wPj1tcykge1xyXG4gICAgICAgIFZpZXcuY2FsbEhhbmRsZXJzKGhhbmRsZXJzLCBpZCwgZSwgZGF0YSk7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMucGVuZGluZ3NbaWRdO1xyXG4gICAgICB9XHJcbiAgICB9LCBtcyk7XHJcbiAgfVxyXG5cclxuICAvLyBsb2FkRmlsZXModXJscywgcmVhZHksIGZhaWx1cmUpIHtcclxuICAvLyAgIGxldCBkb25lID0gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgLy8gICBmb3IobGV0IHVybCBvZiB1cmxzKSB7XHJcbiAgLy8gICAgIGRvbmUgPSBkb25lLnRoZW4oKCk9PiB7XHJcbiAgLy8gICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpPT4ge1xyXG4gIC8vICAgICAgICAgJC5nZXQodXJsLCAocmVzKT0+IHtcclxuICAvLyAgICAgICAgICAgcmVhZHkocmVzLCB1cmwpO1xyXG4gIC8vICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgLy8gICAgICAgICB9KS5mYWlsKChyZXMpPT4ge1xyXG4gIC8vICAgICAgICAgICBpZihmYWlsdXJlICYmIGZhaWx1cmUocmVzLCB1cmwpKSB7XHJcbiAgLy8gICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gIC8vICAgICAgICAgICB9XHJcbiAgLy8gICAgICAgICAgIGVsc2Uge1xyXG4gIC8vICAgICAgICAgICAgIHJlamVjdChyZXMpO1xyXG4gIC8vICAgICAgICAgICB9XHJcbiAgLy8gICAgICAgICB9KTtcclxuICAvLyAgICAgICB9KTtcclxuICAvLyAgICAgfSk7XHJcbiAgLy8gICB9XHJcbiAgLy8gICByZXR1cm4gZG9uZTtcclxuICAvLyB9XHJcblxyXG4gIGxvYWRGaWxlcyh1cmxzLCBmaWxlcykge1xyXG4gICAgY29uc3QgdGFza3MgPSBbXTtcclxuICAgIGZvcihsZXQgbmFtZSBvZiBPYmplY3Qua2V5cyh1cmxzKSkge1xyXG4gICAgICBmaWxlc1tuYW1lXSA9IFtdO1xyXG4gICAgICBmb3IobGV0IHVybCBvZiB1cmxzW25hbWVdKSB7XHJcbiAgICAgICAgdGFza3MucHVzaChcclxuICAgICAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpPT4ge1xyXG4gICAgICAgICAgICAkLmdldCh1cmwsIChkYXRhKT0+IHtcclxuICAgICAgICAgICAgICBmaWxlc1tuYW1lXS5wdXNoKHt1cmwsIGRhdGF9KTtcclxuICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH0pLmZhaWwoKHJlcyk9PiB7XHJcbiAgICAgICAgICAgICAgcmVqZWN0KHJlcyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwodGFza3MpO1xyXG4gIH1cclxuXHJcbiAgdXJsUmVzb2x2ZXIoYmFzZVVybCwgdXJsKSB7XHJcbiAgICB1cmwgPSB1cmwucmVwbGFjZSgvXFxcXC9nLCAnLycpO1xyXG4gICAgaWYodXJsLmNoYXJBdCgwKSE9PScvJykge1xyXG4gICAgICBiYXNlVXJsID0gYmFzZVVybC5yZXBsYWNlKC9cXFxcL2csICcvJyk7XHJcbiAgICAgIGNvbnN0IHAgPSBiYXNlVXJsLmxhc3RJbmRleE9mKCcvJyk7XHJcbiAgICAgIHVybCA9ICh+cD8gYmFzZVVybC5zdWJzdHIoMCwgcCsxKTogJycpK3VybDtcclxuXHJcbiAgICAgIGNvbnN0IHBhcnRzID0gdXJsLnNwbGl0KCcvJyk7XHJcbiAgICAgIHVybCA9IFtdO1xyXG4gICAgICBmb3IobGV0IHBhcnQgb2YgcGFydHMpIHtcclxuICAgICAgICBpZihwYXJ0PT09Jy4nKSB7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYocGFydD09PScuLicpIHtcclxuICAgICAgICAgIGlmKHVybC5sZW5ndGggJiYgISh1cmwubGVuZ3RoPT09MSAmJiB1cmxbMF09PT0nJykpIHtcclxuICAgICAgICAgICAgdXJsLnBvcCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIHVybC5wdXNoKHBhcnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICB1cmwgPSB1cmwuam9pbignLycpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB1cmw7XHJcbiAgfVxyXG5cclxuICBvYmpUb0F0dHJzU3RyKG8pIHtcclxuICAgIGNvbnN0IHJlcyA9IFtdO1xyXG4gICAgZm9yKGxldCBuYW1lIG9mIE9iamVjdC5rZXlzKG8pKSB7XHJcbiAgICAgIHJlcy5wdXNoKFtuYW1lLCAnPVwiJywgb1tuYW1lXSwgJ1wiJ10uam9pbignJykpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcy5qb2luKCcgJyk7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihwYXJlbnRDb250YWluZXIsIG9uTG9hZCwgdGVtcGxhdGU9e30pIHtcclxuICAgIHRoaXMucGVuZGluZ3MgPSB7fTtcclxuICAgIHRoaXMuYmluZHMgPSB7fTtcclxuICAgIHRoaXMucGFyZW50Q29udGFpbmVyID0gJChwYXJlbnRDb250YWluZXIpO1xyXG4gICAgdGhpcy5wYXJlbnRDb250YWluZXIuaHRtbCgnPGlmcmFtZSBzdHlsZT1cIndpZHRoOiAxMDAlOyBoZWlnaHQ6IDEwMCU7IGJvcmRlcjogMDtcIiBzY3JvbGxpbmc9XCJub1wiPjwvaWZyYW1lPicpO1xyXG4gICAgdGhpcy5mcmFtZSA9IHRoaXMucGFyZW50Q29udGFpbmVyLmZpbmQoJ2lmcmFtZScpWzBdO1xyXG4gICAgaWYodGhpcy5mcmFtZS5jb250ZW50V2luZG93LnN0b3ApIHtcclxuICAgICAgdGhpcy5mcmFtZS5jb250ZW50V2luZG93LnN0b3AoKTtcclxuICAgIH1cclxuICAgIHRoaXMuY29udGFpbmVyID0gJCh0aGlzLmZyYW1lLmNvbnRlbnREb2N1bWVudC5ib2R5KTtcclxuICAgIHRoaXMuY29udGFpbmVyLmNzcygnbWFyZ2luJywgJzAnKTtcclxuICAgIHRoaXMuaGVhZCA9ICQodGhpcy5mcmFtZS5jb250ZW50RG9jdW1lbnQuaGVhZCk7XHJcbiAgICB0aGlzLm9uTG9hZCA9IG9uTG9hZDtcclxuICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcclxuXHJcbiAgICBjb25zdCBzY3JpcHQgPSB0ZW1wbGF0ZS5odG1sPyB0ZW1wbGF0ZS5zY3JpcHQ6IHRoaXMuZ2V0VGVtcGxhdGUoKS5zY3JpcHQ7XHJcbiAgICBjb25zdCB1cmxzID0ge1xyXG4gICAgICBzdHlsZXM6IHRlbXBsYXRlLnN0eWxlcyB8fCB0aGlzLmdldFRlbXBsYXRlKCkuc3R5bGVzLFxyXG4gICAgICBodG1sOiBbdGVtcGxhdGUuaHRtbCB8fCB0aGlzLmdldFRlbXBsYXRlKCkuaHRtbF0sXHJcbiAgICAgIHNjcmlwdDogc2NyaXB0PyBbc2NyaXB0XTogW11cclxuICAgIH0sIGZpbGVzID0ge30sIGxpbmtzID0gdGVtcGxhdGUubGlua3MgfHwgdGhpcy5nZXRUZW1wbGF0ZSgpLmxpbmtzO1xyXG5cclxuICAgIHRoaXMubG9hZEZpbGVzKHVybHMsIGZpbGVzKS50aGVuKCgpPT4ge1xyXG4gICAgICBmb3IobGV0IHN0eWxlIG9mIGZpbGVzLnN0eWxlcykge1xyXG4gICAgICAgIGxldCB0ZXh0Q3NzID0gc3R5bGUuZGF0YSwgdXJsID0gc3R5bGUudXJsO1xyXG4gICAgICAgIHRleHRDc3MgPSB0ZXh0Q3NzLnJlcGxhY2UoL3VybFxcKFsnXCJdKC4qPylbXCInXVxcKS9nLCAociwgcjEpPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIFsndXJsKCcsIHRoaXMudXJsUmVzb2x2ZXIodXJsLCByMSksICcpJ10uam9pbignJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJChgPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPiR7dGV4dENzc308L3N0eWxlPmApLmFwcGVuZFRvKHRoaXMuaGVhZCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuY29udGFpbmVyLmh0bWwoZmlsZXMuaHRtbFswXS5kYXRhKTtcclxuXHJcbiAgICAgIGZvcihsZXQgbGluayBvZiBsaW5rcykge1xyXG4gICAgICAgICQodGhpcy5oZWFkKS5hcHBlbmQoWyc8bGluayAnLCB0aGlzLm9ialRvQXR0cnNTdHIobGluayksICc+J10uam9pbignJykpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZihmaWxlcy5zY3JpcHRbMF0pIHtcclxuICAgICAgICBjb25zdCBpbml0ID0gZXZhbChmaWxlcy5zY3JpcHRbMF0uZGF0YSk7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZU9iamVjdCA9IGluaXQodGhpcy5jb250YWluZXIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLmxpbmtDb250cm9scyA9IHt9O1xyXG4gICAgICBmb3IobGV0IGlkIG9mIHRoaXMuZ2V0TGlua3MoKSkge1xyXG4gICAgICAgIHRoaXMubGlua0NvbnRyb2xzW2lkXSA9IHRoaXMuY29udGFpbmVyLmZpbmQoJy4nK2lkKTtcclxuICAgICAgICB0aGlzLmJpbmRzW2lkXSA9IFZpZXcuaGFuZGxlTGlua0V2ZW50LmJpbmQoe2dldEhhbmRsZXJzOiB0aGlzLmdldEhhbmRsZXJzLmJpbmQodGhpcyksIGlkfSk7XHJcbiAgICAgICAgdGhpcy5saW5rQ29udHJvbHNbaWRdLm9uKCdjbGljaycsIHRoaXMuYmluZHNbaWRdKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy53aWRnZXRDb250cm9scyA9IHt9O1xyXG4gICAgICBmb3IobGV0IGlkIG9mIHRoaXMuZ2V0V2lkZ2V0cygpKSB7XHJcbiAgICAgICAgdGhpcy53aWRnZXRDb250cm9sc1tpZF0gPSB0aGlzLmNvbnRhaW5lci5maW5kKCcuJytpZCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuaW5wdXRDb250cm9scyA9IHt9O1xyXG4gICAgICBmb3IobGV0IGlkIG9mIHRoaXMuZ2V0SW5wdXRzKCkpIHtcclxuICAgICAgICB0aGlzLmlucHV0Q29udHJvbHNbaWRdID0gdGhpcy5jb250YWluZXIuZmluZCgnLicraWQpO1xyXG4gICAgICAgIHRoaXMuYmluZHNbaWRdID0gVmlldy5oYW5kbGVJbnB1dEV2ZW50LmJpbmQoe2dldEhhbmRsZXJzOiB0aGlzLmdldEhhbmRsZXJzLmJpbmQodGhpcyksIGlkfSk7XHJcbiAgICAgICAgdGhpcy5pbnB1dENvbnRyb2xzW2lkXS5vbigna2V5dXAnLCB0aGlzLmJpbmRzW2lkXSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuZm9ybUNvbnRyb2xzID0ge307XHJcbiAgICAgIGZvcihsZXQgaWQgb2YgdGhpcy5nZXRGb3JtcygpKSB7XHJcbiAgICAgICAgdGhpcy5mb3JtQ29udHJvbHNbaWRdID0gdGhpcy5jb250YWluZXIuZmluZCgnLicraWQpO1xyXG4gICAgICAgIHRoaXMuYmluZHNbaWRdID0gVmlldy5oYW5kbGVGb3JtRXZlbnQuYmluZCh7Z2V0SGFuZGxlcnM6IHRoaXMuZ2V0SGFuZGxlcnMuYmluZCh0aGlzKSwgaWR9KTtcclxuICAgICAgICB0aGlzLmZvcm1Db250cm9sc1tpZF0ub24oJ3N1Ym1pdCcsIHRoaXMuYmluZHNbaWRdKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy50ZXh0Q29udHJvbHMgPSB7fTtcclxuICAgICAgZm9yKGxldCBpZCBvZiB0aGlzLmdldFRleHRzKCkpIHtcclxuICAgICAgICB0aGlzLnRleHRDb250cm9sc1tpZF0gPSB0aGlzLmNvbnRhaW5lci5maW5kKCcuJytpZCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuc3RhdGVTZXR0ZXJzID0gW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIG1hcDogdGhpcy5saW5rQ29udHJvbHMsXHJcbiAgICAgICAgICBzZXR0ZXI6IHRoaXMuc2V0TGlua0NvbnRyb2xTdGF0ZS5iaW5kKHRoaXMpXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBtYXA6IHRoaXMud2lkZ2V0Q29udHJvbHMsXHJcbiAgICAgICAgICBzZXR0ZXI6IHRoaXMuc2V0V2lkZ2V0Q29udHJvbFN0YXRlLmJpbmQodGhpcylcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIG1hcDogdGhpcy5pbnB1dENvbnRyb2xzLFxyXG4gICAgICAgICAgc2V0dGVyOiB0aGlzLnNldElucHV0Q29udHJvbFN0YXRlLmJpbmQodGhpcylcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIG1hcDogdGhpcy50ZXh0Q29udHJvbHMsXHJcbiAgICAgICAgICBzZXR0ZXI6IHRoaXMuc2V0VGV4dENvbnRyb2xTdGF0ZS5iaW5kKHRoaXMpXHJcbiAgICAgICAgfVxyXG4gICAgICBdO1xyXG5cclxuICAgICAgdGhpcy5pbml0VmlldygpO1xyXG5cclxuICAgICAgaWYodGhpcy5vbkxvYWQpIHtcclxuICAgICAgICB0aGlzLm9uTG9hZCgpO1xyXG4gICAgICB9XHJcbiAgICB9KS5cclxuICAgIGNhdGNoKChyZXMpPT4gY29uc29sZS5lcnJvcihyZXMpKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICBkZWxldGUgdGhpcy50ZXh0Q29udHJvbHM7XHJcbiAgICBmb3IobGV0IGlkIG9mIHRoaXMuZ2V0TGlua3MoKSkge1xyXG4gICAgICB0aGlzLmxpbmtDb250cm9sc1tpZF0ub2ZmKCdjbGljaycsIHRoaXMuYmluZHNbaWRdKTtcclxuICAgIH1cclxuICAgIGRlbGV0ZSB0aGlzLmxpbmtDb250cm9scztcclxuICAgIGRlbGV0ZSB0aGlzLndpZGdldENvbnRyb2xzO1xyXG4gICAgZm9yKGxldCBpZCBvZiB0aGlzLmdldElucHV0cygpKSB7XHJcbiAgICAgIHRoaXMuaW5wdXRDb250cm9sc1tpZF0ub2ZmKCdrZXl1cCcsIHRoaXMuYmluZHNbaWRdKTtcclxuICAgIH1cclxuICAgIGRlbGV0ZSB0aGlzLmlucHV0Q29udHJvbHM7XHJcbiAgICBmb3IobGV0IGlkIG9mIHRoaXMuZ2V0Rm9ybXMoKSkge1xyXG4gICAgICB0aGlzLmZvcm1Db250cm9sc1tpZF0ub2ZmKCdzdWJtaXQnLCB0aGlzLmJpbmRzW2lkXSk7XHJcbiAgICB9XHJcbiAgICBkZWxldGUgdGhpcy5mb3JtQ29udHJvbHM7XHJcblxyXG4gICAgIXRoaXMudGVtcGxhdGVPYmplY3QgfHwgIXRoaXMudGVtcGxhdGVPYmplY3QuZGlzcG9zZSB8fCB0aGlzLnRlbXBsYXRlT2JqZWN0LmRpc3Bvc2UoKTtcclxuICAgIHRoaXMucGFyZW50Q29udGFpbmVyLmh0bWwoJycpO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q29udGFpbmVyKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY29udGFpbmVyWzBdO1xyXG4gIH1cclxuXHJcbiAgZ2V0UGFyZW50Q29udGFpbmVyKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucGFyZW50Q29udGFpbmVyWzBdO1xyXG4gIH1cclxuXHJcbiAgYWRkSGFuZGxlcihoYW5kbGVyKSB7XHJcbiAgICB0aGlzLmhhbmRsZXJzLnB1c2goaGFuZGxlcik7XHJcbiAgfVxyXG5cclxuICBpbml0VmlldygpIHtcclxuXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc2V0Q29udHJvbFN0YXRlKGN0cmwsIGRlZmF1bHRzLCBzdGF0ZSwgc3RhdGVIYW5kbGVycykge1xyXG4gICAgaWYoY3RybCkge1xyXG4gICAgICBjb25zdCBzdCA9IHtcclxuICAgICAgICAuLi5kZWZhdWx0cyxcclxuICAgICAgICAuLi5zdGF0ZVxyXG4gICAgICB9O1xyXG4gICAgICBmb3IobGV0IG5hbWUgaW4gc3QpIHtcclxuICAgICAgICBpZihzdC5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiBzdGF0ZUhhbmRsZXJzW25hbWVdKSB7XHJcbiAgICAgICAgICBzdGF0ZUhhbmRsZXJzW25hbWVdKGN0cmwsIHN0W25hbWVdKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldExpbmtDb250cm9sU3RhdGUoaWQsIHN0YXRlKSB7XHJcbiAgICBWaWV3LnNldENvbnRyb2xTdGF0ZShcclxuICAgICAgdGhpcy5saW5rQ29udHJvbHNbaWRdLFxyXG4gICAgICB7XHJcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlLFxyXG4gICAgICAgIGVuYWJsZTogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBzdGF0ZSxcclxuICAgICAgVmlldy5saW5rU3RhdGVIYW5kbGVyc1xyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHNldFdpZGdldENvbnRyb2xTdGF0ZShpZCwgc3RhdGUpIHtcclxuICAgIFZpZXcuc2V0Q29udHJvbFN0YXRlKFxyXG4gICAgICB0aGlzLndpZGdldENvbnRyb2xzW2lkXSxcclxuICAgICAge1xyXG4gICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZSxcclxuICAgICAgICBlbmFibGU6IHRydWVcclxuICAgICAgfSxcclxuICAgICAgc3RhdGUsXHJcbiAgICAgIFZpZXcud2lkZ2V0U3RhdGVIYW5kbGVyc1xyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHNldElucHV0Q29udHJvbFN0YXRlKGlkLCBzdGF0ZSkge1xyXG4gICAgVmlldy5zZXRDb250cm9sU3RhdGUoXHJcbiAgICAgIHRoaXMuaW5wdXRDb250cm9sc1tpZF0sXHJcbiAgICAgIHtcclxuICAgICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICB2YWx1ZTogJydcclxuICAgICAgfSxcclxuICAgICAgc3RhdGUsXHJcbiAgICAgIFZpZXcuaW5wdXRTdGF0ZUhhbmRsZXJzXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgc2V0VGV4dENvbnRyb2xTdGF0ZShpZCwgc3RhdGUpIHtcclxuICAgIFZpZXcuc2V0Q29udHJvbFN0YXRlKFxyXG4gICAgICB0aGlzLnRleHRDb250cm9sc1tpZF0sXHJcbiAgICAgIHtcclxuICAgICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgICAgIHZhbHVlOiAnJ1xyXG4gICAgICB9LFxyXG4gICAgICBzdGF0ZSxcclxuICAgICAgVmlldy50ZXh0U3RhdGVIYW5kbGVyc1xyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIG9uSXRlbVN0YXRlQ2hhbmdlZCgpIHtcclxuXHJcbiAgfVxyXG5cclxuICBzZXRTdGF0ZShpZCwgc3RhdGUpIHtcclxuICAgIGZvcihsZXQgaXRlbSBvZiB0aGlzLnN0YXRlU2V0dGVycykge1xyXG4gICAgICBpZihpdGVtLm1hcFtpZF0pIHtcclxuICAgICAgICBpdGVtLnNldHRlcihpZCwgc3RhdGUpO1xyXG4gICAgICAgIHRoaXMub25JdGVtU3RhdGVDaGFuZ2VkKGlkLCBzdGF0ZSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1ZpZXcuanMiLCJpbXBvcnQgeyQsIFRIUkVFfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IE9yYml0IGZyb20gJy4vT3JiaXQnO1xyXG5pbXBvcnQgVGhyZWVNb3VzZUV2ZW50Q29udmVydGVyIGZyb20gJy4vVGhyZWVNb3VzZUV2ZW50Q29udmVydGVyJztcclxuaW1wb3J0IERyYWcgZnJvbSAnLi9EcmFnJztcclxuaW1wb3J0IENTUzNEUmVuZGVyZXIgZnJvbSAnLi9DU1MzRFJlbmRlcmVyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZpc3VhbFdvcmxkIHtcclxuXHJcbiAgY29uc3RydWN0b3Iod25kLCBkb2MsIGNvbnRhaW5lciwgdXNlSGVscGVycz1mYWxzZSkge1xyXG4gICAgdGhpcy53bmQgPSB3bmQ7XHJcbiAgICB0aGlzLmRvYyA9IGRvYztcclxuICAgIHRoaXMuakNvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgIHRoaXMucmVuZGVyQ2FsbGJhY2tzID0gW107XHJcblxyXG4gICAgdGhpcy5jbG9jayA9IG5ldyBUSFJFRS5DbG9jaygpO1xyXG5cclxuICAgIHRoaXMucmF5Y2FzdGVyID0gbmV3IFRIUkVFLlJheWNhc3RlcigpO1xyXG5cclxuICAgIHRoaXMuc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcclxuICAgIHRoaXMuY3NzU2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcclxuXHJcbiAgICB0aGlzLmNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSgzMCwgdGhpcy53aWR0aCgpL3RoaXMuaGVpZ2h0KCksIDAuMiwgMjAwMCk7XHJcbiAgICBjb25zdCBzY2FsZSA9IDE7XHJcblxyXG4gICAgdGhpcy5jYW1lcmEucG9zaXRpb24ueCA9IDA7XHJcbiAgICB0aGlzLmNhbWVyYS5wb3NpdGlvbi55ID0gNS41KnNjYWxlO1xyXG4gICAgdGhpcy5jYW1lcmEucG9zaXRpb24ueiA9IDA7XHJcblxyXG4gICAgdGhpcy5yZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHthbHBoYTogdHJ1ZX0pO1xyXG4gICAgdGhpcy5yZW5kZXJlci5zZXRDbGVhckNvbG9yKDB4MDAwMDAwLCAwKTtcclxuICAgIHRoaXMucmVuZGVyZXIuc2V0UGl4ZWxSYXRpbyh0aGlzLnduZC5kZXZpY2VQaXhlbFJhdGlvKTtcclxuICAgIHRoaXMucmVuZGVyZXIuc2V0U2l6ZSh0aGlzLndpZHRoKCksIHRoaXMuaGVpZ2h0KCkpO1xyXG5cclxuICAgIHRoaXMuakNvbnRhaW5lci5hcHBlbmQodGhpcy5yZW5kZXJlci5kb21FbGVtZW50KTtcclxuXHJcbiAgICB0aGlzLmNzc1JlbmRlcmVyXHQ9IG5ldyBDU1MzRFJlbmRlcmVyKCk7XHJcbiAgICB0aGlzLmNzc1JlbmRlcmVyLnNldFNpemUodGhpcy53aWR0aCgpLCB0aGlzLmhlaWdodCgpKTtcclxuICAgICQodGhpcy5jc3NSZW5kZXJlci5kb21FbGVtZW50KS5jc3Moe1xyXG4gIFx0XHRwb3NpdGlvbjogJ2Fic29sdXRlJyxcclxuICBcdFx0dG9wOiAwLFxyXG4gIFx0XHRtYXJnaW46IDAsXHJcbiAgXHRcdHBhZGRpbmc6IDBcclxuXHQgIH0pO1xyXG4gICAgdGhpcy5qQ29udGFpbmVyLmFwcGVuZCh0aGlzLmNzc1JlbmRlcmVyLmRvbUVsZW1lbnQpO1xyXG5cclxuICAgIHRoaXMuZWxlbWVudCA9IHRoaXMuY3NzUmVuZGVyZXIuZG9tRWxlbWVudDtcclxuXHJcblxyXG5cclxuICAgIHRoaXMuY29udHJvbHMgPSBuZXcgT3JiaXQodGhpcy5jYW1lcmEsIHRoaXMuZWxlbWVudCk7XHJcbiAgICB0aGlzLmNvbnRyb2xzLnRhcmdldC55ID0gMC41O1xyXG5cclxuICAgIGNvbnN0IGNzc1NjZW5lID0gJCh0aGlzLmNzc1JlbmRlcmVyLmRvbUVsZW1lbnQpLmZpbmQoJ2RpdicpLCB0bXBWZWN0b3IgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG4gICAgdGhpcy5jb250cm9scy5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKT0+IHtcclxuICAgICAgdGhpcy5jYW1lcmEuZ2V0V29ybGREaXJlY3Rpb24odG1wVmVjdG9yKTtcclxuICAgICAgY3NzU2NlbmUuY3NzKCdkaXNwbGF5JywgdG1wVmVjdG9yLnktdGhpcy5jYW1lcmEucG9zaXRpb24ueT4wPyAnbm9uZSc6ICdibG9jaycpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy50ZXh0dXJlTG9hZGVyID0gbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoKTtcclxuXHJcbiAgICB0aGlzLnNjZW5lLmFkZChuZXcgVEhSRUUuQW1iaWVudExpZ2h0KDB4RDBEMEQwKSk7Ly8weEMwQzBDMFxyXG5cclxuICAgIHRoaXMubGlnaHQgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCgweDQwNDA0MCwgMSk7XHJcbiAgICB0aGlzLmxpZ2h0LnBvc2l0aW9uLnNldCgwLCA2KnNjYWxlLCAwKTtcclxuICAgIHRoaXMubGlnaHQuY2FzdFNoYWRvdyA9IGZhbHNlO1xyXG4gICAgLy8gY29uc3QgZCA9IDIwKnNjYWxlO1xyXG4gICAgLy8gdGhpcy5saWdodC5zaGFkb3cuY2FtZXJhLmxlZnQgPSAtZDtcclxuICAgIC8vIHRoaXMubGlnaHQuc2hhZG93LmNhbWVyYS5yaWdodCA9IGQ7XHJcbiAgICAvLyB0aGlzLmxpZ2h0LnNoYWRvdy5jYW1lcmEudG9wID0gZDtcclxuICAgIC8vIHRoaXMubGlnaHQuc2hhZG93LmNhbWVyYS5ib3R0b20gPSAtZDtcclxuICAgIC8vIHRoaXMubGlnaHQuc2hhZG93LmNhbWVyYS5uZWFyID0gMSpzY2FsZTtcclxuICAgIC8vIHRoaXMubGlnaHQuc2hhZG93LmNhbWVyYS5mYXIgPSAyNSpzY2FsZTtcclxuICAgIC8vIHRoaXMubGlnaHQuc2hhZG93Lm1hcFNpemUueCA9IDEwMjQ7XHJcbiAgICAvLyB0aGlzLmxpZ2h0LnNoYWRvdy5tYXBTaXplLnkgPSAxMDI0O1xyXG4gICAgdGhpcy5zY2VuZS5hZGQodGhpcy5saWdodCk7XHJcblxyXG4gICAgaWYodXNlSGVscGVycykge1xyXG4gICAgICB0aGlzLnNjZW5lLmFkZChuZXcgVEhSRUUuQXhpc0hlbHBlcig1KSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5iaW5kcyA9IHtcclxuICAgICAgb25XaW5kb3dSZXNpemU6IHRoaXMub25XaW5kb3dSZXNpemUuYmluZCh0aGlzKSxcclxuICAgICAgYW5pbWF0ZTogdGhpcy5hbmltYXRlLmJpbmQodGhpcylcclxuICAgIH07XHJcblxyXG4gICAgJCh0aGlzLnduZCkub24oJ3Jlc2l6ZScsIHRoaXMuYmluZHMub25XaW5kb3dSZXNpemUpO1xyXG5cclxuICAgIHRoaXMubW91c2VFdmVudHMgPSBuZXcgVGhyZWVNb3VzZUV2ZW50Q29udmVydGVyKHRoaXMud25kLCB0aGlzLmRvYywgdGhpcyk7XHJcbiAgICBjb25zdCBmaWx0ZXJEYXRhID0ge3R5cGU6ICdtb3VzZW1vdmUnfTtcclxuICAgIHRoaXMubW91c2VFdmVudHMuZmlsdGVyID0gKGVsZW1lbnQsIGUpPT4ge1xyXG4gICAgICBjb25zdCB0eXBlcyA9IFsnbW91c2VlbnRlcicsICdtb3VzZW92ZXInLCAnbW91c2VsZWF2ZScsICdtb3VzZW91dCddLCBjb250YWlucyA9IChwLCBjKT0+IHA9PT1jIHx8ICQuY29udGFpbnMocCwgYyk7XHJcbiAgICAgIGlmKGUudHlwZT09PSdtb3VzZW1vdmUnKSB7XHJcbiAgICAgICAgZmlsdGVyRGF0YS5wYWdlWCA9IGUucGFnZVg7XHJcbiAgICAgICAgZmlsdGVyRGF0YS5wYWdlWSA9IGUucGFnZVk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGUucmVsYXRlZFRhcmdldCAmJiB+dHlwZXMuaW5kZXhPZihlLnR5cGUpICYmIGNvbnRhaW5zKGVsZW1lbnQsIGUudGFyZ2V0KSAmJiBjb250YWlucyhlbGVtZW50LCBlLnJlbGF0ZWRUYXJnZXQpPyB7Li4uZSwgLi4uZmlsdGVyRGF0YX06IGU7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5kcmFnID0gbmV3IERyYWcodGhpcy53bmQsIHRoaXMuZG9jLCB0aGlzKTtcclxuXHJcbiAgICB0aGlzLmFuaW1hdGUoKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICBkZWxldGUgdGhpcy5iaW5kcy5hbmltYXRlO1xyXG4gICAgJCh0aGlzLnduZCkub2ZmKCdyZXNpemUnLCB0aGlzLmJpbmRzLm9uV2luZG93UmVzaXplKTtcclxuICAgIHRoaXMubW91c2VFdmVudHMuZGlzcG9zZSgpO1xyXG4gICAgdGhpcy5kcmFnLmRpc3Bvc2UoKTtcclxuICAgIHRoaXMuY29udHJvbHMuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgd2lkdGgoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5qQ29udGFpbmVyLndpZHRoKCk7XHJcbiAgfVxyXG5cclxuICBoZWlnaHQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5qQ29udGFpbmVyLmhlaWdodCgpO1xyXG4gIH1cclxuXHJcbiAgc2V0RXh0cmFMaWdodGluZyh2KSB7XHJcbiAgICB0aGlzLmxpZ2h0LmludGVuc2l0eSA9IHY7XHJcbiAgfVxyXG5cclxuICBnZXRPcmJpdCgpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbnRyb2xzO1xyXG4gIH1cclxuXHJcbiAgc2V0Q29udHJvbHNTdGF0ZShzdGF0ZSkge1xyXG4gICAgdGhpcy5jb250cm9scy5lbmFibGVkID0gc3RhdGU7XHJcbiAgfVxyXG5cclxuICBnZXRDb250cm9sc1N0YXRlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY29udHJvbHMuZW5hYmxlZDtcclxuICB9XHJcblxyXG4gIG9uV2luZG93UmVzaXplKCkge1xyXG4gICAgY29uc3QgdXBkYXRlQ2FtZXJhID0gKGNhbWVyYSk9PiB7XHJcbiAgICAgIGNhbWVyYS5hc3BlY3QgPSB0aGlzLndpZHRoKCkvdGhpcy5oZWlnaHQoKTtcclxuICAgICAgY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcclxuICAgIH0sXHJcbiAgICB1cGRhdGVSZW5kZXJlciA9IChyZW5kZXJlcik9PiB7XHJcbiAgICAgIHJlbmRlcmVyLnNldFNpemUodGhpcy53aWR0aCgpLCB0aGlzLmhlaWdodCgpKTtcclxuICAgIH07XHJcblxyXG4gICAgdXBkYXRlQ2FtZXJhKHRoaXMuY2FtZXJhKTtcclxuICAgIHVwZGF0ZVJlbmRlcmVyKHRoaXMucmVuZGVyZXIpO1xyXG4gICAgdXBkYXRlUmVuZGVyZXIodGhpcy5jc3NSZW5kZXJlcik7XHJcbiAgfVxyXG5cclxuICBhZGRPYmplY3Qob2JqZWN0KSB7XHJcbiAgICB0aGlzLnNjZW5lLmFkZChvYmplY3QpO1xyXG4gIH1cclxuXHJcbiAgYWRkQ3NzT2JqZWN0KG9iamVjdCkge1xyXG4gICAgdGhpcy5jc3NTY2VuZS5hZGQob2JqZWN0KTtcclxuICB9XHJcblxyXG4gIHJlbW92ZUNzc09iamVjdChvYmplY3QpIHtcclxuICAgIHRoaXMuY3NzU2NlbmUucmVtb3ZlKG9iamVjdCk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVPYmplY3Qob2JqZWN0KSB7XHJcbiAgICB0aGlzLnNjZW5lLnJlbW92ZShvYmplY3QpO1xyXG4gIH1cclxuXHJcbiAgYW5pbWF0ZSgpIHtcclxuICAgIGlmKHRoaXMuYmluZHMuYW5pbWF0ZSkge1xyXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5iaW5kcy5hbmltYXRlKTtcclxuICAgIH1cclxuICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgfVxyXG5cclxuICBhZGRSZW5kZXJDYWxsYmFjayhjbGIpIHtcclxuICAgIHRoaXMucmVuZGVyQ2FsbGJhY2tzLnB1c2goY2xiKTtcclxuICB9XHJcblxyXG4gIHJlbW92ZVJlbmRlckNhbGxiYWNrKGNsYikge1xyXG4gICAgY29uc3QgaSA9IHRoaXMucmVuZGVyQ2FsbGJhY2tzLmluZGV4T2YoY2xiKTtcclxuICAgIGlmKH5pKSB7XHJcbiAgICAgIHRoaXMucmVuZGVyQ2FsbGJhY2tzLnNwbGljZShpLCAxKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IGRlbHRhVGltZSA9IHRoaXMuY2xvY2suZ2V0RGVsdGEoKTtcclxuICAgIHRoaXMuY29udHJvbHMudXBkYXRlKGRlbHRhVGltZSk7XHJcbiAgICBmb3IobGV0IGNsYiBvZiB0aGlzLnJlbmRlckNhbGxiYWNrcykge1xyXG4gICAgICBjbGIoZGVsdGFUaW1lKTtcclxuICAgIH1cclxuICAgIHRoaXMuY3NzUmVuZGVyZXIucmVuZGVyKHRoaXMuY3NzU2NlbmUsIHRoaXMuY2FtZXJhKTtcclxuICAgIHRoaXMucmVuZGVyZXIucmVuZGVyKHRoaXMuc2NlbmUsIHRoaXMuY2FtZXJhKTtcclxuICB9XHJcblxyXG4gIHByb2Nlc3NHZW9tZXRyeShidWZHZW9tZXRyeSwgbWVzaCkge1xyXG4gICAgbWVzaC5nZW9tZXRyeSA9IGJ1Zkdlb21ldHJ5O1xyXG4gICAgLy8gT2J0YWluIGEgR2VvbWV0cnlcclxuICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLkdlb21ldHJ5KCkuZnJvbUJ1ZmZlckdlb21ldHJ5KGJ1Zkdlb21ldHJ5KTtcclxuICAgIC8vIE1lcmdlIHRoZSB2ZXJ0aWNlcyBzbyB0aGUgdHJpYW5nbGUgc291cCBpcyBjb252ZXJ0ZWQgdG8gaW5kZXhlZCB0cmlhbmdsZXNcclxuICAgIGdlb21ldHJ5Lm1lcmdlVmVydGljZXMoKTtcclxuICAgIC8vIENvbnZlcnQgYWdhaW4gdG8gQnVmZmVyR2VvbWV0cnksIGluZGV4ZWRcclxuICAgIGNvbnN0IGluZGV4ZWRCdWZmZXJHZW9tID0gdGhpcy5jcmVhdGVJbmRleGVkQnVmZmVyR2VvbWV0cnlGcm9tR2VvbWV0cnkoZ2VvbWV0cnkpO1xyXG4gICAgLy8gQ3JlYXRlIGluZGV4IGFycmF5cyBtYXBwaW5nIHRoZSBpbmRleGVkIHZlcnRpY2VzIHRvIGJ1Zkdlb21ldHJ5IHZlcnRpY2VzXHJcbiAgICByZXR1cm4gdGhpcy5tYXBJbmRpY2VzKGJ1Zkdlb21ldHJ5LCBpbmRleGVkQnVmZmVyR2VvbSk7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVJbmRleGVkQnVmZmVyR2VvbWV0cnlGcm9tR2VvbWV0cnkoZ2VvbWV0cnkpIHtcclxuICAgIGNvbnN0IG51bVZlcnRpY2VzID0gZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoO1xyXG4gICAgY29uc3QgbnVtRmFjZXMgPSBnZW9tZXRyeS5mYWNlcy5sZW5ndGg7XHJcblxyXG4gICAgY29uc3QgYnVmZmVyR2VvbSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpO1xyXG4gICAgY29uc3QgdmVydGljZXMgPSBuZXcgRmxvYXQzMkFycmF5KG51bVZlcnRpY2VzICogMyk7XHJcbiAgICBjb25zdCBpbmRpY2VzID0gbmV3IChudW1GYWNlcyAqIDMgPiA2NTUzNSA/IFVpbnQzMkFycmF5IDogVWludDE2QXJyYXkpKG51bUZhY2VzICogMyk7XHJcblxyXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IG51bVZlcnRpY2VzOyBpKyspIHtcclxuICAgICAgY29uc3QgcCA9IGdlb21ldHJ5LnZlcnRpY2VzW2ldO1xyXG4gICAgICBjb25zdCBpMyA9IGkgKiAzO1xyXG4gICAgICB2ZXJ0aWNlc1tpM10gPSBwLng7XHJcbiAgICAgIHZlcnRpY2VzW2kzICsgMV0gPSBwLnk7XHJcbiAgICAgIHZlcnRpY2VzW2kzICsgMl0gPSBwLno7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IG51bUZhY2VzOyBpKyspIHtcclxuICAgICAgY29uc3QgZiA9IGdlb21ldHJ5LmZhY2VzW2ldO1xyXG4gICAgICBjb25zdCBpMyA9IGkgKiAzO1xyXG4gICAgICBpbmRpY2VzW2kzXSA9IGYuYTtcclxuICAgICAgaW5kaWNlc1tpMyArIDFdID0gZi5iO1xyXG4gICAgICBpbmRpY2VzW2kzICsgMl0gPSBmLmM7XHJcbiAgICB9XHJcblxyXG4gICAgYnVmZmVyR2VvbS5zZXRJbmRleChuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGluZGljZXMsIDEpKTtcclxuICAgIGJ1ZmZlckdlb20uYWRkQXR0cmlidXRlKCdwb3NpdGlvbicsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUodmVydGljZXMsIDMpKTtcclxuXHJcbiAgICByZXR1cm4gYnVmZmVyR2VvbTtcclxuICB9XHJcblxyXG4gIGlzRXF1YWwoeDEsIHkxLCB6MSwgeDIsIHkyLCB6Mikge1xyXG4gICAgY29uc3QgZGVsdGEgPSAwLjAwMDAwMTtcclxuICAgIHJldHVybiBNYXRoLmFicyh4MiAtIHgxKSA8IGRlbHRhICYmXHJcbiAgICBNYXRoLmFicyh5MiAtIHkxKSA8IGRlbHRhICYmXHJcbiAgICBNYXRoLmFicyh6MiAtIHoxKSA8IGRlbHRhO1xyXG4gIH1cclxuXHJcbiAgbWFwSW5kaWNlcyhidWZHZW9tZXRyeSwgaW5kZXhlZEJ1ZmZlckdlb20pIHtcclxuICAgIC8vIENyZWF0ZXMgbWFwcGVkVmVydGljZXMsIG1hcHBlZEluZGljZXMgYW5kIG1hcHBlZEFzc29jaWF0aW9uIGluIGJ1Zkdlb21ldHJ5XHJcbiAgICBjb25zdCB2ZXJ0aWNlcyA9IGJ1Zkdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7XHJcbiAgICBjb25zdCBpZHhWZXJ0aWNlcyA9IGluZGV4ZWRCdWZmZXJHZW9tLmF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7XHJcbiAgICBjb25zdCBpbmRpY2VzID0gaW5kZXhlZEJ1ZmZlckdlb20uaW5kZXguYXJyYXk7XHJcblxyXG4gICAgY29uc3QgbnVtSWR4VmVydGljZXMgPSBpZHhWZXJ0aWNlcy5sZW5ndGggLyAzO1xyXG4gICAgY29uc3QgbnVtVmVydGljZXMgPSB2ZXJ0aWNlcy5sZW5ndGggLyAzO1xyXG5cclxuICAgIGJ1Zkdlb21ldHJ5Lm1hcHBlZFZlcnRpY2VzID0gaWR4VmVydGljZXM7XHJcbiAgICBidWZHZW9tZXRyeS5tYXBwZWRJbmRpY2VzID0gaW5kaWNlcztcclxuICAgIGJ1Zkdlb21ldHJ5Lm1hcHBlZEFzc29jaWF0aW9uID0gW107XHJcblxyXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IG51bUlkeFZlcnRpY2VzOyBpKyspIHtcclxuICAgICAgY29uc3QgYXNzb2NpYXRpb24gPSBbXTtcclxuICAgICAgYnVmR2VvbWV0cnkubWFwcGVkQXNzb2NpYXRpb24ucHVzaChhc3NvY2lhdGlvbik7XHJcbiAgICAgIGNvbnN0IGkzID0gaSAqIDM7XHJcbiAgICAgIGZvcihsZXQgaiA9IDA7IGogPCBudW1WZXJ0aWNlczsgaisrKSB7XHJcbiAgICAgICAgY29uc3QgajMgPSBqICogMztcclxuICAgICAgICBpZiAodGhpcy5pc0VxdWFsKGlkeFZlcnRpY2VzW2kzXSwgaWR4VmVydGljZXNbaTMgKyAxXSwgaWR4VmVydGljZXNbaTMgKyAyXSxcclxuICAgICAgICB2ZXJ0aWNlc1tqM10sIHZlcnRpY2VzW2ozICsgMV0sIHZlcnRpY2VzW2ozICsgMl0pKSB7XHJcbiAgICAgICAgICBhc3NvY2lhdGlvbi5wdXNoKGozKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB7dmVydGljZXM6IGJ1Zkdlb21ldHJ5Lm1hcHBlZFZlcnRpY2VzLCBpbmRpY2VzOiBidWZHZW9tZXRyeS5tYXBwZWRJbmRpY2VzfTtcclxuICB9XHJcblxyXG4gIG9uZU5vZGVQb3NpdGlvbkNhbGxiYWNrKHAsIHEpIHtcclxuICAgIHRoaXMucG9zaXRpb24uc2V0KHAueCwgcC55LCBwLnopO1xyXG4gICAgdGhpcy5xdWF0ZXJuaW9uLnNldChxLngsIHEueSwgcS56LCBxLncpO1xyXG4gIH1cclxuXHJcbiAgbXVsdHlOb2RlUG9zaXRpb25DYWxsYmFjayhub2RlLCBwLCBuKSB7XHJcbiAgICBjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XHJcbiAgICBjb25zdCB2b2x1bWVQb3NpdGlvbnMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5O1xyXG4gICAgY29uc3Qgdm9sdW1lTm9ybWFscyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMubm9ybWFsLmFycmF5O1xyXG4gICAgY29uc3QgYXNzb2NWZXJ0ZXggPSBnZW9tZXRyeS5tYXBwZWRBc3NvY2lhdGlvbltub2RlXTtcclxuXHJcbiAgICBmb3IobGV0IGsgPSAwOyBrIDwgYXNzb2NWZXJ0ZXgubGVuZ3RoOyBrKyspIHtcclxuICAgICAgICBsZXQgaW5kZXhWZXJ0ZXggPSBhc3NvY1ZlcnRleFtrXTtcclxuICAgICAgICB2b2x1bWVQb3NpdGlvbnNbaW5kZXhWZXJ0ZXhdID0gcC54O1xyXG4gICAgICAgIHZvbHVtZU5vcm1hbHNbaW5kZXhWZXJ0ZXhdID0gbi54O1xyXG4gICAgICAgICsraW5kZXhWZXJ0ZXg7XHJcbiAgICAgICAgdm9sdW1lUG9zaXRpb25zW2luZGV4VmVydGV4XSA9IHAueTtcclxuICAgICAgICB2b2x1bWVOb3JtYWxzW2luZGV4VmVydGV4XSA9IG4ueTtcclxuICAgICAgICArK2luZGV4VmVydGV4O1xyXG4gICAgICAgIHZvbHVtZVBvc2l0aW9uc1tpbmRleFZlcnRleF0gPSBwLno7XHJcbiAgICAgICAgdm9sdW1lTm9ybWFsc1tpbmRleFZlcnRleF0gPSBuLno7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBtdWx0eU5vZGVQb3NpdGlvblBvc3RDYWxsYmFjaygpIHtcclxuICAgIGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcclxuICAgIGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24ubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gICAgZ2VvbWV0cnkuYXR0cmlidXRlcy5ub3JtYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgcGF0aFBvc2l0aW9uQ2FsbGJhY2sobm9kZSwgcCkge1xyXG4gICAgY29uc3QgcG9zaXRpb25zID0gdGhpcy5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5O1xyXG5cdFx0bGV0IGkgPSAzICogbm9kZTtcclxuXHRcdHBvc2l0aW9uc1tpKytdID0gcC54O1xyXG5cdFx0cG9zaXRpb25zW2krK10gPSBwLnk7XHJcblx0XHRwb3NpdGlvbnNbaV0gPSBwLno7XHJcbiAgfVxyXG5cclxuICBwYXRoUG9zaXRpb25Qb3N0Q2FsbGJhY2soKSB7XHJcbiAgICBjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XHJcbiAgICBnZW9tZXRyeS5jb21wdXRlVmVydGV4Tm9ybWFscygpO1xyXG4gICAgZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLm5vcm1hbC5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9WaXN1YWxXb3JsZC5qcyIsImltcG9ydCBDb250cm9sbGVyIGZyb20gJy4vQ29udHJvbGxlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXaWRnZXRDb250cm9sbGVyIGV4dGVuZHMgQ29udHJvbGxlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZpZXcpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLnZpZXcgPSB2aWV3O1xyXG4gICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICB0b2dsZSgpIHtcclxuICAgIHRoaXMudmlzaWJsZSA9ICF0aGlzLnZpc2libGU7XHJcbiAgICB0aGlzLmZpcmVDaGFuZ2UoKTtcclxuICB9XHJcblxyXG4gIGhpZGUoKSB7XHJcbiAgICB0aGlzLnZpc2libGUgPSBmYWxzZTtcclxuICAgIHRoaXMuZmlyZUNoYW5nZSgpO1xyXG4gIH1cclxuXHJcbiAgZmlyZUNoYW5nZSgpIHtcclxuICAgIGlmKHRoaXMub25DaGFuZ2UpIHtcclxuICAgICAgdGhpcy5vbkNoYW5nZSgpO1xyXG4gICAgfVxyXG4gICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVWaWV3KCkge1xyXG4gICAgaWYodGhpcy52aWV3KSB7XHJcbiAgICAgIHRoaXMudmlldy5zZXRTdGF0ZSgnd2lkRmxvYXRXbmQnLCB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMudmlzaWJsZSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvV2lkZ2V0Q29udHJvbGxlci5qcyIsImltcG9ydCBUYXJnZXQgZnJvbSAnLi9UYXJnZXQnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2lyY2xlVGFyZ2V0IGV4dGVuZHMgVGFyZ2V0IHtcclxuXHJcbiAgY29uc3RydWN0b3IoeCwgeSwgcikge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMucCA9IHtcclxuICAgICAgeCxcclxuICAgICAgeSxcclxuICAgICAgclxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHRlc3RJbnRlcnNlY3Rpb24oZSwgZGF0YSkge1xyXG4gICAgbGV0IHJlcztcclxuICAgIGNvbnN0IHt4LCB5fSA9IGRhdGEsIHAgPSB0aGlzLnA7XHJcbiAgICBpZigoeC1wLngpKih4LXAueCkrKHktcC55KSooeS1wLnkpPD1wLnIqcC5yKSB7XHJcbiAgICAgIHJlcyA9IHtcclxuICAgICAgICB0YXJnZXQ6IHRoaXMsXHJcbiAgICAgICAgZGF0YVxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL3RhcmdldHMvQ2lyY2xlVGFyZ2V0LmpzIiwiaW1wb3J0IFRhcmdldCBmcm9tICcuL1RhcmdldCc7XHJcbmltcG9ydCBCYXNlTWF0aFV0aWxzIGZyb20gJy4uL0Jhc2VNYXRoVXRpbHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9seVRhcmdldCBleHRlbmRzIFRhcmdldCB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHBvbHkpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLnBvbHkgPSBwb2x5O1xyXG4gIH1cclxuXHJcbiAgdGVzdEludGVyc2VjdGlvbihlLCBwKSB7XHJcbiAgICByZXR1cm4gQmFzZU1hdGhVdGlscy5pc0luc2lkZVBvbHkodGhpcy5wb2x5LCBwKT8ge1xyXG4gICAgICB0YXJnZXQ6IHRoaXMsXHJcbiAgICAgIGRhdGE6IHBcclxuICAgIH06IHVuZGVmaW5lZDtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL3RhcmdldHMvUG9seVRhcmdldC5qcyIsIi8vIHN0YXRzLmpzIC0gaHR0cDovL2dpdGh1Yi5jb20vbXJkb29iL3N0YXRzLmpzXG4oZnVuY3Rpb24oZixlKXtcIm9iamVjdFwiPT09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUoKTpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShlKTpmLlN0YXRzPWUoKX0pKHRoaXMsZnVuY3Rpb24oKXt2YXIgZj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoYSl7Yy5hcHBlbmRDaGlsZChhLmRvbSk7cmV0dXJuIGF9ZnVuY3Rpb24gdShhKXtmb3IodmFyIGQ9MDtkPGMuY2hpbGRyZW4ubGVuZ3RoO2QrKyljLmNoaWxkcmVuW2RdLnN0eWxlLmRpc3BsYXk9ZD09PWE/XCJibG9ja1wiOlwibm9uZVwiO2w9YX12YXIgbD0wLGM9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtjLnN0eWxlLmNzc1RleHQ9XCJwb3NpdGlvbjpmaXhlZDt0b3A6MDtsZWZ0OjA7Y3Vyc29yOnBvaW50ZXI7b3BhY2l0eTowLjk7ei1pbmRleDoxMDAwMFwiO2MuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsZnVuY3Rpb24oYSl7YS5wcmV2ZW50RGVmYXVsdCgpO1xudSgrK2wlYy5jaGlsZHJlbi5sZW5ndGgpfSwhMSk7dmFyIGs9KHBlcmZvcm1hbmNlfHxEYXRlKS5ub3coKSxnPWssYT0wLHI9ZShuZXcgZi5QYW5lbChcIkZQU1wiLFwiIzBmZlwiLFwiIzAwMlwiKSksaD1lKG5ldyBmLlBhbmVsKFwiTVNcIixcIiMwZjBcIixcIiMwMjBcIikpO2lmKHNlbGYucGVyZm9ybWFuY2UmJnNlbGYucGVyZm9ybWFuY2UubWVtb3J5KXZhciB0PWUobmV3IGYuUGFuZWwoXCJNQlwiLFwiI2YwOFwiLFwiIzIwMVwiKSk7dSgwKTtyZXR1cm57UkVWSVNJT046MTYsZG9tOmMsYWRkUGFuZWw6ZSxzaG93UGFuZWw6dSxiZWdpbjpmdW5jdGlvbigpe2s9KHBlcmZvcm1hbmNlfHxEYXRlKS5ub3coKX0sZW5kOmZ1bmN0aW9uKCl7YSsrO3ZhciBjPShwZXJmb3JtYW5jZXx8RGF0ZSkubm93KCk7aC51cGRhdGUoYy1rLDIwMCk7aWYoYz5nKzFFMyYmKHIudXBkYXRlKDFFMyphLyhjLWcpLDEwMCksZz1jLGE9MCx0KSl7dmFyIGQ9cGVyZm9ybWFuY2UubWVtb3J5O3QudXBkYXRlKGQudXNlZEpTSGVhcFNpemUvXG4xMDQ4NTc2LGQuanNIZWFwU2l6ZUxpbWl0LzEwNDg1NzYpfXJldHVybiBjfSx1cGRhdGU6ZnVuY3Rpb24oKXtrPXRoaXMuZW5kKCl9LGRvbUVsZW1lbnQ6YyxzZXRNb2RlOnV9fTtmLlBhbmVsPWZ1bmN0aW9uKGUsZixsKXt2YXIgYz1JbmZpbml0eSxrPTAsZz1NYXRoLnJvdW5kLGE9Zyh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpb3x8MSkscj04MCphLGg9NDgqYSx0PTMqYSx2PTIqYSxkPTMqYSxtPTE1KmEsbj03NCphLHA9MzAqYSxxPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7cS53aWR0aD1yO3EuaGVpZ2h0PWg7cS5zdHlsZS5jc3NUZXh0PVwid2lkdGg6ODBweDtoZWlnaHQ6NDhweFwiO3ZhciBiPXEuZ2V0Q29udGV4dChcIjJkXCIpO2IuZm9udD1cImJvbGQgXCIrOSphK1wicHggSGVsdmV0aWNhLEFyaWFsLHNhbnMtc2VyaWZcIjtiLnRleHRCYXNlbGluZT1cInRvcFwiO2IuZmlsbFN0eWxlPWw7Yi5maWxsUmVjdCgwLDAscixoKTtiLmZpbGxTdHlsZT1mO2IuZmlsbFRleHQoZSx0LHYpO1xuYi5maWxsUmVjdChkLG0sbixwKTtiLmZpbGxTdHlsZT1sO2IuZ2xvYmFsQWxwaGE9Ljk7Yi5maWxsUmVjdChkLG0sbixwKTtyZXR1cm57ZG9tOnEsdXBkYXRlOmZ1bmN0aW9uKGgsdyl7Yz1NYXRoLm1pbihjLGgpO2s9TWF0aC5tYXgoayxoKTtiLmZpbGxTdHlsZT1sO2IuZ2xvYmFsQWxwaGE9MTtiLmZpbGxSZWN0KDAsMCxyLG0pO2IuZmlsbFN0eWxlPWY7Yi5maWxsVGV4dChnKGgpK1wiIFwiK2UrXCIgKFwiK2coYykrXCItXCIrZyhrKStcIilcIix0LHYpO2IuZHJhd0ltYWdlKHEsZCthLG0sbi1hLHAsZCxtLG4tYSxwKTtiLmZpbGxSZWN0KGQrbi1hLG0sYSxwKTtiLmZpbGxTdHlsZT1sO2IuZ2xvYmFsQWxwaGE9Ljk7Yi5maWxsUmVjdChkK24tYSxtLGEsZygoMS1oL3cpKnApKX19fTtyZXR1cm4gZn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3N0YXRzLmpzL2J1aWxkL3N0YXRzLm1pbi5qc1xuLy8gbW9kdWxlIGlkID0gNjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqKiBJTVBPUlRTIEZST00gaW1wb3J0cy1sb2FkZXIgKioqL1xudmFyIGRlZmluZSA9IGZhbHNlO1xuXG4vKiFcbiAqIGpRdWVyeSBNb3VzZXdoZWVsIDMuMS4xM1xuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqL1xuXG4oZnVuY3Rpb24gKGZhY3RvcnkpIHtcbiAgICBpZiAoIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAgICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgICAgICBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gTm9kZS9Db21tb25KUyBzdHlsZSBmb3IgQnJvd3NlcmlmeVxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3Rvcnk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQnJvd3NlciBnbG9iYWxzXG4gICAgICAgIGZhY3RvcnkoalF1ZXJ5KTtcbiAgICB9XG59KGZ1bmN0aW9uICgkKSB7XG5cbiAgICB2YXIgdG9GaXggID0gWyd3aGVlbCcsICdtb3VzZXdoZWVsJywgJ0RPTU1vdXNlU2Nyb2xsJywgJ01vek1vdXNlUGl4ZWxTY3JvbGwnXSxcbiAgICAgICAgdG9CaW5kID0gKCAnb253aGVlbCcgaW4gZG9jdW1lbnQgfHwgZG9jdW1lbnQuZG9jdW1lbnRNb2RlID49IDkgKSA/XG4gICAgICAgICAgICAgICAgICAgIFsnd2hlZWwnXSA6IFsnbW91c2V3aGVlbCcsICdEb21Nb3VzZVNjcm9sbCcsICdNb3pNb3VzZVBpeGVsU2Nyb2xsJ10sXG4gICAgICAgIHNsaWNlICA9IEFycmF5LnByb3RvdHlwZS5zbGljZSxcbiAgICAgICAgbnVsbExvd2VzdERlbHRhVGltZW91dCwgbG93ZXN0RGVsdGE7XG5cbiAgICBpZiAoICQuZXZlbnQuZml4SG9va3MgKSB7XG4gICAgICAgIGZvciAoIHZhciBpID0gdG9GaXgubGVuZ3RoOyBpOyApIHtcbiAgICAgICAgICAgICQuZXZlbnQuZml4SG9va3NbIHRvRml4Wy0taV0gXSA9ICQuZXZlbnQubW91c2VIb29rcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzcGVjaWFsID0gJC5ldmVudC5zcGVjaWFsLm1vdXNld2hlZWwgPSB7XG4gICAgICAgIHZlcnNpb246ICczLjEuMTInLFxuXG4gICAgICAgIHNldHVwOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICggdGhpcy5hZGRFdmVudExpc3RlbmVyICkge1xuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gdG9CaW5kLmxlbmd0aDsgaTsgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lciggdG9CaW5kWy0taV0sIGhhbmRsZXIsIGZhbHNlICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9ubW91c2V3aGVlbCA9IGhhbmRsZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTdG9yZSB0aGUgbGluZSBoZWlnaHQgYW5kIHBhZ2UgaGVpZ2h0IGZvciB0aGlzIHBhcnRpY3VsYXIgZWxlbWVudFxuICAgICAgICAgICAgJC5kYXRhKHRoaXMsICdtb3VzZXdoZWVsLWxpbmUtaGVpZ2h0Jywgc3BlY2lhbC5nZXRMaW5lSGVpZ2h0KHRoaXMpKTtcbiAgICAgICAgICAgICQuZGF0YSh0aGlzLCAnbW91c2V3aGVlbC1wYWdlLWhlaWdodCcsIHNwZWNpYWwuZ2V0UGFnZUhlaWdodCh0aGlzKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdGVhcmRvd246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSB0b0JpbmQubGVuZ3RoOyBpOyApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCB0b0JpbmRbLS1pXSwgaGFuZGxlciwgZmFsc2UgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMub25tb3VzZXdoZWVsID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIENsZWFuIHVwIHRoZSBkYXRhIHdlIGFkZGVkIHRvIHRoZSBlbGVtZW50XG4gICAgICAgICAgICAkLnJlbW92ZURhdGEodGhpcywgJ21vdXNld2hlZWwtbGluZS1oZWlnaHQnKTtcbiAgICAgICAgICAgICQucmVtb3ZlRGF0YSh0aGlzLCAnbW91c2V3aGVlbC1wYWdlLWhlaWdodCcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldExpbmVIZWlnaHQ6IGZ1bmN0aW9uKGVsZW0pIHtcbiAgICAgICAgICAgIHZhciAkZWxlbSA9ICQoZWxlbSksXG4gICAgICAgICAgICAgICAgJHBhcmVudCA9ICRlbGVtWydvZmZzZXRQYXJlbnQnIGluICQuZm4gPyAnb2Zmc2V0UGFyZW50JyA6ICdwYXJlbnQnXSgpO1xuICAgICAgICAgICAgaWYgKCEkcGFyZW50Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICRwYXJlbnQgPSAkKCdib2R5Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoJHBhcmVudC5jc3MoJ2ZvbnRTaXplJyksIDEwKSB8fCBwYXJzZUludCgkZWxlbS5jc3MoJ2ZvbnRTaXplJyksIDEwKSB8fCAxNjtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRQYWdlSGVpZ2h0OiBmdW5jdGlvbihlbGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gJChlbGVtKS5oZWlnaHQoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgYWRqdXN0T2xkRGVsdGFzOiB0cnVlLCAvLyBzZWUgc2hvdWxkQWRqdXN0T2xkRGVsdGFzKCkgYmVsb3dcbiAgICAgICAgICAgIG5vcm1hbGl6ZU9mZnNldDogdHJ1ZSAgLy8gY2FsbHMgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZvciBlYWNoIGV2ZW50XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgJC5mbi5leHRlbmQoe1xuICAgICAgICBtb3VzZXdoZWVsOiBmdW5jdGlvbihmbikge1xuICAgICAgICAgICAgcmV0dXJuIGZuID8gdGhpcy5iaW5kKCdtb3VzZXdoZWVsJywgZm4pIDogdGhpcy50cmlnZ2VyKCdtb3VzZXdoZWVsJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdW5tb3VzZXdoZWVsOiBmdW5jdGlvbihmbikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudW5iaW5kKCdtb3VzZXdoZWVsJywgZm4pO1xuICAgICAgICB9XG4gICAgfSk7XG5cblxuICAgIGZ1bmN0aW9uIGhhbmRsZXIoZXZlbnQpIHtcbiAgICAgICAgdmFyIG9yZ0V2ZW50ICAgPSBldmVudCB8fCB3aW5kb3cuZXZlbnQsXG4gICAgICAgICAgICBhcmdzICAgICAgID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLFxuICAgICAgICAgICAgZGVsdGEgICAgICA9IDAsXG4gICAgICAgICAgICBkZWx0YVggICAgID0gMCxcbiAgICAgICAgICAgIGRlbHRhWSAgICAgPSAwLFxuICAgICAgICAgICAgYWJzRGVsdGEgICA9IDAsXG4gICAgICAgICAgICBvZmZzZXRYICAgID0gMCxcbiAgICAgICAgICAgIG9mZnNldFkgICAgPSAwO1xuICAgICAgICBldmVudCA9ICQuZXZlbnQuZml4KG9yZ0V2ZW50KTtcbiAgICAgICAgZXZlbnQudHlwZSA9ICdtb3VzZXdoZWVsJztcblxuICAgICAgICAvLyBPbGQgc2Nob29sIHNjcm9sbHdoZWVsIGRlbHRhXG4gICAgICAgIGlmICggJ2RldGFpbCcgICAgICBpbiBvcmdFdmVudCApIHsgZGVsdGFZID0gb3JnRXZlbnQuZGV0YWlsICogLTE7ICAgICAgfVxuICAgICAgICBpZiAoICd3aGVlbERlbHRhJyAgaW4gb3JnRXZlbnQgKSB7IGRlbHRhWSA9IG9yZ0V2ZW50LndoZWVsRGVsdGE7ICAgICAgIH1cbiAgICAgICAgaWYgKCAnd2hlZWxEZWx0YVknIGluIG9yZ0V2ZW50ICkgeyBkZWx0YVkgPSBvcmdFdmVudC53aGVlbERlbHRhWTsgICAgICB9XG4gICAgICAgIGlmICggJ3doZWVsRGVsdGFYJyBpbiBvcmdFdmVudCApIHsgZGVsdGFYID0gb3JnRXZlbnQud2hlZWxEZWx0YVggKiAtMTsgfVxuXG4gICAgICAgIC8vIEZpcmVmb3ggPCAxNyBob3Jpem9udGFsIHNjcm9sbGluZyByZWxhdGVkIHRvIERPTU1vdXNlU2Nyb2xsIGV2ZW50XG4gICAgICAgIGlmICggJ2F4aXMnIGluIG9yZ0V2ZW50ICYmIG9yZ0V2ZW50LmF4aXMgPT09IG9yZ0V2ZW50LkhPUklaT05UQUxfQVhJUyApIHtcbiAgICAgICAgICAgIGRlbHRhWCA9IGRlbHRhWSAqIC0xO1xuICAgICAgICAgICAgZGVsdGFZID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldCBkZWx0YSB0byBiZSBkZWx0YVkgb3IgZGVsdGFYIGlmIGRlbHRhWSBpcyAwIGZvciBiYWNrd2FyZHMgY29tcGF0YWJpbGl0aXlcbiAgICAgICAgZGVsdGEgPSBkZWx0YVkgPT09IDAgPyBkZWx0YVggOiBkZWx0YVk7XG5cbiAgICAgICAgLy8gTmV3IHNjaG9vbCB3aGVlbCBkZWx0YSAod2hlZWwgZXZlbnQpXG4gICAgICAgIGlmICggJ2RlbHRhWScgaW4gb3JnRXZlbnQgKSB7XG4gICAgICAgICAgICBkZWx0YVkgPSBvcmdFdmVudC5kZWx0YVkgKiAtMTtcbiAgICAgICAgICAgIGRlbHRhICA9IGRlbHRhWTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoICdkZWx0YVgnIGluIG9yZ0V2ZW50ICkge1xuICAgICAgICAgICAgZGVsdGFYID0gb3JnRXZlbnQuZGVsdGFYO1xuICAgICAgICAgICAgaWYgKCBkZWx0YVkgPT09IDAgKSB7IGRlbHRhICA9IGRlbHRhWCAqIC0xOyB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBObyBjaGFuZ2UgYWN0dWFsbHkgaGFwcGVuZWQsIG5vIHJlYXNvbiB0byBnbyBhbnkgZnVydGhlclxuICAgICAgICBpZiAoIGRlbHRhWSA9PT0gMCAmJiBkZWx0YVggPT09IDAgKSB7IHJldHVybjsgfVxuXG4gICAgICAgIC8vIE5lZWQgdG8gY29udmVydCBsaW5lcyBhbmQgcGFnZXMgdG8gcGl4ZWxzIGlmIHdlIGFyZW4ndCBhbHJlYWR5IGluIHBpeGVsc1xuICAgICAgICAvLyBUaGVyZSBhcmUgdGhyZWUgZGVsdGEgbW9kZXM6XG4gICAgICAgIC8vICAgKiBkZWx0YU1vZGUgMCBpcyBieSBwaXhlbHMsIG5vdGhpbmcgdG8gZG9cbiAgICAgICAgLy8gICAqIGRlbHRhTW9kZSAxIGlzIGJ5IGxpbmVzXG4gICAgICAgIC8vICAgKiBkZWx0YU1vZGUgMiBpcyBieSBwYWdlc1xuICAgICAgICBpZiAoIG9yZ0V2ZW50LmRlbHRhTW9kZSA9PT0gMSApIHtcbiAgICAgICAgICAgIHZhciBsaW5lSGVpZ2h0ID0gJC5kYXRhKHRoaXMsICdtb3VzZXdoZWVsLWxpbmUtaGVpZ2h0Jyk7XG4gICAgICAgICAgICBkZWx0YSAgKj0gbGluZUhlaWdodDtcbiAgICAgICAgICAgIGRlbHRhWSAqPSBsaW5lSGVpZ2h0O1xuICAgICAgICAgICAgZGVsdGFYICo9IGxpbmVIZWlnaHQ7XG4gICAgICAgIH0gZWxzZSBpZiAoIG9yZ0V2ZW50LmRlbHRhTW9kZSA9PT0gMiApIHtcbiAgICAgICAgICAgIHZhciBwYWdlSGVpZ2h0ID0gJC5kYXRhKHRoaXMsICdtb3VzZXdoZWVsLXBhZ2UtaGVpZ2h0Jyk7XG4gICAgICAgICAgICBkZWx0YSAgKj0gcGFnZUhlaWdodDtcbiAgICAgICAgICAgIGRlbHRhWSAqPSBwYWdlSGVpZ2h0O1xuICAgICAgICAgICAgZGVsdGFYICo9IHBhZ2VIZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdG9yZSBsb3dlc3QgYWJzb2x1dGUgZGVsdGEgdG8gbm9ybWFsaXplIHRoZSBkZWx0YSB2YWx1ZXNcbiAgICAgICAgYWJzRGVsdGEgPSBNYXRoLm1heCggTWF0aC5hYnMoZGVsdGFZKSwgTWF0aC5hYnMoZGVsdGFYKSApO1xuXG4gICAgICAgIGlmICggIWxvd2VzdERlbHRhIHx8IGFic0RlbHRhIDwgbG93ZXN0RGVsdGEgKSB7XG4gICAgICAgICAgICBsb3dlc3REZWx0YSA9IGFic0RlbHRhO1xuXG4gICAgICAgICAgICAvLyBBZGp1c3Qgb2xkZXIgZGVsdGFzIGlmIG5lY2Vzc2FyeVxuICAgICAgICAgICAgaWYgKCBzaG91bGRBZGp1c3RPbGREZWx0YXMob3JnRXZlbnQsIGFic0RlbHRhKSApIHtcbiAgICAgICAgICAgICAgICBsb3dlc3REZWx0YSAvPSA0MDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkanVzdCBvbGRlciBkZWx0YXMgaWYgbmVjZXNzYXJ5XG4gICAgICAgIGlmICggc2hvdWxkQWRqdXN0T2xkRGVsdGFzKG9yZ0V2ZW50LCBhYnNEZWx0YSkgKSB7XG4gICAgICAgICAgICAvLyBEaXZpZGUgYWxsIHRoZSB0aGluZ3MgYnkgNDAhXG4gICAgICAgICAgICBkZWx0YSAgLz0gNDA7XG4gICAgICAgICAgICBkZWx0YVggLz0gNDA7XG4gICAgICAgICAgICBkZWx0YVkgLz0gNDA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgYSB3aG9sZSwgbm9ybWFsaXplZCB2YWx1ZSBmb3IgdGhlIGRlbHRhc1xuICAgICAgICBkZWx0YSAgPSBNYXRoWyBkZWx0YSAgPj0gMSA/ICdmbG9vcicgOiAnY2VpbCcgXShkZWx0YSAgLyBsb3dlc3REZWx0YSk7XG4gICAgICAgIGRlbHRhWCA9IE1hdGhbIGRlbHRhWCA+PSAxID8gJ2Zsb29yJyA6ICdjZWlsJyBdKGRlbHRhWCAvIGxvd2VzdERlbHRhKTtcbiAgICAgICAgZGVsdGFZID0gTWF0aFsgZGVsdGFZID49IDEgPyAnZmxvb3InIDogJ2NlaWwnIF0oZGVsdGFZIC8gbG93ZXN0RGVsdGEpO1xuXG4gICAgICAgIC8vIE5vcm1hbGlzZSBvZmZzZXRYIGFuZCBvZmZzZXRZIHByb3BlcnRpZXNcbiAgICAgICAgaWYgKCBzcGVjaWFsLnNldHRpbmdzLm5vcm1hbGl6ZU9mZnNldCAmJiB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCApIHtcbiAgICAgICAgICAgIHZhciBib3VuZGluZ1JlY3QgPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgb2Zmc2V0WCA9IGV2ZW50LmNsaWVudFggLSBib3VuZGluZ1JlY3QubGVmdDtcbiAgICAgICAgICAgIG9mZnNldFkgPSBldmVudC5jbGllbnRZIC0gYm91bmRpbmdSZWN0LnRvcDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkZCBpbmZvcm1hdGlvbiB0byB0aGUgZXZlbnQgb2JqZWN0XG4gICAgICAgIGV2ZW50LmRlbHRhWCA9IGRlbHRhWDtcbiAgICAgICAgZXZlbnQuZGVsdGFZID0gZGVsdGFZO1xuICAgICAgICBldmVudC5kZWx0YUZhY3RvciA9IGxvd2VzdERlbHRhO1xuICAgICAgICBldmVudC5vZmZzZXRYID0gb2Zmc2V0WDtcbiAgICAgICAgZXZlbnQub2Zmc2V0WSA9IG9mZnNldFk7XG4gICAgICAgIC8vIEdvIGFoZWFkIGFuZCBzZXQgZGVsdGFNb2RlIHRvIDAgc2luY2Ugd2UgY29udmVydGVkIHRvIHBpeGVsc1xuICAgICAgICAvLyBBbHRob3VnaCB0aGlzIGlzIGEgbGl0dGxlIG9kZCBzaW5jZSB3ZSBvdmVyd3JpdGUgdGhlIGRlbHRhWC9ZXG4gICAgICAgIC8vIHByb3BlcnRpZXMgd2l0aCBub3JtYWxpemVkIGRlbHRhcy5cbiAgICAgICAgZXZlbnQuZGVsdGFNb2RlID0gMDtcblxuICAgICAgICAvLyBBZGQgZXZlbnQgYW5kIGRlbHRhIHRvIHRoZSBmcm9udCBvZiB0aGUgYXJndW1lbnRzXG4gICAgICAgIGFyZ3MudW5zaGlmdChldmVudCwgZGVsdGEsIGRlbHRhWCwgZGVsdGFZKTtcblxuICAgICAgICAvLyBDbGVhcm91dCBsb3dlc3REZWx0YSBhZnRlciBzb21ldGltZSB0byBiZXR0ZXJcbiAgICAgICAgLy8gaGFuZGxlIG11bHRpcGxlIGRldmljZSB0eXBlcyB0aGF0IGdpdmUgZGlmZmVyZW50XG4gICAgICAgIC8vIGEgZGlmZmVyZW50IGxvd2VzdERlbHRhXG4gICAgICAgIC8vIEV4OiB0cmFja3BhZCA9IDMgYW5kIG1vdXNlIHdoZWVsID0gMTIwXG4gICAgICAgIGlmIChudWxsTG93ZXN0RGVsdGFUaW1lb3V0KSB7IGNsZWFyVGltZW91dChudWxsTG93ZXN0RGVsdGFUaW1lb3V0KTsgfVxuICAgICAgICBudWxsTG93ZXN0RGVsdGFUaW1lb3V0ID0gc2V0VGltZW91dChudWxsTG93ZXN0RGVsdGEsIDIwMCk7XG5cbiAgICAgICAgcmV0dXJuICgkLmV2ZW50LmRpc3BhdGNoIHx8ICQuZXZlbnQuaGFuZGxlKS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBudWxsTG93ZXN0RGVsdGEoKSB7XG4gICAgICAgIGxvd2VzdERlbHRhID0gbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzaG91bGRBZGp1c3RPbGREZWx0YXMob3JnRXZlbnQsIGFic0RlbHRhKSB7XG4gICAgICAgIC8vIElmIHRoaXMgaXMgYW4gb2xkZXIgZXZlbnQgYW5kIHRoZSBkZWx0YSBpcyBkaXZpc2FibGUgYnkgMTIwLFxuICAgICAgICAvLyB0aGVuIHdlIGFyZSBhc3N1bWluZyB0aGF0IHRoZSBicm93c2VyIGlzIHRyZWF0aW5nIHRoaXMgYXMgYW5cbiAgICAgICAgLy8gb2xkZXIgbW91c2Ugd2hlZWwgZXZlbnQgYW5kIHRoYXQgd2Ugc2hvdWxkIGRpdmlkZSB0aGUgZGVsdGFzXG4gICAgICAgIC8vIGJ5IDQwIHRvIHRyeSBhbmQgZ2V0IGEgbW9yZSB1c2FibGUgZGVsdGFGYWN0b3IuXG4gICAgICAgIC8vIFNpZGUgbm90ZSwgdGhpcyBhY3R1YWxseSBpbXBhY3RzIHRoZSByZXBvcnRlZCBzY3JvbGwgZGlzdGFuY2VcbiAgICAgICAgLy8gaW4gb2xkZXIgYnJvd3NlcnMgYW5kIGNhbiBjYXVzZSBzY3JvbGxpbmcgdG8gYmUgc2xvd2VyIHRoYW4gbmF0aXZlLlxuICAgICAgICAvLyBUdXJuIHRoaXMgb2ZmIGJ5IHNldHRpbmcgJC5ldmVudC5zcGVjaWFsLm1vdXNld2hlZWwuc2V0dGluZ3MuYWRqdXN0T2xkRGVsdGFzIHRvIGZhbHNlLlxuICAgICAgICByZXR1cm4gc3BlY2lhbC5zZXR0aW5ncy5hZGp1c3RPbGREZWx0YXMgJiYgb3JnRXZlbnQudHlwZSA9PT0gJ21vdXNld2hlZWwnICYmIGFic0RlbHRhICUgMTIwID09PSAwO1xuICAgIH1cblxufSkpO1xuXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuLi9jb21tb24vfi9pbXBvcnRzLWxvYWRlcj9kZWZpbmU9PmZhbHNlIS4vfi9qcXVlcnktbW91c2V3aGVlbC9qcXVlcnkubW91c2V3aGVlbC5qc1xuLy8gbW9kdWxlIGlkID0gNjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==